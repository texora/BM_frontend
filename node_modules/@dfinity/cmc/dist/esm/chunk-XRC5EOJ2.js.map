{
  "version": 3,
  "sources": ["../../src/cmc.errors.ts"],
  "sourcesContent": ["import type { NotifyError } from \"../candid/cmc\";\n\nexport class RefundedError extends Error {}\nexport class InvalidaTransactionError extends Error {}\nexport class CMCError extends Error {}\nexport class ProcessingError extends Error {}\nexport class TransactionTooOldError extends Error {}\n\n// Throws one of the errors above\nexport const throwNotifyError = ({\n  Err: error,\n}: {\n  Err: NotifyError;\n}): void => {\n  if (\"Refunded\" in error) {\n    throw new RefundedError(error.Refunded.reason);\n  }\n  if (\"InvalidTransaction\" in error) {\n    throw new InvalidaTransactionError(error.InvalidTransaction);\n  }\n  if (\"Processing\" in error) {\n    throw new ProcessingError();\n  }\n  if (\"TransactionTooOld\" in error) {\n    throw new TransactionTooOldError();\n  }\n  if (\"Other\" in error) {\n    throw new CMCError(\n      `Error in CMC with code ${error.Other.error_code}: ${error.Other.error_message}`,\n    );\n  }\n  // Edge case\n  throw new Error(`Unsupported error type ${JSON.stringify(error)}`);\n};\n"],
  "mappings": "AAEO,IAAMA,EAAN,cAA4B,KAAM,CAAC,EAC7BC,EAAN,cAAuC,KAAM,CAAC,EACxCC,EAAN,cAAuB,KAAM,CAAC,EACxBC,EAAN,cAA8B,KAAM,CAAC,EAC/BC,EAAN,cAAqC,KAAM,CAAC,EAGtCC,EAAmB,CAAC,CAC/B,IAAKC,CACP,IAEY,CACV,KAAI,aAAcA,EACV,IAAIN,EAAcM,EAAM,SAAS,MAAM,EAE3C,uBAAwBA,EACpB,IAAIL,EAAyBK,EAAM,kBAAkB,EAEzD,eAAgBA,EACZ,IAAIH,EAER,sBAAuBG,EACnB,IAAIF,EAER,UAAWE,EACP,IAAIJ,EACR,0BAA0BI,EAAM,MAAM,UAAU,KAAKA,EAAM,MAAM,aAAa,EAChF,EAGI,IAAI,MAAM,0BAA0B,KAAK,UAAUA,CAAK,CAAC,EAAE,CACnE",
  "names": ["RefundedError", "InvalidaTransactionError", "CMCError", "ProcessingError", "TransactionTooOldError", "throwNotifyError", "error"]
}
