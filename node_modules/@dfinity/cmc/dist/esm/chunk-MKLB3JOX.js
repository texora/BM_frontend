import{f as o}from"./chunk-XRC5EOJ2.js";import{Actor as S}from"@dfinity/agent";var l=({IDL:t})=>{let r=t.Variant({Set:t.Principal,Unset:t.Null}),e=t.Text,a=t.Record({exchange_rate_canister:t.Opt(r),cycles_ledger_canister_id:t.Opt(t.Principal),last_purged_notification:t.Opt(t.Nat64),governance_canister_id:t.Opt(t.Principal),minting_account_id:t.Opt(e),ledger_canister_id:t.Opt(t.Principal)}),i=t.Record({subnet_type:t.Opt(t.Text)}),s=t.Variant({Filter:i,Subnet:t.Record({subnet:t.Principal})}),d=t.Variant({controllers:t.Null,public:t.Null}),p=t.Record({freezing_threshold:t.Opt(t.Nat),wasm_memory_threshold:t.Opt(t.Nat),controllers:t.Opt(t.Vec(t.Principal)),reserved_cycles_limit:t.Opt(t.Nat),log_visibility:t.Opt(d),wasm_memory_limit:t.Opt(t.Nat),memory_allocation:t.Opt(t.Nat),compute_allocation:t.Opt(t.Nat)}),u=t.Record({subnet_selection:t.Opt(s),settings:t.Opt(p),subnet_type:t.Opt(t.Text)}),y=t.Variant({Refunded:t.Record({create_error:t.Text,refund_amount:t.Nat})}),O=t.Variant({Ok:t.Principal,Err:y}),f=t.Record({xdr_permyriad_per_icp:t.Nat64,timestamp_seconds:t.Nat64}),C=t.Record({certificate:t.Vec(t.Nat8),data:f,hash_tree:t.Vec(t.Nat8)}),g=t.Record({data:t.Vec(t.Tuple(t.Principal,t.Vec(t.Principal)))}),m=t.Record({data:t.Vec(t.Tuple(t.Text,t.Vec(t.Principal)))}),n=t.Nat64,N=t.Record({controller:t.Principal,block_index:n,subnet_selection:t.Opt(s),settings:t.Opt(p),subnet_type:t.Opt(t.Text)}),c=t.Variant({Refunded:t.Record({block_index:t.Opt(n),reason:t.Text}),InvalidTransaction:t.Text,Other:t.Record({error_message:t.Text,error_code:t.Nat64}),Processing:t.Null,TransactionTooOld:n}),R=t.Variant({Ok:t.Principal,Err:c}),b=t.Opt(t.Vec(t.Nat8)),x=t.Opt(t.Vec(t.Nat8)),P=t.Record({block_index:n,deposit_memo:b,to_subaccount:x}),T=t.Record({balance:t.Nat,block_index:t.Nat,minted:t.Nat}),V=t.Variant({Ok:T,Err:c}),v=t.Record({block_index:n,canister_id:t.Principal}),h=t.Nat,E=t.Variant({Ok:h,Err:c});return t.Service({create_canister:t.Func([u],[O],[]),get_build_metadata:t.Func([],[t.Text],["query"]),get_default_subnets:t.Func([],[t.Vec(t.Principal)],["query"]),get_icp_xdr_conversion_rate:t.Func([],[C],["query"]),get_principals_authorized_to_create_canisters_to_subnets:t.Func([],[g],["query"]),get_subnet_types_to_subnets:t.Func([],[m],["query"]),notify_create_canister:t.Func([N],[R],[]),notify_mint_cycles:t.Func([P],[V],[]),notify_top_up:t.Func([v],[E],[])})};var _=class t{constructor(r){this.service=r;this.getIcpToCyclesConversionRate=async()=>{let{data:r}=await this.service.get_icp_xdr_conversion_rate();return r.xdr_permyriad_per_icp};this.notifyCreateCanister=async r=>{let e=await this.service.notify_create_canister(r);if("Err"in e&&o(e),"Ok"in e)return e.Ok;throw new Error(`Unsupported response type in notifyCreateCanister ${JSON.stringify(e)}`)};this.notifyTopUp=async r=>{let e=await this.service.notify_top_up(r);if("Err"in e&&o(e),"Ok"in e)return e.Ok;throw new Error(`Unsupported response type in notifyTopUp ${JSON.stringify(e)}`)};this.service=r}static create(r){let e=r.agent,a=r.canisterId,i=r.serviceOverride??S.createActor(l,{agent:e,canisterId:a});return new t(i)}};export{_ as a};
//# sourceMappingURL=chunk-MKLB3JOX.js.map
