{
  "version": 3,
  "sources": ["../../src/cmc.canister.ts", "../../candid/cmc.idl.js"],
  "sourcesContent": ["import { Actor } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type {\n  Cycles,\n  NotifyCreateCanisterArg,\n  NotifyTopUpArg,\n  _SERVICE,\n} from \"../candid/cmc\";\nimport { idlFactory } from \"../candid/cmc.idl\";\nimport { throwNotifyError } from \"./cmc.errors\";\nimport type { CMCCanisterOptions } from \"./cmc.options\";\n\nexport class CMCCanister {\n  private constructor(private readonly service: _SERVICE) {\n    this.service = service;\n  }\n\n  public static create(options: CMCCanisterOptions) {\n    const agent = options.agent;\n    const canisterId = options.canisterId;\n\n    const service =\n      options.serviceOverride ??\n      Actor.createActor<_SERVICE>(idlFactory, {\n        agent,\n        canisterId,\n      });\n\n    return new CMCCanister(service);\n  }\n\n  /**\n   * Returns conversion rate of ICP to Cycles\n   *\n   * @returns Promise<BigInt>\n   */\n  public getIcpToCyclesConversionRate = async (): Promise<bigint> => {\n    const { data } = await this.service.get_icp_xdr_conversion_rate();\n\n    // TODO: validate the certificate in the response - https://dfinity.atlassian.net/browse/FOLLOW-223\n    return data.xdr_permyriad_per_icp;\n  };\n\n  /**\n   * Notifies Cycles Minting Canister of the creation of a new canister.\n   * It returns the new canister principal.\n   *\n   * @param {Object} request\n   * @param {Principal} request.controller\n   * @param {BlockIndex} request.block_index\n   * @returns Promise<Principal>\n   * @throws RefundedError, InvalidaTransactionError, ProcessingError, TransactionTooOldError, CMCError\n   */\n  public notifyCreateCanister = async (\n    request: NotifyCreateCanisterArg,\n  ): Promise<Principal> => {\n    const response = await this.service.notify_create_canister(request);\n    if (\"Err\" in response) {\n      throwNotifyError(response);\n    }\n    if (\"Ok\" in response) {\n      return response.Ok;\n    }\n    // Edge case\n    throw new Error(\n      `Unsupported response type in notifyCreateCanister ${JSON.stringify(\n        response,\n      )}`,\n    );\n  };\n\n  /**\n   * Notifies Cycles Minting Canister of new cycles being added to canister.\n   * It returns the new Cycles of the canister.\n   *\n   * @param {Object} request\n   * @param {Principal} request.canister_id\n   * @param {BlockIndex} request.block_index\n   * @returns Promise<Cycles>\n   * @throws RefundedError, InvalidaTransactionError, ProcessingError, TransactionTooOldError, CMCError\n   */\n  public notifyTopUp = async (request: NotifyTopUpArg): Promise<Cycles> => {\n    const response = await this.service.notify_top_up(request);\n    if (\"Err\" in response) {\n      throwNotifyError(response);\n    }\n    if (\"Ok\" in response) {\n      return response.Ok;\n    }\n    // Edge case\n    throw new Error(\n      `Unsupported response type in notifyTopUp ${JSON.stringify(response)}`,\n    );\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/cmc/candid/cmc.did */\nexport const idlFactory = ({ IDL }) => {\n  const ExchangeRateCanister = IDL.Variant({\n    'Set' : IDL.Principal,\n    'Unset' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Text;\n  const CyclesCanisterInitPayload = IDL.Record({\n    'exchange_rate_canister' : IDL.Opt(ExchangeRateCanister),\n    'cycles_ledger_canister_id' : IDL.Opt(IDL.Principal),\n    'last_purged_notification' : IDL.Opt(IDL.Nat64),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'minting_account_id' : IDL.Opt(AccountIdentifier),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SubnetFilter = IDL.Record({ 'subnet_type' : IDL.Opt(IDL.Text) });\n  const SubnetSelection = IDL.Variant({\n    'Filter' : SubnetFilter,\n    'Subnet' : IDL.Record({ 'subnet' : IDL.Principal }),\n  });\n  const log_visibility = IDL.Variant({\n    'controllers' : IDL.Null,\n    'public' : IDL.Null,\n  });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat),\n    'wasm_memory_threshold' : IDL.Opt(IDL.Nat),\n    'controllers' : IDL.Opt(IDL.Vec(IDL.Principal)),\n    'reserved_cycles_limit' : IDL.Opt(IDL.Nat),\n    'log_visibility' : IDL.Opt(log_visibility),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat),\n    'memory_allocation' : IDL.Opt(IDL.Nat),\n    'compute_allocation' : IDL.Opt(IDL.Nat),\n  });\n  const CreateCanisterArg = IDL.Record({\n    'subnet_selection' : IDL.Opt(SubnetSelection),\n    'settings' : IDL.Opt(CanisterSettings),\n    'subnet_type' : IDL.Opt(IDL.Text),\n  });\n  const CreateCanisterError = IDL.Variant({\n    'Refunded' : IDL.Record({\n      'create_error' : IDL.Text,\n      'refund_amount' : IDL.Nat,\n    }),\n  });\n  const CreateCanisterResult = IDL.Variant({\n    'Ok' : IDL.Principal,\n    'Err' : CreateCanisterError,\n  });\n  const IcpXdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const IcpXdrConversionRateResponse = IDL.Record({\n    'certificate' : IDL.Vec(IDL.Nat8),\n    'data' : IcpXdrConversionRate,\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  const PrincipalsAuthorizedToCreateCanistersToSubnetsResponse = IDL.Record({\n    'data' : IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Vec(IDL.Principal))),\n  });\n  const SubnetTypesToSubnetsResponse = IDL.Record({\n    'data' : IDL.Vec(IDL.Tuple(IDL.Text, IDL.Vec(IDL.Principal))),\n  });\n  const BlockIndex = IDL.Nat64;\n  const NotifyCreateCanisterArg = IDL.Record({\n    'controller' : IDL.Principal,\n    'block_index' : BlockIndex,\n    'subnet_selection' : IDL.Opt(SubnetSelection),\n    'settings' : IDL.Opt(CanisterSettings),\n    'subnet_type' : IDL.Opt(IDL.Text),\n  });\n  const NotifyError = IDL.Variant({\n    'Refunded' : IDL.Record({\n      'block_index' : IDL.Opt(BlockIndex),\n      'reason' : IDL.Text,\n    }),\n    'InvalidTransaction' : IDL.Text,\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n    'Processing' : IDL.Null,\n    'TransactionTooOld' : BlockIndex,\n  });\n  const NotifyCreateCanisterResult = IDL.Variant({\n    'Ok' : IDL.Principal,\n    'Err' : NotifyError,\n  });\n  const Memo = IDL.Opt(IDL.Vec(IDL.Nat8));\n  const Subaccount = IDL.Opt(IDL.Vec(IDL.Nat8));\n  const NotifyMintCyclesArg = IDL.Record({\n    'block_index' : BlockIndex,\n    'deposit_memo' : Memo,\n    'to_subaccount' : Subaccount,\n  });\n  const NotifyMintCyclesSuccess = IDL.Record({\n    'balance' : IDL.Nat,\n    'block_index' : IDL.Nat,\n    'minted' : IDL.Nat,\n  });\n  const NotifyMintCyclesResult = IDL.Variant({\n    'Ok' : NotifyMintCyclesSuccess,\n    'Err' : NotifyError,\n  });\n  const NotifyTopUpArg = IDL.Record({\n    'block_index' : BlockIndex,\n    'canister_id' : IDL.Principal,\n  });\n  const Cycles = IDL.Nat;\n  const NotifyTopUpResult = IDL.Variant({ 'Ok' : Cycles, 'Err' : NotifyError });\n  return IDL.Service({\n    'create_canister' : IDL.Func(\n        [CreateCanisterArg],\n        [CreateCanisterResult],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'get_default_subnets' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n    'get_icp_xdr_conversion_rate' : IDL.Func(\n        [],\n        [IcpXdrConversionRateResponse],\n        ['query'],\n      ),\n    'get_principals_authorized_to_create_canisters_to_subnets' : IDL.Func(\n        [],\n        [PrincipalsAuthorizedToCreateCanistersToSubnetsResponse],\n        ['query'],\n      ),\n    'get_subnet_types_to_subnets' : IDL.Func(\n        [],\n        [SubnetTypesToSubnetsResponse],\n        ['query'],\n      ),\n    'notify_create_canister' : IDL.Func(\n        [NotifyCreateCanisterArg],\n        [NotifyCreateCanisterResult],\n        [],\n      ),\n    'notify_mint_cycles' : IDL.Func(\n        [NotifyMintCyclesArg],\n        [NotifyMintCyclesResult],\n        [],\n      ),\n    'notify_top_up' : IDL.Func([NotifyTopUpArg], [NotifyTopUpResult], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const ExchangeRateCanister = IDL.Variant({\n    'Set' : IDL.Principal,\n    'Unset' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Text;\n  const CyclesCanisterInitPayload = IDL.Record({\n    'exchange_rate_canister' : IDL.Opt(ExchangeRateCanister),\n    'cycles_ledger_canister_id' : IDL.Opt(IDL.Principal),\n    'last_purged_notification' : IDL.Opt(IDL.Nat64),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'minting_account_id' : IDL.Opt(AccountIdentifier),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  return [IDL.Opt(CyclesCanisterInitPayload)];\n};\n"],
  "mappings": "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",
  "names": ["Actor", "idlFactory", "IDL", "ExchangeRateCanister", "AccountIdentifier", "CyclesCanisterInitPayload", "SubnetFilter", "SubnetSelection", "log_visibility", "CanisterSettings", "CreateCanisterArg", "CreateCanisterError", "CreateCanisterResult", "IcpXdrConversionRate", "IcpXdrConversionRateResponse", "PrincipalsAuthorizedToCreateCanistersToSubnetsResponse", "SubnetTypesToSubnetsResponse", "BlockIndex", "NotifyCreateCanisterArg", "NotifyError", "NotifyCreateCanisterResult", "Memo", "Subaccount", "NotifyMintCyclesArg", "NotifyMintCyclesSuccess", "NotifyMintCyclesResult", "NotifyTopUpArg", "Cycles", "NotifyTopUpResult", "CMCCanister", "_CMCCanister", "service", "data", "request", "response", "throwNotifyError", "options", "agent", "canisterId", "Actor", "idlFactory"]
}
