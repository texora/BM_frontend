import type { Principal } from "@dfinity/principal";
import type { Cycles, NotifyCreateCanisterArg, NotifyTopUpArg } from "../candid/cmc";
import type { CMCCanisterOptions } from "./cmc.options";
export declare class CMCCanister {
    private readonly service;
    private constructor();
    static create(options: CMCCanisterOptions): CMCCanister;
    /**
     * Returns conversion rate of ICP to Cycles
     *
     * @returns Promise<BigInt>
     */
    getIcpToCyclesConversionRate: () => Promise<bigint>;
    /**
     * Notifies Cycles Minting Canister of the creation of a new canister.
     * It returns the new canister principal.
     *
     * @param {Object} request
     * @param {Principal} request.controller
     * @param {BlockIndex} request.block_index
     * @returns Promise<Principal>
     * @throws RefundedError, InvalidaTransactionError, ProcessingError, TransactionTooOldError, CMCError
     */
    notifyCreateCanister: (request: NotifyCreateCanisterArg) => Promise<Principal>;
    /**
     * Notifies Cycles Minting Canister of new cycles being added to canister.
     * It returns the new Cycles of the canister.
     *
     * @param {Object} request
     * @param {Principal} request.canister_id
     * @param {BlockIndex} request.block_index
     * @returns Promise<Cycles>
     * @throws RefundedError, InvalidaTransactionError, ProcessingError, TransactionTooOldError, CMCError
     */
    notifyTopUp: (request: NotifyTopUpArg) => Promise<Cycles>;
}
