{
  "version": 3,
  "sources": ["../../../../node_modules/base64-js/index.js", "../../../../node_modules/ieee754/index.js", "../../../../node_modules/buffer/index.js", "../../../../node_modules/safe-buffer/index.js", "../../../../node_modules/randombytes/browser.js", "../../src/governance.canister.ts", "../../../../node_modules/@noble/hashes/src/_assert.ts", "../../../../node_modules/@noble/hashes/src/utils.ts", "../../../../node_modules/@noble/hashes/src/_md.ts", "../../../../node_modules/@noble/hashes/src/sha256.ts", "../../candid/governance.certified.idl.js", "../../candid/governance.idl.js", "../../candid/old_list_neurons_service.certified.idl.js", "../../src/canisters/governance/request.converters.ts", "../../src/errors/governance.errors.ts", "../../src/canisters/governance/response.converters.ts", "../../src/canisters/governance/services.ts", "../../src/constants/constants.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n", "import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { LedgerCanister } from \"@dfinity/ledger-icp\";\nimport {\n  AccountIdentifier,\n  SubAccount,\n  checkAccountId,\n} from \"@dfinity/ledger-icp\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  assertPercentageNumber,\n  createServices,\n  fromNullable,\n  isNullish,\n  nonNullish,\n  uint8ArrayToBigInt,\n} from \"@dfinity/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport randomBytes from \"randombytes\";\nimport type {\n  Command_1,\n  _SERVICE as GovernanceService,\n  ListProposalInfo,\n  MergeResponse,\n  Neuron as RawNeuron,\n  NeuronInfo as RawNeuronInfo,\n  ProposalInfo as RawProposalInfo,\n  RewardEvent,\n} from \"../candid/governance\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/governance.certified.idl\";\nimport { idlFactory } from \"../candid/governance.idl\";\nimport { idlFactory as oldListNeuronsCertifiedIdlFactory } from \"../candid/old_list_neurons_service.certified.idl\";\nimport {\n  fromClaimOrRefreshNeuronRequest,\n  fromListNeurons,\n  fromListProposalsRequest,\n  toAddHotkeyRequest,\n  toAutoStakeMaturityRequest,\n  toClaimOrRefreshRequest,\n  toDisburseNeuronRequest,\n  toIncreaseDissolveDelayRequest,\n  toJoinCommunityFundRequest,\n  toLeaveCommunityFundRequest,\n  toMakeProposalRawRequest,\n  toManageNeuronsFollowRequest,\n  toMergeMaturityRequest,\n  toMergeRequest,\n  toRegisterVoteRequest,\n  toRemoveHotkeyRequest,\n  toSetDissolveDelayRequest,\n  toSetVisibilityRequest,\n  toSpawnNeuronRequest,\n  toSplitRawRequest,\n  toStakeMaturityRequest,\n  toStartDissolvingRequest,\n  toStopDissolvingRequest,\n} from \"./canisters/governance/request.converters\";\nimport {\n  toArrayOfNeuronInfo,\n  toListProposalsResponse,\n  toNeuronInfo,\n  toProposalInfo,\n} from \"./canisters/governance/response.converters\";\nimport {\n  getSuccessfulCommandFromResponse,\n  manageNeuron,\n  simulateManageNeuron,\n} from \"./canisters/governance/services\";\nimport { MAINNET_GOVERNANCE_CANISTER_ID } from \"./constants/canister_ids\";\nimport { E8S_PER_TOKEN } from \"./constants/constants\";\nimport type { NeuronVisibility, Vote } from \"./enums/governance.enums\";\nimport {\n  CouldNotClaimNeuronError,\n  GovernanceError,\n  InsufficientAmountError,\n  UnrecognizedTypeError,\n} from \"./errors/governance.errors\";\nimport type { E8s, NeuronId } from \"./types/common\";\nimport type { GovernanceCanisterOptions } from \"./types/governance.options\";\nimport type {\n  ClaimOrRefreshNeuronRequest,\n  FollowRequest,\n  KnownNeuron,\n  ListProposalsRequest,\n  ListProposalsResponse,\n  MakeProposalRequest,\n  NeuronInfo,\n  ProposalId,\n  ProposalInfo,\n} from \"./types/governance_converters\";\n\nexport class GovernanceCanister {\n  private constructor(\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<GovernanceService>,\n    private readonly certifiedService: ActorSubclass<GovernanceService>,\n    private readonly oldListNeuronsCertifiedService: ActorSubclass<GovernanceService>,\n    private readonly agent: Agent,\n  ) {\n    this.canisterId = canisterId;\n    this.service = service;\n    this.certifiedService = certifiedService;\n    this.oldListNeuronsCertifiedService = oldListNeuronsCertifiedService;\n    this.agent = agent;\n  }\n\n  public static create(options: GovernanceCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_GOVERNANCE_CANISTER_ID;\n\n    const { service, certifiedService, agent } =\n      createServices<GovernanceService>({\n        options: {\n          ...options,\n          canisterId,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    const oldListNeuronsCertifiedService =\n      options.oldListNeuronsServiceOverride ??\n      Actor.createActor<GovernanceService>(oldListNeuronsCertifiedIdlFactory, {\n        agent,\n        canisterId,\n      });\n\n    return new GovernanceCanister(\n      canisterId,\n      service,\n      certifiedService,\n      oldListNeuronsCertifiedService,\n      agent,\n    );\n  }\n\n  /**\n   * Returns the list of neurons controlled by the caller.\n   *\n   * If an array of neuron IDs is provided, precisely those neurons will be fetched.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * The backend treats `includeEmptyNeurons` as true if absent.\n   */\n  public listNeurons = async ({\n    certified = true,\n    neuronIds,\n    includeEmptyNeurons,\n    includePublicNeurons,\n  }: {\n    certified: boolean;\n    neuronIds?: NeuronId[];\n    includeEmptyNeurons?: boolean;\n    includePublicNeurons?: boolean;\n  }): Promise<NeuronInfo[]> => {\n    const rawRequest = fromListNeurons({\n      neuronIds,\n      includeEmptyNeurons,\n      includePublicNeurons,\n    });\n    // The Ledger app version 2.4.9 does not support\n    // include_empty_neurons_readable_by_caller nor include_public_neurons_in_full_neurons,\n    // even when the field is absent,\n    // so we use the old service (which does not have these fields) if possible,\n    // in case the call will be signed by the Ledger device. We only have a\n    // certified version of the old service.\n    const useOldMethod =\n      isNullish(includeEmptyNeurons) &&\n      isNullish(includePublicNeurons) &&\n      certified;\n    const service = useOldMethod\n      ? this.oldListNeuronsCertifiedService\n      : this.getGovernanceService(certified);\n    const raw_response = await service.list_neurons(rawRequest);\n    return toArrayOfNeuronInfo({\n      response: raw_response,\n      canisterId: this.canisterId,\n    });\n  };\n\n  /**\n   * Returns the list of neurons who have been approved by the community to\n   * appear as the default followee options.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public listKnownNeurons = async (\n    certified = true,\n  ): Promise<KnownNeuron[]> => {\n    const response =\n      await this.getGovernanceService(certified).list_known_neurons();\n\n    return response.known_neurons.map((n) => ({\n      id: fromNullable(n.id)?.id ?? BigInt(0),\n      name: fromNullable(n.known_neuron_data)?.name ?? \"\",\n      description: fromNullable(\n        fromNullable(n.known_neuron_data)?.description ?? [],\n      ),\n    }));\n  };\n\n  /**\n   * Returns the latest reward event.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it's fetched using a query call.\n   *\n   */\n  public getLastestRewardEvent = async (\n    certified = true,\n  ): Promise<RewardEvent> => {\n    return this.getGovernanceService(certified).get_latest_reward_event();\n  };\n\n  /**\n   * Returns the list of proposals made for the community to vote on,\n   * paginated and filtered by the request.\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param request the options to list the proposals (limit number of results, topics to search for, etc.)\n   * @param certified query or update calls\n   */\n  public listProposals = async ({\n    request,\n    certified = true,\n  }: {\n    request: ListProposalsRequest;\n    certified?: boolean;\n  }): Promise<ListProposalsResponse> => {\n    const rawRequest: ListProposalInfo = fromListProposalsRequest(request);\n    const rawResponse =\n      await this.getGovernanceService(certified).list_proposals(rawRequest);\n    return toListProposalsResponse(rawResponse);\n  };\n\n  /**\n   * @throws {@link InsufficientAmountError}\n   * @throws {@link StakeNeuronTransferError}\n   * @throws {@link CouldNotClaimNeuronError}\n   * @throws {@link TransferError}\n   */\n  public stakeNeuron = async ({\n    stake,\n    principal,\n    fromSubAccount,\n    ledgerCanister,\n    createdAt,\n    fee,\n  }: {\n    stake: bigint;\n    principal: Principal;\n    fromSubAccount?: number[];\n    ledgerCanister: LedgerCanister;\n    // Used for the TransferRequest parameters.\n    // Check the TransferRequest type for more information.\n    createdAt?: bigint;\n    fee?: E8s;\n  }): Promise<NeuronId> => {\n    if (stake < E8S_PER_TOKEN) {\n      throw new InsufficientAmountError(stake);\n    }\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const nonce = uint8ArrayToBigInt(nonceBytes);\n    const toSubAccount = this.buildNeuronStakeSubAccount(nonceBytes, principal);\n    const accountIdentifier = AccountIdentifier.fromPrincipal({\n      principal: this.canisterId,\n      subAccount: toSubAccount,\n    });\n\n    // Send amount to the ledger.\n    await ledgerCanister.transfer({\n      memo: nonce,\n      amount: stake,\n      fromSubAccount,\n      to: accountIdentifier,\n      createdAt,\n      fee,\n    });\n\n    // Notify the governance of the transaction so that the neuron is created.\n    const neuronId: NeuronId | undefined =\n      await this.claimOrRefreshNeuronFromAccount({\n        controller: principal,\n        memo: nonce,\n      });\n\n    // Typescript was complaining with `neuronId || new NeuronNotFound()`:\n    // \"Type 'undefined' is not assignable to type 'bigint | StakeNeuronError | TransferError'\"\n    // hence the explicit check.\n    if (isNullish(neuronId)) {\n      throw new CouldNotClaimNeuronError();\n    }\n\n    return neuronId;\n  };\n\n  // TODO: Rename to and replace `stakeNeuron` once `stakeNeuronIcrc1` is tested\n  // in NNS dapp.\n  // Note: Ledger HW does currently (2023-09-20) not support ICRC-1 transfers to\n  // the governance canister.\n  /**\n   * @throws {@link InsufficientAmountError}\n   * @throws {@link StakeNeuronTransferError}\n   * @throws {@link CouldNotClaimNeuronError}\n   * @throws {@link TransferError}\n   */\n  public stakeNeuronIcrc1 = async ({\n    stake,\n    principal,\n    fromSubAccount,\n    ledgerCanister,\n    createdAt,\n    fee,\n  }: {\n    stake: bigint;\n    principal: Principal;\n    fromSubAccount?: Uint8Array;\n    ledgerCanister: LedgerCanister;\n    // Used for the TransferRequest parameters.\n    // Check the TransferRequest type for more information.\n    createdAt?: bigint;\n    fee?: E8s;\n  }): Promise<NeuronId> => {\n    if (stake < E8S_PER_TOKEN) {\n      throw new InsufficientAmountError(stake);\n    }\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const nonce = uint8ArrayToBigInt(nonceBytes);\n    const toSubAccount = this.getNeuronStakeSubAccountBytes(\n      nonceBytes,\n      principal,\n    );\n\n    // Send amount to the ledger.\n    await ledgerCanister.icrc1Transfer({\n      // WARNING: This does not set the same memo field as the stakeNeuron\n      // function above and would need to be handled separately from that field.\n      icrc1Memo: nonceBytes,\n      amount: stake,\n      fromSubAccount,\n      to: {\n        owner: this.canisterId,\n        subaccount: [toSubAccount],\n      },\n      createdAt,\n      fee,\n    });\n\n    // Notify the governance of the transaction so that the neuron is created.\n    const neuronId: NeuronId | undefined =\n      await this.claimOrRefreshNeuronFromAccount({\n        controller: principal,\n        memo: nonce,\n      });\n\n    // Typescript was complaining with `neuronId || new NeuronNotFound()`:\n    // \"Type 'undefined' is not assignable to type 'bigint | StakeNeuronError | TransferError'\"\n    // hence the explicit check.\n    if (isNullish(neuronId)) {\n      throw new CouldNotClaimNeuronError();\n    }\n\n    return neuronId;\n  };\n\n  /**\n   * Increases dissolve delay of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public increaseDissolveDelay = async ({\n    neuronId,\n    additionalDissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    additionalDissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const request = toIncreaseDissolveDelayRequest({\n      neuronId,\n      additionalDissolveDelaySeconds,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets dissolve delay of a neuron.\n   * The new date is now + dissolveDelaySeconds.\n   *\n   * @param {NeuronId} neuronId\n   * @param {number} dissolveDelaySeconds\n   * @throws {@link GovernanceError}\n   */\n  public setDissolveDelay = async ({\n    neuronId,\n    dissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    dissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const request = toSetDissolveDelayRequest({\n      neuronId,\n      dissolveDelaySeconds,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Start dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public startDissolving = async (neuronId: NeuronId): Promise<void> => {\n    const request = toStartDissolvingRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stop dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public stopDissolving = async (neuronId: NeuronId): Promise<void> => {\n    const request = toStopDissolvingRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Neuron joins the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public joinCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    const request = toJoinCommunityFundRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Changes auto-stake maturity for this Neuron. While on, auto-stake maturity will cause all the maturity generated by voting rewards to this neuron to be automatically staked and contribute to the voting power of the neuron.\n   *\n   * @param {neuronId: NeuronId; autoStake: boolean;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to request a change of the auto stake feature\n   * @param {number} autoStake `true` to enable the auto-stake maturity for this neuron, `false` to turn it off\n   *\n   * @throws {@link GovernanceError}\n   */\n  public autoStakeMaturity = async (params: {\n    neuronId: NeuronId;\n    autoStake: boolean;\n  }): Promise<void> => {\n    await manageNeuron({\n      request: toAutoStakeMaturityRequest(params),\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Neuron leaves the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public leaveCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    const request = toLeaveCommunityFundRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Set visibility of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public setVisibility = async (\n    neuronId: NeuronId,\n    visibility: NeuronVisibility,\n  ): Promise<void> => {\n    const request = toSetVisibilityRequest({ neuronId, visibility });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets node provider reward account.\n   * Where the reward is paid to.\n   *\n   * @param {string} accountIdentifier\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public setNodeProviderAccount = async (\n    accountIdentifier: string,\n  ): Promise<void> => {\n    // Might throw InvalidAccountIDError\n    checkAccountId(accountIdentifier);\n    const account = AccountIdentifier.fromHex(accountIdentifier);\n    const response = await this.certifiedService.update_node_provider({\n      reward_account: [account.toAccountIdentifierHash()],\n    });\n\n    if (\"Err\" in response) {\n      throw new GovernanceError(response.Err);\n    }\n  };\n\n  /**\n   * Merge two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public mergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<void> => {\n    const rawRequest = toMergeRequest(request);\n\n    await manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Simulate merging two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public simulateMergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<NeuronInfo> => {\n    const rawRequest = toMergeRequest(request);\n\n    const command = await simulateManageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n\n    let merge: MergeResponse | undefined;\n    let neuronInfo: RawNeuronInfo | undefined;\n    let rawNeuron: RawNeuron | undefined;\n    let neuronId: NeuronId | undefined;\n\n    if (\n      \"Merge\" in command &&\n      nonNullish((merge = command.Merge)) &&\n      nonNullish((neuronInfo = fromNullable(merge.target_neuron_info))) &&\n      nonNullish((rawNeuron = fromNullable(merge.target_neuron))) &&\n      nonNullish((neuronId = fromNullable(rawNeuron.id)?.id))\n    ) {\n      return toNeuronInfo({\n        neuronId,\n        neuronInfo,\n        rawNeuron,\n        canisterId: this.canisterId,\n      });\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `simulateMergeNeurons: Unrecognized Merge error in ${JSON.stringify(\n        command,\n      )}`,\n    );\n  };\n\n  /**\n   * Splits a neuron creating a new one\n   *\n   * @returns newNeuronId\n   * @throws {@link GovernanceError}\n   */\n  public splitNeuron = async ({\n    neuronId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    amount: bigint;\n  }): Promise<NeuronId> => {\n    const request = toSplitRawRequest({\n      neuronId,\n      amount,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n\n    if (\"Split\" in command) {\n      const neuron = fromNullable(command.Split.created_neuron_id);\n      if (isNullish(neuron)) {\n        // Edge case\n        throw new GovernanceError({\n          error_message:\n            \"Unexpected error splitting neuron. No neuronId in Split response.\",\n          error_type: 0,\n        });\n      }\n      return neuron.id;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Split error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Returns single proposal info\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public getProposal = async ({\n    proposalId,\n    certified = true,\n  }: {\n    proposalId: bigint;\n    certified?: boolean;\n  }): Promise<ProposalInfo | undefined> => {\n    const [proposalInfo]: [] | [RawProposalInfo] =\n      await this.getGovernanceService(certified).get_proposal_info(proposalId);\n    return proposalInfo ? toProposalInfo(proposalInfo) : undefined;\n  };\n\n  /**\n   * Create new proposal\n   *\n   * @returns The newly created proposal ID or undefined if the success response returned by the Governance canister does not provide such information.\n   * @throws {@link GovernanceError}\n   */\n  public makeProposal = async (\n    request: MakeProposalRequest,\n  ): Promise<NeuronId | undefined> => {\n    const rawRequest = toMakeProposalRawRequest(request);\n\n    const cmd = await manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n\n    return \"MakeProposal\" in cmd\n      ? fromNullable(cmd.MakeProposal.proposal_id)?.id\n      : undefined;\n  };\n\n  /**\n   *\n   * Registers vote for a proposal from the neuron passed.\n   *\n   * @throws {@link GovernanceError}\n   */\n  public registerVote = async ({\n    neuronId,\n    vote,\n    proposalId,\n  }: {\n    neuronId: NeuronId;\n    vote: Vote;\n    proposalId: ProposalId;\n  }): Promise<void> => {\n    const request = toRegisterVoteRequest({ neuronId, vote, proposalId });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Edit neuron followees per topic\n   *\n   * @throws {@link GovernanceError}\n   */\n  public setFollowees = async (followRequest: FollowRequest): Promise<void> => {\n    const request = toManageNeuronsFollowRequest(followRequest);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Disburse neuron on Account\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public disburse = async ({\n    neuronId,\n    toAccountId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    toAccountId?: string;\n    amount?: E8s;\n  }): Promise<void> => {\n    if (nonNullish(toAccountId)) {\n      // Might throw InvalidAccountIDError\n      checkAccountId(toAccountId);\n    }\n    // TODO: Test that the new way also works for disbursements.\n    const toAccountIdentifier = nonNullish(toAccountId)\n      ? AccountIdentifier.fromHex(toAccountId)\n      : undefined;\n    const request = toDisburseNeuronRequest({\n      neuronId,\n      toAccountIdentifier,\n      amount,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public mergeMaturity = async ({\n    neuronId,\n    percentageToMerge,\n  }: {\n    neuronId: NeuronId;\n    percentageToMerge: number;\n  }): Promise<void> => {\n    // Might throw InvalidPercentageError\n    assertPercentageNumber(percentageToMerge);\n\n    const request = toMergeMaturityRequest({ neuronId, percentageToMerge });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stake the maturity of a neuron.\n   *\n   * @param {neuronId: NeuronId; percentageToStake: number;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to stake the maturity\n   * @param {number} percentageToStake Optional. Percentage of the current maturity to stake. If not provided, all of the neuron's current maturity will be staked.\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public stakeMaturity = async ({\n    neuronId,\n    percentageToStake,\n  }: {\n    neuronId: NeuronId;\n    percentageToStake?: number;\n  }): Promise<void> => {\n    assertPercentageNumber(percentageToStake ?? 100);\n\n    await manageNeuron({\n      request: toStakeMaturityRequest({ neuronId, percentageToStake }),\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public spawnNeuron = async ({\n    neuronId,\n    percentageToSpawn,\n    newController,\n    nonce,\n  }: {\n    neuronId: NeuronId;\n    percentageToSpawn?: number;\n    newController?: Principal;\n    nonce?: bigint;\n  }): Promise<bigint> => {\n    if (nonNullish(percentageToSpawn)) {\n      // Migth throw InvalidPercentageError\n      assertPercentageNumber(percentageToSpawn);\n    }\n\n    const request = toSpawnNeuronRequest({\n      neuronId,\n      percentageToSpawn,\n      newController,\n      nonce,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n    let createdNeuronId: NeuronId | undefined;\n\n    if (\n      \"Spawn\" in command &&\n      nonNullish(\n        (createdNeuronId = fromNullable(command.Spawn.created_neuron_id)?.id),\n      )\n    ) {\n      return createdNeuronId;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Spawn error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Add hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public addHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const request = toAddHotkeyRequest({ neuronId, principal });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Remove hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public removeHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const request = toRemoveHotkeyRequest({ neuronId, principal });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Gets the NeuronID of a newly created neuron.\n   */\n  public claimOrRefreshNeuronFromAccount = async ({\n    memo,\n    controller,\n  }: {\n    memo: bigint;\n    controller?: Principal;\n  }): Promise<NeuronId | undefined> => {\n    const rawRequest = toClaimOrRefreshRequest({\n      memo,\n      controller,\n    });\n    const rawResponse = await this.certifiedService.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  /**\n   * Refreshes neuron and returns neuronId when successful\n   * Uses query call only.\n   *\n   * @throws {@link UnrecognizedTypeError}\n   */\n  public claimOrRefreshNeuron = async (\n    request: ClaimOrRefreshNeuronRequest,\n  ): Promise<NeuronId | undefined> => {\n    const rawRequest = fromClaimOrRefreshNeuronRequest(request);\n    const rawResponse = await this.service.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  private buildNeuronStakeSubAccount = (\n    nonce: Uint8Array,\n    principal: Principal,\n  ): SubAccount => {\n    return SubAccount.fromBytes(\n      this.getNeuronStakeSubAccountBytes(nonce, principal),\n    ) as SubAccount;\n  };\n\n  private getNeuronStakeSubAccountBytes = (\n    nonce: Uint8Array,\n    principal: Principal,\n  ): Uint8Array => {\n    const padding = asciiStringToByteArray(\"neuron-stake\");\n    const shaObj = sha256.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        0x0c,\n        ...padding,\n        ...principal.toUint8Array(),\n        ...nonce,\n      ]),\n    );\n    return shaObj.digest();\n  };\n\n  private getGovernanceService(certified: boolean): GovernanceService {\n    return certified ? this.certifiedService : this.service;\n  }\n\n  /**\n   * Return the data of the neuron provided as id.\n   */\n  public getNeuron = async ({\n    certified = true,\n    neuronId,\n  }: {\n    certified: boolean;\n    neuronId: NeuronId;\n  }): Promise<NeuronInfo | undefined> => {\n    // The governance canister exposes two functions \"get_neuron_info\" and \"get_full_neuron\" that could probably be used to fetch the neuron details too.\n    // However historically this function has been resolved with a single call \"list_neurons\".\n\n    const [neuron]: NeuronInfo[] = await this.listNeurons({\n      certified,\n      neuronIds: [neuronId],\n    });\n\n    return neuron;\n  };\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], []),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        [],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], []),\n    'get_metrics' : IDL.Func([], [Result_3], []),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        [],\n      ),\n    'get_network_economics_parameters' : IDL.Func([], [NetworkEconomics], []),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], []),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], []),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        [],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        [],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], []),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], []),\n    'get_proposal_info' : IDL.Func([IDL.Nat64], [IDL.Opt(ProposalInfo)], []),\n    'get_restore_aging_summary' : IDL.Func([], [RestoreAgingSummary], []),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], []),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        [],\n      ),\n    'list_node_providers' : IDL.Func([], [ListNodeProvidersResponse], []),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        [],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], ['query']),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        ['query'],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], ['query']),\n    'get_metrics' : IDL.Func([], [Result_3], ['query']),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        ['query'],\n      ),\n    'get_network_economics_parameters' : IDL.Func(\n        [],\n        [NetworkEconomics],\n        ['query'],\n      ),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], ['query']),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        ['query'],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        ['query'],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], ['query']),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], ['query']),\n    'get_proposal_info' : IDL.Func(\n        [IDL.Nat64],\n        [IDL.Opt(ProposalInfo)],\n        ['query'],\n      ),\n    'get_restore_aging_summary' : IDL.Func(\n        [],\n        [RestoreAgingSummary],\n        ['query'],\n      ),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], ['query']),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], ['query']),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        ['query'],\n      ),\n    'list_node_providers' : IDL.Func(\n        [],\n        [ListNodeProvidersResponse],\n        ['query'],\n      ),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        ['query'],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "// This file was created manually by taking governance.certified.idl.js and\n// removing everything that isn't needed for `list_neurons` and then removing\n// all fields except `neuron_ids` and `include_neurons_readable_by_caller` from\n// `ListNeurons`.\n// The Ledger hardware wallet app verion 2.4.9 doesn't support the newer fields,\n// even when they are optional and not set, so we use this service for\n// compatibility with the hardware wallet.\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const ListNeurons = IDL.Record({\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  return IDL.Service({\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n  });\n};\n", "import type {\n  AccountIdentifier as AccountIdentifierClass,\n  AccountIdentifierHex,\n} from \"@dfinity/ledger-icp\";\nimport { accountIdentifierToBytes } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport {\n  arrayBufferToUint8Array,\n  isNullish,\n  nonNullish,\n  toNullable,\n} from \"@dfinity/utils\";\nimport type {\n  Amount,\n  ListProposalInfo,\n  AccountIdentifier as RawAccountIdentifier,\n  ProposalActionRequest as RawAction,\n  By as RawBy,\n  CanisterSettings as RawCanisterSettings,\n  Change as RawChange,\n  ManageNeuronCommandRequest as RawCommand,\n  Countries as RawCountries,\n  CreateServiceNervousSystem as RawCreateServiceNervousSystem,\n  Decimal as RawDecimal,\n  DeveloperDistribution as RawDeveloperDistribution,\n  Duration as RawDuration,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  InstallCodeRequest as RawInstallCode,\n  LedgerParameters as RawLedgerParameters,\n  ListNeurons as RawListNeurons,\n  ManageNeuronRequest as RawManageNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NeuronsFundEconomics as RawNeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients as RawNeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Percentage as RawPercentage,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport type { NeuronVisibility, Vote } from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type { E8s, NeuronId, Option } from \"../../types/common\";\nimport type {\n  By,\n  CanisterSettings,\n  Change,\n  ClaimOrRefreshNeuronRequest,\n  Countries,\n  CreateServiceNervousSystem,\n  Decimal,\n  DeveloperDistribution,\n  DisburseToNeuronRequest,\n  Duration,\n  FollowRequest,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  InstallCodeRequest,\n  LedgerParameters,\n  ListProposalsRequest,\n  MakeProposalRequest,\n  ManageNeuronCommandRequest,\n  ManageNeuronRequest,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider,\n  Operation,\n  Percentage,\n  ProposalActionRequest,\n  ProposalId,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\n\nconst fromProposalId = (proposalId: ProposalId): RawNeuronId => ({\n  id: proposalId,\n});\n\nconst fromNeuronId = (neuronId: NeuronId): RawNeuronId => ({\n  id: neuronId,\n});\n\nconst fromNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: NeuronIdOrSubaccount,\n): RawNeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: { id: neuronIdOrSubaccount.NeuronId } };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return { Subaccount: Uint8Array.from(neuronIdOrSubaccount.Subaccount) };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst fromPercentage = (percentage: Percentage): RawPercentage =>\n  percentage.basisPoints !== undefined\n    ? { basis_points: [percentage.basisPoints] }\n    : { basis_points: [] };\n\nconst fromDuration = (duration: Duration): RawDuration =>\n  duration.seconds !== undefined\n    ? { seconds: [duration.seconds] }\n    : { seconds: [] };\n\nconst fromGlobalTimeOfDay = (time: GlobalTimeOfDay): RawGlobalTimeOfDay =>\n  time.secondsAfterUtcMidnight !== undefined\n    ? { seconds_after_utc_midnight: [time.secondsAfterUtcMidnight] }\n    : { seconds_after_utc_midnight: [] };\n\nconst fromCountries = (countries: Countries): RawCountries => ({\n  iso_codes: countries.isoCodes,\n});\n\nconst fromTokens = (tokens: Tokens): RawTokens =>\n  tokens.e8s !== undefined ? { e8s: [tokens.e8s] } : { e8s: [] };\n\nconst fromImage = (image: Image): RawImage =>\n  image.base64Encoding !== undefined\n    ? { base64_encoding: [image.base64Encoding] }\n    : { base64_encoding: [] };\n\nconst fromVotingRewardParameters = (\n  votingRewardParameters: VotingRewardParameters,\n): RawVotingRewardParameters => ({\n  reward_rate_transition_duration:\n    votingRewardParameters.rewardRateTransitionDuration !== undefined\n      ? [fromDuration(votingRewardParameters.rewardRateTransitionDuration)]\n      : [],\n  initial_reward_rate:\n    votingRewardParameters.initialRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.initialRewardRate)]\n      : [],\n  final_reward_rate:\n    votingRewardParameters.finalRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.finalRewardRate)]\n      : [],\n});\n\nconst fromLedgerParameters = (\n  ledgerParameters: LedgerParameters,\n): RawLedgerParameters => ({\n  transaction_fee:\n    ledgerParameters.transactionFee !== undefined\n      ? [fromTokens(ledgerParameters.transactionFee)]\n      : [],\n  token_symbol:\n    ledgerParameters.tokenSymbol !== undefined\n      ? [ledgerParameters.tokenSymbol]\n      : [],\n  token_logo:\n    ledgerParameters.tokenLogo !== undefined\n      ? [fromImage(ledgerParameters.tokenLogo)]\n      : [],\n  token_name:\n    ledgerParameters.tokenName !== undefined\n      ? [ledgerParameters.tokenName]\n      : [],\n});\n\nconst fromSwapParameters = (\n  swapParameters: SwapParameters,\n): RawSwapParameters => ({\n  minimum_participants:\n    swapParameters.minimumParticipants !== undefined\n      ? [swapParameters.minimumParticipants]\n      : [],\n  duration:\n    swapParameters.duration !== undefined\n      ? [fromDuration(swapParameters.duration)]\n      : [],\n  neuron_basket_construction_parameters:\n    swapParameters.neuronBasketConstructionParameters !== undefined\n      ? [\n          fromNeuronBasketConstructionParameters(\n            swapParameters.neuronBasketConstructionParameters,\n          ),\n        ]\n      : [],\n  confirmation_text:\n    swapParameters.confirmationText !== undefined\n      ? [swapParameters.confirmationText]\n      : [],\n  maximum_participant_icp:\n    swapParameters.maximumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.maximumParticipantIcp)]\n      : [],\n  neurons_fund_investment_icp:\n    swapParameters.neuronsFundInvestmentIcp !== undefined\n      ? [fromTokens(swapParameters.neuronsFundInvestmentIcp)]\n      : [],\n  minimum_icp:\n    swapParameters.minimumIcp !== undefined\n      ? [fromTokens(swapParameters.minimumIcp)]\n      : [],\n  minimum_participant_icp:\n    swapParameters.minimumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.minimumParticipantIcp)]\n      : [],\n  start_time:\n    swapParameters.startTime !== undefined\n      ? [fromGlobalTimeOfDay(swapParameters.startTime)]\n      : [],\n  maximum_icp:\n    swapParameters.maximumIcp !== undefined\n      ? [fromTokens(swapParameters.maximumIcp)]\n      : [],\n  restricted_countries:\n    swapParameters.restrictedCountries !== undefined\n      ? [fromCountries(swapParameters.restrictedCountries)]\n      : [],\n  maximum_direct_participation_icp:\n    swapParameters.maxDirectParticipationIcp !== undefined\n      ? [fromTokens(swapParameters.maxDirectParticipationIcp)]\n      : [],\n  minimum_direct_participation_icp:\n    swapParameters.minDirectParticipationIcp !== undefined\n      ? [fromTokens(swapParameters.minDirectParticipationIcp)]\n      : [],\n  neurons_fund_participation: toNullable(\n    swapParameters.neuronsFundParticipation,\n  ),\n});\n\nconst fromNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters: NeuronBasketConstructionParameters,\n): RawNeuronBasketConstructionParameters => ({\n  dissolve_delay_interval:\n    neuronBasketConstructionParameters.dissolveDelayInterval !== undefined\n      ? [fromDuration(neuronBasketConstructionParameters.dissolveDelayInterval)]\n      : [],\n  count:\n    neuronBasketConstructionParameters.count !== undefined\n      ? [neuronBasketConstructionParameters.count]\n      : [],\n});\n\nconst fromGovernanceParameters = (\n  governanceParameters: GovernanceParameters,\n): RawGovernanceParameters => ({\n  neuron_maximum_dissolve_delay_bonus:\n    governanceParameters.neuronMaximumDissolveDelayBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumDissolveDelayBonus)]\n      : [],\n  neuron_maximum_age_for_age_bonus:\n    governanceParameters.neuronMaximumAgeForAgeBonus !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumAgeForAgeBonus)]\n      : [],\n  neuron_maximum_dissolve_delay:\n    governanceParameters.neuronMaximumDissolveDelay !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumDissolveDelay)]\n      : [],\n  neuron_minimum_dissolve_delay_to_vote:\n    governanceParameters.neuronMinimumDissolveDelayToVote !== undefined\n      ? [fromDuration(governanceParameters.neuronMinimumDissolveDelayToVote)]\n      : [],\n  neuron_maximum_age_bonus:\n    governanceParameters.neuronMaximumAgeBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumAgeBonus)]\n      : [],\n  neuron_minimum_stake:\n    governanceParameters.neuronMinimumStake !== undefined\n      ? [fromTokens(governanceParameters.neuronMinimumStake)]\n      : [],\n  proposal_wait_for_quiet_deadline_increase:\n    governanceParameters.proposalWaitForQuietDeadlineIncrease !== undefined\n      ? [\n          fromDuration(\n            governanceParameters.proposalWaitForQuietDeadlineIncrease,\n          ),\n        ]\n      : [],\n  proposal_initial_voting_period:\n    governanceParameters.proposalInitialVotingPeriod !== undefined\n      ? [fromDuration(governanceParameters.proposalInitialVotingPeriod)]\n      : [],\n  proposal_rejection_fee:\n    governanceParameters.proposalRejectionFee !== undefined\n      ? [fromTokens(governanceParameters.proposalRejectionFee)]\n      : [],\n  voting_reward_parameters:\n    governanceParameters.votingRewardParameters !== undefined\n      ? [\n          fromVotingRewardParameters(\n            governanceParameters.votingRewardParameters,\n          ),\n        ]\n      : [],\n});\n\nconst fromSwapDistribution = (\n  swapDistribution: SwapDistribution,\n): RawSwapDistribution => ({\n  total:\n    swapDistribution.total !== undefined\n      ? [fromTokens(swapDistribution.total)]\n      : [],\n});\n\nconst fromInitialTokenDistribution = (\n  initialTokenDistribution: InitialTokenDistribution,\n): RawInitialTokenDistribution => ({\n  treasury_distribution:\n    initialTokenDistribution.treasuryDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.treasuryDistribution)]\n      : [],\n  developer_distribution:\n    initialTokenDistribution.developerDistribution !== undefined\n      ? [\n          fromDeveloperDistribution(\n            initialTokenDistribution.developerDistribution,\n          ),\n        ]\n      : [],\n  swap_distribution:\n    initialTokenDistribution.swapDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.swapDistribution)]\n      : [],\n});\n\nconst fromNeuronDistribution = (\n  neuronDistribution: NeuronDistribution,\n): RawNeuronDistribution => ({\n  controller:\n    neuronDistribution.controller !== undefined\n      ? [Principal.fromText(neuronDistribution.controller)]\n      : [],\n  dissolve_delay:\n    neuronDistribution.dissolveDelay !== undefined\n      ? [fromDuration(neuronDistribution.dissolveDelay)]\n      : [],\n  memo: neuronDistribution.memo !== undefined ? [neuronDistribution.memo] : [],\n  vesting_period:\n    neuronDistribution.vestingPeriod !== undefined\n      ? [fromDuration(neuronDistribution.vestingPeriod)]\n      : [],\n  stake:\n    neuronDistribution.stake !== undefined\n      ? [fromTokens(neuronDistribution.stake)]\n      : [],\n});\n\nconst fromDeveloperDistribution = (\n  developerDistribution: DeveloperDistribution,\n): RawDeveloperDistribution => ({\n  developer_neurons: developerDistribution.developerNeurons.map(\n    fromNeuronDistribution,\n  ),\n});\n\nconst fromCreateServiceNervousSystem = (\n  createServiceNervousSystem: CreateServiceNervousSystem,\n): RawCreateServiceNervousSystem => ({\n  url:\n    createServiceNervousSystem.url !== undefined\n      ? [createServiceNervousSystem.url]\n      : [],\n  governance_parameters:\n    createServiceNervousSystem.governanceParameters !== undefined\n      ? [\n          fromGovernanceParameters(\n            createServiceNervousSystem.governanceParameters,\n          ),\n        ]\n      : [],\n  fallback_controller_principal_ids:\n    createServiceNervousSystem.fallbackControllerPrincipalIds.map((id) =>\n      Principal.fromText(id),\n    ),\n  logo:\n    createServiceNervousSystem.logo !== undefined\n      ? [fromImage(createServiceNervousSystem.logo)]\n      : [],\n  name:\n    createServiceNervousSystem.name !== undefined\n      ? [createServiceNervousSystem.name]\n      : [],\n  ledger_parameters:\n    createServiceNervousSystem.ledgerParameters !== undefined\n      ? [fromLedgerParameters(createServiceNervousSystem.ledgerParameters)]\n      : [],\n  description:\n    createServiceNervousSystem.description !== undefined\n      ? [createServiceNervousSystem.description]\n      : [],\n  dapp_canisters: createServiceNervousSystem.dappCanisters.map(\n    (principalId) => ({\n      id: [Principal.fromText(principalId)],\n    }),\n  ),\n  swap_parameters:\n    createServiceNervousSystem.swapParameters !== undefined\n      ? [fromSwapParameters(createServiceNervousSystem.swapParameters)]\n      : [],\n  initial_token_distribution:\n    createServiceNervousSystem.initialTokenDistribution !== undefined\n      ? [\n          fromInitialTokenDistribution(\n            createServiceNervousSystem.initialTokenDistribution,\n          ),\n        ]\n      : [],\n});\n\nconst fromInstallCode = (installCode: InstallCodeRequest): RawInstallCode => {\n  if (installCode.wasmModule === undefined) {\n    throw new Error(\"wasmModule not found\");\n  }\n\n  return {\n    arg: toNullable(\n      arrayBufferToUint8Array(installCode.arg ?? new ArrayBuffer(0)),\n    ),\n    wasm_module: toNullable(arrayBufferToUint8Array(installCode.wasmModule)),\n    skip_stopping_before_installing: toNullable(\n      installCode.skipStoppingBeforeInstalling,\n    ),\n    canister_id: toNullable(\n      nonNullish(installCode.canisterId)\n        ? Principal.fromText(installCode.canisterId)\n        : undefined,\n    ),\n    install_mode: toNullable(installCode.installMode as number),\n  };\n};\n\nconst fromCanisterSettings = (\n  canisterSettings: Option<CanisterSettings>,\n): [RawCanisterSettings] | [] => {\n  return canisterSettings === undefined\n    ? []\n    : [\n        {\n          freezing_threshold: toNullable(canisterSettings.freezingThreshold),\n          controllers: canisterSettings.controllers\n            ? [\n                {\n                  controllers: canisterSettings.controllers.map((controller) =>\n                    Principal.fromText(controller),\n                  ),\n                },\n              ]\n            : [],\n          log_visibility: toNullable(canisterSettings.logVisibility as number),\n          wasm_memory_limit: toNullable(canisterSettings.wasmMemoryLimit),\n          compute_allocation: toNullable(canisterSettings.computeAllocation),\n          memory_allocation: toNullable(canisterSettings.memoryAllocation),\n        },\n      ];\n};\n\nconst fromAction = (action: ProposalActionRequest): RawAction => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    if (executeNnsFunction.payloadBytes === undefined) {\n      throw new Error(\"payloadBytes not found\");\n    }\n\n    return {\n      ExecuteNnsFunction: {\n        nns_function: executeNnsFunction.nnsFunctionId,\n        payload: arrayBufferToUint8Array(executeNnsFunction.payloadBytes),\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: fromManageNeuron(manageNeuron),\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveGenesisKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveGenesisKyc.principals.map(Principal.fromText),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuron_minimum_stake_e8s: networkEconomics.neuronMinimumStake,\n        max_proposals_to_keep_per_topic:\n          networkEconomics.maxProposalsToKeepPerTopic,\n        neuron_management_fee_per_proposal_e8s:\n          networkEconomics.neuronManagementFeePerProposal,\n        reject_cost_e8s: networkEconomics.rejectCost,\n        transaction_fee_e8s: networkEconomics.transactionFee,\n        neuron_spawn_dissolve_delay_seconds:\n          networkEconomics.neuronSpawnDissolveDelaySeconds,\n        minimum_icp_xdr_rate: networkEconomics.minimumIcpXdrRate,\n        maximum_node_provider_rewards_e8s:\n          networkEconomics.maximumNodeProviderRewards,\n        neurons_fund_economics: fromNeuronsFundEconomics(\n          networkEconomics.neuronsFundEconomics,\n        ),\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        node_provider: rewardNodeProvider.nodeProvider\n          ? [fromNodeProvider(rewardNodeProvider.nodeProvider)]\n          : [],\n        amount_e8s: rewardNodeProvider.amountE8s,\n        reward_mode:\n          rewardNodeProvider.rewardMode != null\n            ? [fromRewardMode(rewardNodeProvider.rewardMode)]\n            : [],\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        use_registry_derived_rewards:\n          rewardNodeProviders.useRegistryDerivedRewards === undefined\n            ? []\n            : [rewardNodeProviders.useRegistryDerivedRewards],\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          node_provider: r.nodeProvider\n            ? [fromNodeProvider(r.nodeProvider)]\n            : [],\n          amount_e8s: r.amountE8s,\n          reward_mode:\n            r.rewardMode != null ? [fromRewardMode(r.rewardMode)] : [],\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change\n          ? [fromChange(addOrRemoveNodeProvider.change)]\n          : [],\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motion_text: motion.motionText,\n      },\n    };\n  }\n\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: {\n        id: [{ id: knownNeuron.id }],\n        known_neuron_data: [\n          {\n            name: knownNeuron.name,\n            description:\n              knownNeuron.description !== undefined\n                ? [knownNeuron.description]\n                : [],\n          },\n        ],\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    return {\n      CreateServiceNervousSystem: fromCreateServiceNervousSystem(\n        action.CreateServiceNervousSystem,\n      ),\n    };\n  }\n\n  if (\"InstallCode\" in action) {\n    return {\n      InstallCode: fromInstallCode(action.InstallCode),\n    };\n  }\n\n  if (\"StopOrStartCanister\" in action) {\n    const stopOrStartCanister = action.StopOrStartCanister;\n    return {\n      StopOrStartCanister: {\n        canister_id: stopOrStartCanister.canisterId\n          ? [Principal.fromText(stopOrStartCanister.canisterId)]\n          : [],\n        action: stopOrStartCanister.action\n          ? [stopOrStartCanister.action as number]\n          : [],\n      },\n    };\n  }\n\n  if (\"UpdateCanisterSettings\" in action) {\n    const updateCanisterSettings = action.UpdateCanisterSettings;\n    return {\n      UpdateCanisterSettings: {\n        canister_id: updateCanisterSettings.canisterId\n          ? [Principal.fromText(updateCanisterSettings.canisterId)]\n          : [],\n        settings: fromCanisterSettings(updateCanisterSettings.settings),\n      },\n    };\n  }\n\n  // If there's a missing action, this line will cause a compiler error.\n  throw new UnsupportedValueError(action);\n};\n\nconst fromCommand = (command: ManageNeuronCommandRequest): RawCommand => {\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount_e8s: split.amount,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(fromNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by ? [fromClaimOrRefreshBy(claimOrRefresh.by)] : [],\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation\n          ? [fromOperation(configure.operation)]\n          : [],\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal\n          ? [fromProposalId(registerVote.proposal)]\n          : [],\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolve_delay_seconds: disburseToNeuron.dissolveDelaySeconds,\n        kyc_verified: disburseToNeuron.kycVerified,\n        amount_e8s: disburseToNeuron.amount,\n        new_controller: disburseToNeuron.newController\n          ? [Principal.fromText(disburseToNeuron.newController)]\n          : [],\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentage_to_merge: mergeMaturity.percentageToMerge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentageToStake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        url: makeProposal.url,\n        title: [],\n        action: makeProposal.action ? [fromAction(makeProposal.action)] : [],\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        to_account: disburse.toAccountId\n          ? [fromAccountIdentifier(disburse.toAccountId)]\n          : [],\n        amount: disburse.amount ? [fromAmount(disburse.amount)] : [],\n      },\n    };\n  }\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        percentage_to_spawn:\n          spawn.percentageToSpawn === undefined\n            ? []\n            : [spawn.percentageToSpawn],\n        new_controller: spawn.newController\n          ? [Principal.fromText(spawn.newController)]\n          : [],\n        nonce: [],\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        source_neuron_id: merge.sourceNeuronId\n          ? [{ id: merge.sourceNeuronId }]\n          : [],\n      },\n    };\n  }\n\n  // If there's a missing command above, this line will cause a compiler error.\n  throw new UnsupportedValueError(command);\n};\n\nconst fromOperation = (operation: Operation): RawOperation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hot_key_to_remove:\n          removeHotKey.hotKeyToRemove != null\n            ? [Principal.fromText(removeHotKey.hotKeyToRemove)]\n            : [],\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        new_hot_key: addHotKey.newHotKey\n          ? [Principal.fromText(addHotKey.newHotKey)]\n          : [],\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds:\n          increaseDissolveDelay.additionalDissolveDelaySeconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds:\n          setDissolveTimestamp.dissolveTimestampSeconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const { requestedSettingForAutoStakeMaturity } =\n      operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity:\n          requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  if (\"SetVisibility\" in operation) {\n    const setVisibility = operation.SetVisibility;\n    return {\n      SetVisibility: {\n        visibility: toNullable(setVisibility.visibility),\n      },\n    };\n  }\n  // If there's a missing operation above, this line will cause a compiler error.\n  throw new UnsupportedValueError(operation);\n};\n\nconst fromChange = (change: Change): RawChange => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: fromNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: fromNodeProvider(change.ToAdd),\n    };\n  }\n  // If there's a missing change above, this line will cause a compiler error.\n  throw new UnsupportedValueError(change);\n};\n\nconst fromNodeProvider = (nodeProvider: NodeProvider): RawNodeProvider => {\n  return {\n    id: nodeProvider.id != null ? [Principal.fromText(nodeProvider.id)] : [],\n    reward_account:\n      nodeProvider.rewardAccount != null\n        ? [fromAccountIdentifier(nodeProvider.rewardAccount)]\n        : [],\n  };\n};\n\nconst fromAmount = (amount: E8s): Amount => ({\n  e8s: amount,\n});\n\nconst fromAccountIdentifier = (\n  accountIdentifier: AccountIdentifierHex,\n): RawAccountIdentifier => ({\n  hash: accountIdentifierToBytes(accountIdentifier),\n});\n\nconst fromNeuronsFundEconomics = (\n  neuronsFundEconomics: Option<NeuronsFundEconomics>,\n): [] | [RawNeuronsFundEconomics] => {\n  if (isNullish(neuronsFundEconomics)) {\n    return [];\n  }\n\n  const {\n    maximumIcpXdrRate,\n    maxTheoreticalNeuronsFundParticipationAmountXdr,\n    neuronsFundMatchedFundingCurveCoefficients,\n    minimumIcpXdrRate,\n  } = neuronsFundEconomics;\n\n  const toRawPercentage = (\n    percentage: Option<Percentage>,\n  ): [] | [RawPercentage] =>\n    isNullish(percentage)\n      ? []\n      : [\n          {\n            basis_points: toNullable(percentage.basisPoints),\n          },\n        ];\n\n  const toRawDecimals = (decimal: Option<Decimal>): [] | [RawDecimal] =>\n    isNullish(decimal)\n      ? []\n      : [\n          {\n            human_readable: toNullable(decimal.humanReadable),\n          },\n        ];\n\n  const toRawNeuronsFundMatchedFundingCurveCoefficients = (\n    neuronsFundMatchedFundingCurveCoefficients: Option<NeuronsFundMatchedFundingCurveCoefficients>,\n  ): [] | [RawNeuronsFundMatchedFundingCurveCoefficients] =>\n    isNullish(neuronsFundMatchedFundingCurveCoefficients)\n      ? []\n      : [\n          {\n            contribution_threshold_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.contributionThresholdXdr,\n            ),\n            full_participation_milestone_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.fullParticipationMilestoneXdr,\n            ),\n            one_third_participation_milestone_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.oneThirdParticipationMilestoneXdr,\n            ),\n          },\n        ];\n\n  return [\n    {\n      maximum_icp_xdr_rate: toRawPercentage(maximumIcpXdrRate),\n      neurons_fund_matched_funding_curve_coefficients:\n        toRawNeuronsFundMatchedFundingCurveCoefficients(\n          neuronsFundMatchedFundingCurveCoefficients,\n        ),\n      minimum_icp_xdr_rate: toRawPercentage(minimumIcpXdrRate),\n      max_theoretical_neurons_fund_participation_amount_xdr: toRawDecimals(\n        maxTheoreticalNeuronsFundParticipationAmountXdr,\n      ),\n    },\n  ];\n};\n\nconst fromRewardMode = (rewardMode: RewardMode): RawRewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolve_delay_seconds: rewardMode.RewardToNeuron.dissolveDelaySeconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        to_account:\n          rewardMode.RewardToAccount.toAccount != null\n            ? [fromAccountIdentifier(rewardMode.RewardToAccount.toAccount)]\n            : [],\n      },\n    };\n  } else {\n    // If there's a missing rewardMode above, this line will cause a compiler error.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst fromClaimOrRefreshBy = (by: By): RawBy => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller\n          ? [by.MemoAndController.controller]\n          : [],\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const fromListNeurons = ({\n  neuronIds,\n  includeEmptyNeurons,\n  includePublicNeurons,\n}: {\n  neuronIds?: NeuronId[];\n  includeEmptyNeurons?: boolean;\n  includePublicNeurons?: boolean;\n}): RawListNeurons => ({\n  neuron_ids: BigUint64Array.from(neuronIds ?? []),\n  include_neurons_readable_by_caller: neuronIds ? false : true,\n  include_empty_neurons_readable_by_caller: toNullable(includeEmptyNeurons),\n  include_public_neurons_in_full_neurons: toNullable(includePublicNeurons),\n});\n\nexport const fromManageNeuron = ({\n  id,\n  command,\n  neuronIdOrSubaccount,\n}: ManageNeuronRequest): RawManageNeuron => ({\n  id: id ? [fromNeuronId(id)] : [],\n  command: command ? [fromCommand(command)] : [],\n  neuron_id_or_subaccount: neuronIdOrSubaccount\n    ? [fromNeuronIdOrSubaccount(neuronIdOrSubaccount)]\n    : [],\n});\n\nexport const fromListProposalsRequest = ({\n  includeRewardStatus,\n  beforeProposal,\n  excludeTopic,\n  includeStatus,\n  limit,\n  includeAllManageNeuronProposals,\n  omitLargeFields,\n}: ListProposalsRequest): ListProposalInfo => {\n  return {\n    include_reward_status: Int32Array.from(includeRewardStatus),\n    before_proposal: beforeProposal ? [fromProposalId(beforeProposal)] : [],\n    limit: limit,\n    exclude_topic: Int32Array.from(excludeTopic),\n    include_all_manage_neuron_proposals:\n      includeAllManageNeuronProposals !== undefined\n        ? [includeAllManageNeuronProposals]\n        : [],\n    include_status: Int32Array.from(includeStatus),\n    omit_large_fields: toNullable(omitLargeFields),\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromAddHotKeyRequest = (request: AddHotKeyRequest): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const hotkey = new PbManageNeuron.AddHotKey();\n  hotkey.setNewHotKey(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setAddHotKey(hotkey);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n*/\n\nexport const fromClaimOrRefreshNeuronRequest = (\n  request: ClaimOrRefreshNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: { by: [{ NeuronIdOrSubaccount: {} }] },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toClaimOrRefreshRequest = ({\n  memo,\n  controller,\n}: {\n  memo: bigint;\n  controller?: Principal;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: {\n      by: [\n        {\n          MemoAndController: {\n            controller: controller == undefined ? [] : [controller],\n            memo,\n          },\n        },\n      ],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromMergeMaturityRequest = (\n  request: MergeMaturityRequest\n): PbManageNeuron => {\n  const mergeMaturity = new PbManageNeuron.MergeMaturity();\n  mergeMaturity.setPercentageToMerge(request.percentageToMerge);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setMergeMaturity(mergeMaturity);\n  return manageNeuron;\n};\n*/\n\n/* Protobuf is not supported yet\nexport const fromRemoveHotKeyRequest = (\n  request: RemoveHotKeyRequest\n): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const command = new PbManageNeuron.RemoveHotKey();\n  command.setHotKeyToRemove(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setRemoveHotKey(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStartDissolvingRequest = (\n  request: StartDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStartDissolving(new PbManageNeuron.StartDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStopDissolvingRequest = (\n  request: StopDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStopDissolving(new PbManageNeuron.StopDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromIncreaseDissolveDelayRequest = (\n  request: IncreaseDissolveDelayRequest\n): PbManageNeuron => {\n  const command = new PbManageNeuron.IncreaseDissolveDelay();\n  command.setAdditionalDissolveDelaySeconds(\n    request.additionalDissolveDelaySeconds\n  );\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setIncreaseDissolveDelay(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromFollowRequest = (request: FollowRequest): PbManageNeuron => {\n  const follow = new PbManageNeuron.Follow();\n  follow.setTopic(request.topic);\n  follow.setFolloweesList(\n    request.followees.map((followee) => {\n      const neuronId = new PbNeuronId();\n      neuronId.setId(followee.toString());\n      return neuronId;\n    })\n  );\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setFollow(follow);\n  return manageNeuron;\n};\n\nexport const fromRegisterVoteRequest = (\n  request: RegisterVoteRequest\n): PbManageNeuron => {\n  const registerVote = new PbManageNeuron.RegisterVote();\n  registerVote.setVote(request.vote);\n  const proposal = new PbProposalId();\n  proposal.setId(request.proposal.toString());\n  registerVote.setProposal(proposal);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setRegisterVote(registerVote);\n  return manageNeuron;\n};\n\nexport const fromSpawnRequest = (request: SpawnRequest): PbManageNeuron => {\n  const spawn = new PbManageNeuron.Spawn();\n\n  if (request.newController) {\n    const newController = new PbPrincipalId();\n    newController.setSerializedId(\n      Principal.fromText(request.newController).toUint8Array().slice(4)\n    );\n    spawn.setNewController(newController);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setSpawn(spawn);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const toSplitRawRequest = ({\n  neuronId,\n  amount,\n}: {\n  neuronId: NeuronId;\n  amount: E8s;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    Split: {\n      amount_e8s: amount,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: neuronId } }],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromDisburseRequest = (request: DisburseRequest): PbManageNeuron => {\n  const disburse = new PbManageNeuron.Disburse();\n\n  if (request.toAccountId) {\n    const toAccountIdentifier = new PbAccountIdentifier();\n    toAccountIdentifier.setHash(\n      Uint8Array.from(Buffer.from(request.toAccountId, \"hex\"))\n    );\n    disburse.setToAccount(toAccountIdentifier);\n  }\n\n  if (request.amount != null) {\n    const amount = new PbManageNeuron.Disburse.Amount();\n    amount.setE8s(request.amount.toString());\n    disburse.setAmount(amount);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setDisburse(disburse);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const fromDisburseToNeuronRequest = (\n  request: DisburseToNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    DisburseToNeuron: {\n      dissolve_delay_seconds: request.dissolveDelaySeconds,\n      kyc_verified: request.kycVerified,\n      amount_e8s: request.amount,\n      new_controller:\n        request.newController != null\n          ? [Principal.fromText(request.newController)]\n          : [],\n      nonce: request.nonce,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const fromMakeProposalRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toRegisterVoteRequest = ({\n  neuronId,\n  vote,\n  proposalId,\n}: {\n  neuronId: NeuronId;\n  vote: Vote;\n  proposalId: ProposalId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      RegisterVote: {\n        vote,\n        proposal: [{ id: proposalId }],\n      },\n    },\n  });\n\nexport const toMakeProposalRawRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toManageNeuronsFollowRequest = ({\n  neuronId,\n  topic,\n  followees,\n}: FollowRequest): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Follow: {\n        topic,\n        followees: followees.map((followeeId) => ({ id: followeeId })),\n      },\n    },\n  });\n\nexport const toDisburseNeuronRequest = ({\n  neuronId,\n  toAccountIdentifier,\n  amount,\n}: {\n  neuronId: NeuronId;\n  toAccountIdentifier?: AccountIdentifierClass;\n  amount?: E8s;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Disburse: {\n        to_account:\n          toAccountIdentifier !== undefined\n            ? [toAccountIdentifier.toAccountIdentifierHash()]\n            : [],\n        amount: amount !== undefined ? [fromAmount(amount)] : [],\n      },\n    },\n  });\n\nexport const toMergeMaturityRequest = ({\n  neuronId,\n  percentageToMerge,\n}: {\n  neuronId: NeuronId;\n  percentageToMerge: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      MergeMaturity: {\n        percentage_to_merge: percentageToMerge,\n      },\n    },\n  });\n\nexport const toStakeMaturityRequest = ({\n  neuronId,\n  percentageToStake,\n}: {\n  neuronId: NeuronId;\n  percentageToStake?: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    },\n  });\n\nexport const toSpawnNeuronRequest = ({\n  neuronId,\n  percentageToSpawn,\n  newController,\n  nonce,\n}: {\n  neuronId: NeuronId;\n  percentageToSpawn?: number;\n  newController?: Principal;\n  nonce?: bigint;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Spawn: {\n        percentage_to_spawn:\n          percentageToSpawn === undefined ? [] : [percentageToSpawn],\n        new_controller: newController === undefined ? [] : [newController],\n        nonce: nonce === undefined ? [] : [nonce],\n      },\n    },\n  });\n\nexport const toAddHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      AddHotKey: {\n        new_hot_key: [principal],\n      },\n    },\n  });\n\nexport const toRemoveHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      RemoveHotKey: {\n        hot_key_to_remove: [principal],\n      },\n    },\n  });\n\nexport const toIncreaseDissolveDelayRequest = ({\n  neuronId,\n  additionalDissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  additionalDissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds: additionalDissolveDelaySeconds,\n      },\n    },\n  });\n\nexport const toSetDissolveDelayRequest = ({\n  neuronId,\n  dissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  dissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds: BigInt(dissolveDelaySeconds),\n      },\n    },\n  });\n\nexport const toJoinCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      JoinCommunityFund: {},\n    },\n  });\n\nexport const toAutoStakeMaturityRequest = ({\n  neuronId,\n  autoStake,\n}: {\n  neuronId: NeuronId;\n  autoStake: boolean;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity: autoStake,\n      },\n    },\n  });\n\nexport const toLeaveCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      LeaveCommunityFund: {},\n    },\n  });\n\nexport const toSetVisibilityRequest = ({\n  neuronId,\n  visibility,\n}: {\n  neuronId: NeuronId;\n  visibility: NeuronVisibility;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      SetVisibility: {\n        visibility: [visibility as number],\n      },\n    },\n  });\n\nexport const toMergeRequest = ({\n  sourceNeuronId,\n  targetNeuronId,\n}: {\n  sourceNeuronId: NeuronId;\n  targetNeuronId: NeuronId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId: targetNeuronId,\n    command: {\n      Merge: { source_neuron_id: [{ id: sourceNeuronId }] },\n    },\n  });\n\nexport const toStartDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StartDissolving: {},\n    },\n  });\n\nexport const toStopDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StopDissolving: {},\n    },\n  });\n\nexport const toCommand = ({\n  neuronId,\n  command,\n}: {\n  neuronId: NeuronId;\n  command: RawCommand;\n}): RawManageNeuron => ({\n  id: [{ id: neuronId }],\n  command: [command],\n  neuron_id_or_subaccount: [],\n});\n\nexport const toConfigureOperation = ({\n  neuronId,\n  operation,\n}: {\n  neuronId: NeuronId;\n  operation: RawOperation;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Configure: {\n        operation: [operation],\n      },\n    },\n  });\n", "import type { GovernanceError as GovernanceErrorDetail } from \"../../candid/governance\";\n\nexport abstract class StakeNeuronError extends Error {}\n\nexport class CouldNotClaimNeuronError extends StakeNeuronError {}\n\nexport class InsufficientAmountError extends StakeNeuronError {\n  constructor(public readonly minimumAmount: bigint) {\n    super();\n  }\n}\n\nexport class UnrecognizedTypeError extends Error {}\nexport class GovernanceError extends Error {\n  constructor(public readonly detail: GovernanceErrorDetail) {\n    super();\n  }\n}\n\n/**\n * An error used to ensure at compile-time that it's never reached.\n */\nexport class UnsupportedValueError extends Error {\n  constructor(value: never) {\n    super(\"Unsupported value: \" + value);\n  }\n}\n", "import type { AccountIdentifierHex } from \"@dfinity/ledger-icp\";\nimport {\n  accountIdentifierFromBytes,\n  principalToAccountIdentifier,\n} from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport {\n  fromDefinedNullable,\n  fromNullable,\n  isNullish,\n  nonNullish,\n  toNullable,\n  uint8ArrayToArrayOfNumber,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport type {\n  Params,\n  AccountIdentifier as RawAccountIdentifier,\n  Action as RawAction,\n  Amount as RawAmount,\n  Ballot as RawBallot,\n  BallotInfo as RawBallotInfo,\n  By as RawBy,\n  Canister as RawCanister,\n  CanisterSettings as RawCanisterSettings,\n  Change as RawChange,\n  Command as RawCommand,\n  Countries as RawCountries,\n  Decimal as RawDecimal,\n  DeveloperDistribution as RawDeveloperDistribution,\n  DissolveState as RawDissolveState,\n  Duration as RawDuration,\n  Followees as RawFollowees,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  KnownNeuron as RawKnownNeuron,\n  LedgerParameters as RawLedgerParameters,\n  ListNeuronsResponse as RawListNeuronsResponse,\n  ListProposalInfoResponse as RawListProposalInfoResponse,\n  Neuron as RawNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NeuronInfo as RawNeuronInfo,\n  NeuronsFundEconomics as RawNeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients as RawNeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Percentage as RawPercentage,\n  Proposal as RawProposal,\n  ProposalInfo as RawProposalInfo,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tally as RawTally,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport type {\n  CanisterAction,\n  CanisterInstallMode,\n  LogVisibility,\n  NeuronType,\n  NeuronVisibility,\n} from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type {\n  CanisterIdString,\n  E8s,\n  NeuronId,\n  Option,\n} from \"../../types/common\";\nimport type {\n  Action,\n  Ballot,\n  BallotInfo,\n  By,\n  CanisterSettings,\n  Change,\n  Command,\n  Countries,\n  Decimal,\n  DeveloperDistribution,\n  DissolveState,\n  Duration,\n  Followees,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  KnownNeuron,\n  LedgerParameters,\n  ListProposalsResponse,\n  Neuron,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NeuronInfo,\n  NeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider,\n  Operation,\n  Percentage,\n  Proposal,\n  ProposalInfo,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tally,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\n\nexport const toNeuronInfo = ({\n  neuronId,\n  neuronInfo,\n  rawNeuron,\n  canisterId,\n}: {\n  neuronId: bigint;\n  neuronInfo: RawNeuronInfo;\n  rawNeuron?: RawNeuron;\n  canisterId: Principal;\n}): NeuronInfo => {\n  const fullNeuron = rawNeuron\n    ? toNeuron({ neuron: rawNeuron, canisterId })\n    : undefined;\n  return {\n    neuronId: neuronId,\n    dissolveDelaySeconds: neuronInfo.dissolve_delay_seconds,\n    recentBallots: neuronInfo.recent_ballots.map(toBallotInfo),\n    neuronType: fromNullable(neuronInfo.neuron_type) as NeuronType | undefined,\n    createdTimestampSeconds: neuronInfo.created_timestamp_seconds,\n    state: neuronInfo.state,\n    joinedCommunityFundTimestampSeconds: neuronInfo\n      .joined_community_fund_timestamp_seconds.length\n      ? neuronInfo.joined_community_fund_timestamp_seconds[0]\n      : undefined,\n    retrievedAtTimestampSeconds: neuronInfo.retrieved_at_timestamp_seconds,\n    votingPower: neuronInfo.voting_power,\n    ageSeconds: neuronInfo.age_seconds,\n    visibility: fromNullable(neuronInfo.visibility) as\n      | NeuronVisibility\n      | undefined,\n    fullNeuron: fullNeuron,\n  };\n};\n\nexport const toNeuron = ({\n  neuron,\n  canisterId,\n}: {\n  neuron: RawNeuron;\n  canisterId: Principal;\n}): Neuron => ({\n  id: neuron.id.length ? toNeuronId(neuron.id[0]) : undefined,\n  stakedMaturityE8sEquivalent: fromNullable(\n    neuron.staked_maturity_e8s_equivalent,\n  ),\n  controller: neuron.controller.length\n    ? neuron.controller[0].toString()\n    : undefined,\n  recentBallots: neuron.recent_ballots.map(toBallotInfo),\n  neuronType: fromNullable(neuron.neuron_type) as NeuronType | undefined,\n  kycVerified: neuron.kyc_verified,\n  notForProfit: neuron.not_for_profit,\n  cachedNeuronStake: neuron.cached_neuron_stake_e8s,\n  createdTimestampSeconds: neuron.created_timestamp_seconds,\n  autoStakeMaturity: fromNullable(neuron.auto_stake_maturity),\n  maturityE8sEquivalent: neuron.maturity_e8s_equivalent,\n  agingSinceTimestampSeconds: neuron.aging_since_timestamp_seconds,\n  neuronFees: neuron.neuron_fees_e8s,\n  hotKeys: neuron.hot_keys.map((p) => p.toString()),\n  accountIdentifier: principalToAccountIdentifier(\n    canisterId,\n    Uint8Array.from(neuron.account),\n  ),\n  joinedCommunityFundTimestampSeconds: neuron\n    .joined_community_fund_timestamp_seconds.length\n    ? neuron.joined_community_fund_timestamp_seconds[0]\n    : undefined,\n  dissolveState: neuron.dissolve_state.length\n    ? toDissolveState(neuron.dissolve_state[0])\n    : undefined,\n  spawnAtTimesSeconds: neuron.spawn_at_timestamp_seconds[0],\n  followees: neuron.followees.map(([topic, followees]) =>\n    toFollowees({ topic, followees }),\n  ),\n  visibility: fromNullable(neuron.visibility) as NeuronVisibility | undefined,\n});\n\nexport const toRawNeuron = ({\n  neuron,\n  account,\n}: {\n  neuron: Neuron;\n  account: Uint8Array;\n}): RawNeuron => ({\n  id: nonNullish(neuron.id) ? toNullable({ id: neuron.id }) : [],\n  staked_maturity_e8s_equivalent: toNullable(\n    neuron.stakedMaturityE8sEquivalent,\n  ),\n  controller: nonNullish(neuron.controller)\n    ? toNullable(Principal.from(neuron.controller))\n    : [],\n  recent_ballots: neuron.recentBallots.map((ballot) => ({\n    vote: ballot.vote,\n    proposal_id: nonNullish(ballot.proposalId)\n      ? toNullable({ id: ballot.proposalId })\n      : [],\n  })),\n  kyc_verified: neuron.kycVerified,\n  neuron_type: toNullable(neuron.neuronType),\n  not_for_profit: neuron.notForProfit,\n  cached_neuron_stake_e8s: neuron.cachedNeuronStake,\n  created_timestamp_seconds: neuron.createdTimestampSeconds,\n  auto_stake_maturity: toNullable(neuron.autoStakeMaturity),\n  maturity_e8s_equivalent: neuron.maturityE8sEquivalent,\n  aging_since_timestamp_seconds: neuron.agingSinceTimestampSeconds,\n  neuron_fees_e8s: neuron.neuronFees,\n  hot_keys: neuron.hotKeys.map((p) => Principal.from(p)),\n  account,\n  joined_community_fund_timestamp_seconds: toNullable(\n    neuron.joinedCommunityFundTimestampSeconds,\n  ),\n  dissolve_state: nonNullish(neuron.dissolveState)\n    ? [neuron.dissolveState]\n    : [],\n  spawn_at_timestamp_seconds: toNullable(neuron.spawnAtTimesSeconds),\n  followees: neuron.followees.map((followeesTopic) => [\n    followeesTopic.topic as number,\n    {\n      followees: followeesTopic.followees.map((followee) => ({ id: followee })),\n    },\n  ]),\n  visibility: toNullable(neuron.visibility),\n  // Not kept when converted to Neuron.\n  transfer: [],\n  // Not kept when converted to Neuron.\n  known_neuron_data: [],\n});\n\nconst toBallotInfo = ({ vote, proposal_id }: RawBallotInfo): BallotInfo => ({\n  vote,\n  proposalId: proposal_id.length ? toNeuronId(proposal_id[0]) : undefined,\n});\n\nconst toDissolveState = (dissolveState: RawDissolveState): DissolveState => {\n  if (\"DissolveDelaySeconds\" in dissolveState) {\n    return {\n      DissolveDelaySeconds: dissolveState.DissolveDelaySeconds,\n    };\n  } else {\n    return {\n      WhenDissolvedTimestampSeconds:\n        dissolveState.WhenDissolvedTimestampSeconds,\n    };\n  }\n};\n\nconst toFollowees = ({\n  topic,\n  followees,\n}: {\n  topic: number;\n  followees: RawFollowees;\n}): Followees => ({\n  topic,\n  followees: followees.followees.map(toNeuronId),\n});\n\nconst toNeuronId = ({ id }: RawNeuronId): NeuronId => id;\n\nconst toNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: RawNeuronIdOrSubaccount,\n): NeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: neuronIdOrSubaccount.NeuronId.id };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return {\n      Subaccount: uint8ArrayToArrayOfNumber(\n        Uint8Array.from(neuronIdOrSubaccount.Subaccount),\n      ),\n    };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst toBallot = ({\n  neuronId,\n  ballot,\n}: {\n  neuronId: bigint;\n  ballot: RawBallot;\n}): Ballot => {\n  const { vote, voting_power: votingPower } = ballot;\n\n  return {\n    neuronId,\n    vote,\n    votingPower,\n  };\n};\n\nconst toProposal = ({\n  title,\n  url,\n  action,\n  summary,\n}: RawProposal): Proposal => ({\n  title: title.length ? title[0] : undefined,\n  url,\n  action: action.length ? toAction(action[0]) : undefined,\n  summary,\n});\n\nconst toAction = (action: RawAction): Action => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    return {\n      ExecuteNnsFunction: {\n        nnsFunctionId: executeNnsFunction.nns_function,\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: {\n        id: manageNeuron.id.length ? toNeuronId(manageNeuron.id[0]) : undefined,\n        command: manageNeuron.command.length\n          ? toCommand(manageNeuron.command[0])\n          : undefined,\n        neuronIdOrSubaccount: manageNeuron.neuron_id_or_subaccount.length\n          ? toNeuronIdOrSubaccount(manageNeuron.neuron_id_or_subaccount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveKyc.principals.map((p) => p.toString()),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuronMinimumStake: networkEconomics.neuron_minimum_stake_e8s,\n        maxProposalsToKeepPerTopic:\n          networkEconomics.max_proposals_to_keep_per_topic,\n        neuronManagementFeePerProposal:\n          networkEconomics.neuron_management_fee_per_proposal_e8s,\n        rejectCost: networkEconomics.reject_cost_e8s,\n        transactionFee: networkEconomics.transaction_fee_e8s,\n        neuronSpawnDissolveDelaySeconds:\n          networkEconomics.neuron_spawn_dissolve_delay_seconds,\n        minimumIcpXdrRate: networkEconomics.minimum_icp_xdr_rate,\n        maximumNodeProviderRewards:\n          networkEconomics.maximum_node_provider_rewards_e8s,\n        neuronsFundEconomics: toNeuronsFundEconomics(\n          networkEconomics.neurons_fund_economics,\n        ),\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        nodeProvider: rewardNodeProvider.node_provider.length\n          ? toNodeProvider(rewardNodeProvider.node_provider[0])\n          : undefined,\n        amountE8s: rewardNodeProvider.amount_e8s,\n        rewardMode: rewardNodeProvider.reward_mode.length\n          ? toRewardMode(rewardNodeProvider.reward_mode[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        useRegistryDerivedRewards: rewardNodeProviders\n          .use_registry_derived_rewards.length\n          ? rewardNodeProviders.use_registry_derived_rewards[0]\n          : undefined,\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          nodeProvider: r.node_provider.length\n            ? toNodeProvider(r.node_provider[0])\n            : undefined,\n          amountE8s: r.amount_e8s,\n          rewardMode: r.reward_mode.length\n            ? toRewardMode(r.reward_mode[0])\n            : undefined,\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change.length\n          ? toChange(addOrRemoveNodeProvider.change[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motionText: motion.motion_text,\n      },\n    };\n  }\n  if (\"SetDefaultFollowees\" in action) {\n    const setDefaultFollowees = action.SetDefaultFollowees;\n    return {\n      SetDefaultFollowees: {\n        defaultFollowees: setDefaultFollowees.default_followees.map(\n          ([topic, followees]) => toFollowees({ topic, followees }),\n        ),\n      },\n    };\n  }\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: toKnownNeuron(knownNeuron),\n    };\n  }\n\n  if (\"SetSnsTokenSwapOpenTimeWindow\" in action) {\n    const SetSnsTokenSwapOpenTimeWindow = action.SetSnsTokenSwapOpenTimeWindow;\n    const request = SetSnsTokenSwapOpenTimeWindow.request?.length\n      ? {\n          openTimeWindow: SetSnsTokenSwapOpenTimeWindow.request[0]\n            .open_time_window.length\n            ? {\n                startTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .start_timestamp_seconds,\n                endTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .end_timestamp_seconds,\n              }\n            : undefined,\n        }\n      : undefined;\n\n    const swapCanisterId = SetSnsTokenSwapOpenTimeWindow?.swap_canister_id\n      .length\n      ? SetSnsTokenSwapOpenTimeWindow.swap_canister_id[0].toString()\n      : undefined;\n\n    return {\n      SetSnsTokenSwapOpenTimeWindow: {\n        request,\n        swapCanisterId,\n      },\n    };\n  }\n\n  if (\"OpenSnsTokenSwap\" in action) {\n    const OpenSnsTokenSwap = action.OpenSnsTokenSwap;\n    const params: Params | undefined = fromNullable(OpenSnsTokenSwap.params);\n\n    return {\n      OpenSnsTokenSwap: {\n        communityFundInvestmentE8s: fromNullable(\n          OpenSnsTokenSwap.community_fund_investment_e8s,\n        ),\n        targetSwapCanisterId: fromNullable(\n          OpenSnsTokenSwap.target_swap_canister_id,\n        ),\n        params: params && {\n          minParticipantIcpE8s: params.min_participant_icp_e8s,\n          maxIcpE8s: params.max_icp_e8s,\n          swapDueTimestampSeconds: params.swap_due_timestamp_seconds,\n          minParticipants: params.min_participants,\n          snsTokenE8s: params.sns_token_e8s,\n          maxParticipantIcpE8s: params.max_participant_icp_e8s,\n          minIcpE8s: params.min_icp_e8s,\n          saleDelaySeconds: fromNullable(params.sale_delay_seconds),\n          neuronBasketConstructionParameters: fromNullable(\n            params.neuron_basket_construction_parameters,\n          ),\n          maxDirectParticipationIcpE8s: fromNullable(\n            params.max_direct_participation_icp_e8s,\n          ),\n          minDirectParticipationIcpE8s: fromNullable(\n            params.min_direct_participation_icp_e8s,\n          ),\n        },\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    const createServiceNervousSystem = action.CreateServiceNervousSystem;\n    return {\n      CreateServiceNervousSystem: {\n        url: fromNullable(createServiceNervousSystem.url),\n        governanceParameters: toGovernanceParameters(\n          fromNullable(createServiceNervousSystem.governance_parameters),\n        ),\n        fallbackControllerPrincipalIds:\n          createServiceNervousSystem.fallback_controller_principal_ids.map(\n            (principalId) => principalId.toString(),\n          ),\n        logo: toImage(fromNullable(createServiceNervousSystem.logo)),\n        name: fromNullable(createServiceNervousSystem.name),\n        ledgerParameters: toLedgerParameters(\n          fromNullable(createServiceNervousSystem.ledger_parameters),\n        ),\n        description: fromNullable(createServiceNervousSystem.description),\n        dappCanisters:\n          (createServiceNervousSystem.dapp_canisters.map(\n            toCanisterIdString,\n          ) as CanisterIdString[]) ?? [],\n        swapParameters: toSwapParameters(\n          fromNullable(createServiceNervousSystem.swap_parameters),\n        ),\n        initialTokenDistribution: toInitialTokenDistribution(\n          fromNullable(createServiceNervousSystem.initial_token_distribution),\n        ),\n      },\n    };\n  }\n\n  if (\"InstallCode\" in action) {\n    const installCode = action.InstallCode;\n    return {\n      InstallCode: {\n        skipStoppingBeforeInstalling: fromNullable(\n          installCode.skip_stopping_before_installing,\n        ),\n        canisterId: installCode.canister_id.length\n          ? installCode.canister_id[0].toString()\n          : undefined,\n        installMode: fromNullable(installCode.install_mode) as\n          | CanisterInstallMode\n          | undefined,\n        wasmModuleHash: uint8ArrayToHexString(\n          fromDefinedNullable(installCode.wasm_module_hash),\n        ),\n        argHash: uint8ArrayToHexString(\n          fromDefinedNullable(installCode.arg_hash),\n        ),\n      },\n    };\n  }\n\n  if (\"StopOrStartCanister\" in action) {\n    const stopOrStartCanister = action.StopOrStartCanister;\n    return {\n      StopOrStartCanister: {\n        canisterId: stopOrStartCanister.canister_id.length\n          ? stopOrStartCanister.canister_id[0].toString()\n          : undefined,\n        action: fromNullable(stopOrStartCanister.action) as\n          | CanisterAction\n          | undefined,\n      },\n    };\n  }\n\n  if (\"UpdateCanisterSettings\" in action) {\n    return {\n      UpdateCanisterSettings: {\n        canisterId: action.UpdateCanisterSettings.canister_id.length\n          ? action.UpdateCanisterSettings.canister_id[0].toString()\n          : undefined,\n        settings: toCanisterSettings(\n          fromDefinedNullable(action.UpdateCanisterSettings.settings),\n        ),\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(action);\n};\n\nconst toTally = (tally: RawTally): Tally => {\n  return {\n    no: tally.no,\n    yes: tally.yes,\n    total: tally.total,\n    timestampSeconds: tally.timestamp_seconds,\n  };\n};\n\nconst toCommand = (command: RawCommand): Command => {\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        newController: spawn.new_controller.length\n          ? spawn.new_controller[0].toString()\n          : undefined,\n        percentageToSpawn: spawn.percentage_to_spawn.length\n          ? spawn.percentage_to_spawn[0]\n          : 0,\n      },\n    };\n  }\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount: split.amount_e8s,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(toNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by.length\n          ? toClaimOrRefreshBy(claimOrRefresh.by[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation.length\n          ? toOperation(configure.operation[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal.length\n          ? toNeuronId(registerVote.proposal[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolveDelaySeconds: disburseToNeuron.dissolve_delay_seconds,\n        kycVerified: disburseToNeuron.kyc_verified,\n        amount: disburseToNeuron.amount_e8s,\n        newController: disburseToNeuron.new_controller.length\n          ? disburseToNeuron.new_controller[0].toString()\n          : undefined,\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentageToMerge: mergeMaturity.percentage_to_merge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentage_to_stake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentageToStake: fromNullable(percentage_to_stake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        title: makeProposal.title.length ? makeProposal.title[0] : undefined,\n        url: makeProposal.url,\n        action: makeProposal.action.length\n          ? toAction(makeProposal.action[0])\n          : undefined,\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        toAccountId: disburse.to_account.length\n          ? toAccountIdentifier(disburse.to_account[0])\n          : undefined,\n        amount: disburse.amount.length\n          ? toAmount(disburse.amount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        sourceNeuronId: merge.source_neuron_id.length\n          ? merge.source_neuron_id[0].id\n          : undefined,\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(command);\n};\n\nconst toOperation = (operation: RawOperation): Operation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hotKeyToRemove: removeHotKey.hot_key_to_remove.length\n          ? removeHotKey.hot_key_to_remove[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        newHotKey: addHotKey.new_hot_key.length\n          ? addHotKey.new_hot_key[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additionalDissolveDelaySeconds:\n          increaseDissolveDelay.additional_dissolve_delay_seconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolveTimestampSeconds:\n          setDissolveTimestamp.dissolve_timestamp_seconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const {\n      requested_setting_for_auto_stake_maturity:\n        requestedSettingForAutoStakeMaturity,\n    } = operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  if (\"SetVisibility\" in operation) {\n    const setVisibility = operation.SetVisibility;\n    return {\n      SetVisibility: {\n        visibility: fromNullable(setVisibility.visibility) as\n          | NeuronVisibility\n          | undefined,\n      },\n    };\n  }\n  throw new UnsupportedValueError(operation);\n};\n\nconst toChange = (change: RawChange): Change => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: toNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: toNodeProvider(change.ToAdd),\n    };\n  }\n  throw new UnsupportedValueError(change);\n};\n\nconst toNeuronsFundEconomics = (\n  neuronsFundEconomics: [] | [RawNeuronsFundEconomics],\n): Option<NeuronsFundEconomics> => {\n  const rawNeuronsFundEconomics = fromNullable(neuronsFundEconomics);\n\n  if (isNullish(rawNeuronsFundEconomics)) {\n    return undefined;\n  }\n\n  const {\n    maximum_icp_xdr_rate,\n    neurons_fund_matched_funding_curve_coefficients,\n    max_theoretical_neurons_fund_participation_amount_xdr,\n    minimum_icp_xdr_rate,\n  } = rawNeuronsFundEconomics;\n\n  const toPercentage = (\n    percentage: [] | [RawPercentage],\n  ): Option<Percentage> => {\n    const rawPercentage = fromNullable(percentage);\n\n    if (isNullish(rawPercentage)) {\n      return undefined;\n    }\n\n    const { basis_points } = rawPercentage;\n\n    const rawBasisPoints = fromNullable(basis_points);\n\n    return nonNullish(rawBasisPoints)\n      ? { basisPoints: rawBasisPoints }\n      : undefined;\n  };\n\n  const toDecimal = (decimal: [] | [RawDecimal]): Option<Decimal> => {\n    const rawDecimal = fromNullable(decimal);\n\n    if (isNullish(rawDecimal)) {\n      return undefined;\n    }\n\n    const { human_readable } = rawDecimal;\n\n    const rawHumanReadable = fromNullable(human_readable);\n\n    return nonNullish(rawHumanReadable)\n      ? { humanReadable: rawHumanReadable }\n      : undefined;\n  };\n\n  const toNeuronsFundMatchedFundingCurveCoefficients = (\n    neurons_fund_matched_funding_curve_coefficients:\n      | []\n      | [RawNeuronsFundMatchedFundingCurveCoefficients],\n  ): Option<NeuronsFundMatchedFundingCurveCoefficients> => {\n    const rawNeuronsFundMatchedFundingCurveCoefficients = fromNullable(\n      neurons_fund_matched_funding_curve_coefficients,\n    );\n\n    if (isNullish(rawNeuronsFundMatchedFundingCurveCoefficients)) {\n      return undefined;\n    }\n\n    const {\n      full_participation_milestone_xdr,\n      one_third_participation_milestone_xdr,\n      contribution_threshold_xdr,\n    } = rawNeuronsFundMatchedFundingCurveCoefficients;\n\n    return {\n      fullParticipationMilestoneXdr: toDecimal(\n        full_participation_milestone_xdr,\n      ),\n      oneThirdParticipationMilestoneXdr: toDecimal(\n        one_third_participation_milestone_xdr,\n      ),\n      contributionThresholdXdr: toDecimal(contribution_threshold_xdr),\n    };\n  };\n\n  return {\n    maximumIcpXdrRate: toPercentage(maximum_icp_xdr_rate),\n    neuronsFundMatchedFundingCurveCoefficients:\n      toNeuronsFundMatchedFundingCurveCoefficients(\n        neurons_fund_matched_funding_curve_coefficients,\n      ),\n    maxTheoreticalNeuronsFundParticipationAmountXdr: toDecimal(\n      max_theoretical_neurons_fund_participation_amount_xdr,\n    ),\n    minimumIcpXdrRate: toPercentage(minimum_icp_xdr_rate),\n  };\n};\n\nconst toNodeProvider = (nodeProvider: RawNodeProvider): NodeProvider => {\n  return {\n    id: nodeProvider.id.length ? nodeProvider.id[0].toString() : undefined,\n    rewardAccount: nodeProvider.reward_account.length\n      ? toAccountIdentifier(nodeProvider.reward_account[0])\n      : undefined,\n  };\n};\n\nconst toAmount = (amount: RawAmount): E8s => {\n  return amount.e8s;\n};\n\nconst toAccountIdentifier = (\n  accountIdentifier: RawAccountIdentifier,\n): AccountIdentifierHex =>\n  accountIdentifierFromBytes(new Uint8Array(accountIdentifier.hash));\n\nconst toRewardMode = (rewardMode: RawRewardMode): RewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolveDelaySeconds: rewardMode.RewardToNeuron.dissolve_delay_seconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        toAccount:\n          rewardMode.RewardToAccount.to_account != undefined &&\n          rewardMode.RewardToAccount.to_account.length\n            ? toAccountIdentifier(rewardMode.RewardToAccount.to_account[0])\n            : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst toClaimOrRefreshBy = (by: RawBy): By => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller.length\n          ? by.MemoAndController.controller[0]\n          : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const toProposalInfo = (\n  proposalInfo: RawProposalInfo,\n): ProposalInfo => ({\n  id: proposalInfo.id.length ? toNeuronId(proposalInfo.id[0]) : undefined,\n  ballots: proposalInfo.ballots.map((b) =>\n    toBallot({ neuronId: b[0], ballot: b[1] }),\n  ),\n  rejectCost: proposalInfo.reject_cost_e8s,\n  proposalTimestampSeconds: proposalInfo.proposal_timestamp_seconds,\n  rewardEventRound: proposalInfo.reward_event_round,\n  failedTimestampSeconds: proposalInfo.failed_timestamp_seconds,\n  deadlineTimestampSeconds: fromNullable(\n    proposalInfo.deadline_timestamp_seconds,\n  ),\n  decidedTimestampSeconds: proposalInfo.decided_timestamp_seconds,\n  proposal: proposalInfo.proposal.length\n    ? toProposal(proposalInfo.proposal[0])\n    : undefined,\n  proposer: proposalInfo.proposer.length\n    ? toNeuronId(proposalInfo.proposer[0])\n    : undefined,\n  latestTally: proposalInfo.latest_tally.length\n    ? toTally(proposalInfo.latest_tally[0])\n    : undefined,\n  executedTimestampSeconds: proposalInfo.executed_timestamp_seconds,\n  topic: proposalInfo.topic,\n  status: proposalInfo.status,\n  rewardStatus: proposalInfo.reward_status,\n});\n\nexport const toArrayOfNeuronInfo = ({\n  response: { neuron_infos, full_neurons },\n  canisterId,\n}: {\n  response: RawListNeuronsResponse;\n  canisterId: Principal;\n}): Array<NeuronInfo> =>\n  neuron_infos.map(([id, neuronInfo]) =>\n    toNeuronInfo({\n      neuronId: id,\n      neuronInfo,\n      rawNeuron: full_neurons.find(\n        (neuron) => neuron.id.length && neuron.id[0].id === id,\n      ),\n      canisterId,\n    }),\n  );\n\nexport const toListProposalsResponse = ({\n  proposal_info,\n}: RawListProposalInfoResponse): ListProposalsResponse => ({\n  proposals: proposal_info.map(toProposalInfo),\n});\n\nexport const toKnownNeuron = ({\n  id,\n  known_neuron_data,\n}: RawKnownNeuron): KnownNeuron => {\n  return {\n    id: id[0]?.id ?? BigInt(0),\n    name: known_neuron_data[0]?.name ?? \"\",\n    description: known_neuron_data[0]?.description[0] ?? \"\",\n  };\n};\n\nconst toPercentage = (\n  percentage: RawPercentage | undefined,\n): Percentage | undefined => {\n  return percentage === undefined\n    ? undefined\n    : {\n        basisPoints: fromNullable(percentage.basis_points),\n      };\n};\n\nconst toDuration = (\n  duration: RawDuration | undefined,\n): Duration | undefined => {\n  return duration === undefined\n    ? undefined\n    : {\n        seconds: fromNullable(duration.seconds),\n      };\n};\n\nconst toGlobalTimeOfDay = (\n  time: RawGlobalTimeOfDay | undefined,\n): GlobalTimeOfDay | undefined => {\n  return time === undefined\n    ? undefined\n    : {\n        secondsAfterUtcMidnight: fromNullable(time.seconds_after_utc_midnight),\n      };\n};\n\nconst toCountries = (\n  countries: RawCountries | undefined,\n): Countries | undefined => {\n  return countries === undefined\n    ? undefined\n    : ({\n        isoCodes: countries.iso_codes,\n      } as Countries);\n};\n\nconst toTokens = (tokens: RawTokens | undefined): Tokens | undefined => {\n  return tokens === undefined\n    ? undefined\n    : {\n        e8s: fromNullable(tokens.e8s),\n      };\n};\n\nconst toCanisterIdString = (\n  canister: RawCanister | undefined,\n): CanisterIdString | undefined => {\n  return canister === undefined\n    ? undefined\n    : canister.id.length === 0\n      ? undefined\n      : fromDefinedNullable(canister.id).toString();\n};\n\nconst toImage = (image: RawImage | undefined): Image | undefined => {\n  return image === undefined\n    ? undefined\n    : {\n        base64Encoding: fromNullable(image.base64_encoding),\n      };\n};\n\nconst toLedgerParameters = (\n  ledgerParameters: RawLedgerParameters | undefined,\n): LedgerParameters | undefined => {\n  return ledgerParameters === undefined\n    ? undefined\n    : {\n        transactionFee: toTokens(\n          fromNullable(ledgerParameters.transaction_fee),\n        ),\n        tokenSymbol: fromNullable(ledgerParameters.token_symbol),\n        tokenLogo: toImage(fromNullable(ledgerParameters.token_logo)),\n        tokenName: fromNullable(ledgerParameters.token_name),\n      };\n};\n\nconst toVotingRewardParameters = (\n  votingRewardParameters: RawVotingRewardParameters | undefined,\n): VotingRewardParameters | undefined => {\n  return votingRewardParameters === undefined\n    ? undefined\n    : {\n        rewardRateTransitionDuration: toDuration(\n          fromNullable(votingRewardParameters.reward_rate_transition_duration),\n        ),\n        initialRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.initial_reward_rate),\n        ),\n        finalRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.final_reward_rate),\n        ),\n      };\n};\n\nconst toGovernanceParameters = (\n  governanceParameters: RawGovernanceParameters | undefined,\n): GovernanceParameters | undefined => {\n  return governanceParameters === undefined\n    ? undefined\n    : {\n        neuronMaximumDissolveDelayBonus: toPercentage(\n          fromNullable(\n            governanceParameters.neuron_maximum_dissolve_delay_bonus,\n          ),\n        ),\n        neuronMaximumAgeForAgeBonus: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_age_for_age_bonus),\n        ),\n        neuronMaximumDissolveDelay: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_dissolve_delay),\n        ),\n        neuronMinimumDissolveDelayToVote: toDuration(\n          fromNullable(\n            governanceParameters.neuron_minimum_dissolve_delay_to_vote,\n          ),\n        ),\n        neuronMaximumAgeBonus: toPercentage(\n          fromNullable(governanceParameters.neuron_maximum_age_bonus),\n        ),\n        neuronMinimumStake: toTokens(\n          fromNullable(governanceParameters.neuron_minimum_stake),\n        ),\n        proposalWaitForQuietDeadlineIncrease: toDuration(\n          fromNullable(\n            governanceParameters.proposal_wait_for_quiet_deadline_increase,\n          ),\n        ),\n        proposalInitialVotingPeriod: toDuration(\n          fromNullable(governanceParameters.proposal_initial_voting_period),\n        ),\n        proposalRejectionFee: toTokens(\n          fromNullable(governanceParameters.proposal_rejection_fee),\n        ),\n        votingRewardParameters: toVotingRewardParameters(\n          fromNullable(governanceParameters.voting_reward_parameters),\n        ),\n      };\n};\n\nconst toNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters:\n    | RawNeuronBasketConstructionParameters\n    | undefined,\n): NeuronBasketConstructionParameters | undefined => {\n  return neuronBasketConstructionParameters === undefined\n    ? undefined\n    : {\n        dissolveDelayInterval: toDuration(\n          fromNullable(\n            neuronBasketConstructionParameters.dissolve_delay_interval,\n          ),\n        ),\n        count: fromNullable(neuronBasketConstructionParameters.count),\n      };\n};\n\nconst toSwapParameters = (\n  swapParameters: RawSwapParameters | undefined,\n): SwapParameters | undefined => {\n  return swapParameters === undefined\n    ? undefined\n    : {\n        minimumParticipants: fromNullable(swapParameters.minimum_participants),\n        duration: toDuration(fromNullable(swapParameters.duration)),\n        neuronBasketConstructionParameters:\n          toNeuronBasketConstructionParameters(\n            fromNullable(swapParameters.neuron_basket_construction_parameters),\n          ),\n        confirmationText: fromNullable(swapParameters.confirmation_text),\n        maximumParticipantIcp: toTokens(\n          fromNullable(swapParameters.maximum_participant_icp),\n        ),\n        neuronsFundInvestmentIcp: toTokens(\n          fromNullable(swapParameters.neurons_fund_investment_icp),\n        ),\n        minimumIcp: toTokens(fromNullable(swapParameters.minimum_icp)),\n        minimumParticipantIcp: toTokens(\n          fromNullable(swapParameters.minimum_participant_icp),\n        ),\n        startTime: toGlobalTimeOfDay(fromNullable(swapParameters.start_time)),\n        maximumIcp: toTokens(fromNullable(swapParameters.maximum_icp)),\n        restrictedCountries: toCountries(\n          fromNullable(swapParameters.restricted_countries),\n        ),\n        maxDirectParticipationIcp: toTokens(\n          fromNullable(swapParameters.maximum_direct_participation_icp),\n        ),\n        minDirectParticipationIcp: toTokens(\n          fromNullable(swapParameters.minimum_direct_participation_icp),\n        ),\n        neuronsFundParticipation: fromNullable(\n          swapParameters.neurons_fund_participation,\n        ),\n      };\n};\n\nconst toSwapDistribution = (\n  swapDistribution: RawSwapDistribution | undefined,\n): SwapDistribution | undefined => {\n  return swapDistribution === undefined\n    ? undefined\n    : {\n        total: toTokens(fromNullable(swapDistribution.total)),\n      };\n};\n\nconst toNeuronDistribution = (\n  neuronDistribution: RawNeuronDistribution | undefined,\n): NeuronDistribution | undefined => {\n  return neuronDistribution === undefined\n    ? undefined\n    : {\n        controller:\n          neuronDistribution.controller.length === 0\n            ? undefined\n            : neuronDistribution.controller[0].toString(),\n        dissolveDelay: toDuration(\n          fromNullable(neuronDistribution.dissolve_delay),\n        ),\n        memo: fromNullable(neuronDistribution.memo),\n        vestingPeriod: toDuration(\n          fromNullable(neuronDistribution.vesting_period),\n        ),\n        stake: toTokens(fromNullable(neuronDistribution.stake)),\n      };\n};\n\nconst toDeveloperDistribution = (\n  developerDistribution: RawDeveloperDistribution | undefined,\n): DeveloperDistribution | undefined => {\n  return developerDistribution === undefined\n    ? undefined\n    : {\n        developerNeurons: developerDistribution.developer_neurons.map(\n          toNeuronDistribution,\n        ) as Array<NeuronDistribution>,\n      };\n};\n\nconst toInitialTokenDistribution = (\n  initialTokenDistribution: RawInitialTokenDistribution | undefined,\n): InitialTokenDistribution | undefined => {\n  return initialTokenDistribution === undefined\n    ? undefined\n    : {\n        treasuryDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.treasury_distribution),\n        ),\n        developerDistribution: toDeveloperDistribution(\n          fromNullable(initialTokenDistribution.developer_distribution),\n        ),\n        swapDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.swap_distribution),\n        ),\n      };\n};\n\nconst toCanisterSettings = (\n  canisterSettings: RawCanisterSettings | undefined,\n): CanisterSettings | undefined => {\n  return canisterSettings === undefined\n    ? undefined\n    : {\n        freezingThreshold: fromNullable(canisterSettings.freezing_threshold),\n        controllers: fromNullable(\n          canisterSettings.controllers,\n        )?.controllers.map((controller) => controller.toString()),\n        logVisibility: fromNullable(canisterSettings.log_visibility) as\n          | LogVisibility\n          | undefined,\n        wasmMemoryLimit: fromNullable(canisterSettings.wasm_memory_limit),\n        computeAllocation: fromNullable(canisterSettings.compute_allocation),\n        memoryAllocation: fromNullable(canisterSettings.memory_allocation),\n      };\n};\n", "import type {\n  Command_1,\n  _SERVICE as GovernanceService,\n  ManageNeuronRequest,\n  ManageNeuronResponse,\n} from \"../../../candid/governance\";\nimport { GovernanceError } from \"../../errors/governance.errors\";\n\n/**\n * Checks a Manage Neuron Response for error and returns successful response data.\n *\n * @throws {@link GovernanceError}\n */\nexport const getSuccessfulCommandFromResponse = (\n  response: ManageNeuronResponse,\n): Command_1 => {\n  const { command } = response;\n  const data = command[0];\n  if (!data) {\n    throw new GovernanceError({\n      error_message: \"Error updating neuron\",\n      error_type: 0,\n    });\n  }\n\n  if (\"Error\" in data) {\n    throw new GovernanceError(data.Error);\n  }\n  return data;\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const manageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuronRequest;\n  service: GovernanceService;\n}): Promise<Command_1> => {\n  const response = await service.manage_neuron(request);\n  // We use it only to assert that there are no errors\n  return getSuccessfulCommandFromResponse(response);\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const simulateManageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuronRequest;\n  service: GovernanceService;\n}): Promise<Command_1> => {\n  const response = await service.simulate_manage_neuron(request);\n  return getSuccessfulCommandFromResponse(response);\n};\n", "// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n"],
  "mappings": "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",
  "names": ["require_base64_js", "__commonJSMin", "exports", "byteLength", "toByteArray", "fromByteArray", "lookup", "revLookup", "Arr", "code", "i", "len", "getLens", "b64", "validLen", "placeHoldersLen", "lens", "_byteLength", "tmp", "arr", "curByte", "tripletToBase64", "num", "encodeChunk", "uint8", "start", "end", "output", "extraBytes", "parts", "maxChunkLength", "len2", "require_ieee754", "__commonJSMin", "exports", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "i", "d", "s", "value", "c", "rt", "require_buffer", "__commonJSMin", "exports", "base64", "ieee754", "customInspectSymbol", "Buffer", "SlowBuffer", "K_MAX_LENGTH", "typedArraySupport", "arr", "proto", "createBuffer", "length", "buf", "arg", "encodingOrOffset", "allocUnsafe", "from", "value", "fromString", "fromArrayView", "isInstance", "fromArrayBuffer", "valueOf", "b", "fromObject", "assertSize", "size", "alloc", "fill", "encoding", "checked", "string", "byteLength", "actual", "fromArrayLike", "array", "i", "arrayView", "copy", "byteOffset", "obj", "len", "numberIsNaN", "a", "x", "y", "list", "buffer", "pos", "mustMatch", "loweredCase", "utf8ToBytes", "base64ToBytes", "slowToString", "start", "end", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "n", "m", "str", "max", "target", "thisStart", "thisEnd", "thisCopy", "targetCopy", "bidirectionalIndexOf", "val", "dir", "arrayIndexOf", "indexSize", "arrLength", "valLength", "read", "foundIndex", "found", "j", "hexWrite", "offset", "remaining", "strLen", "parsed", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "base64Write", "ucs2Write", "utf16leToBytes", "res", "firstByte", "codePoint", "bytesPerSequence", "secondByte", "thirdByte", "fourthByte", "tempCodePoint", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "codePoints", "ret", "out", "hexSliceLookupTable", "bytes", "newBuf", "checkOffset", "ext", "noAssert", "mul", "defineBigIntMethod", "validateNumber", "first", "last", "boundsError", "lo", "hi", "checkInt", "min", "maxBytes", "wrtBigUInt64LE", "checkIntBI", "wrtBigUInt64BE", "limit", "sub", "checkIEEE754", "writeFloat", "littleEndian", "writeDouble", "targetStart", "code", "errors", "E", "sym", "getMessage", "Base", "name", "range", "input", "msg", "received", "addNumericalSeparator", "checkBounds", "type", "INVALID_BASE64_RE", "base64clean", "units", "leadSurrogate", "byteArray", "c", "src", "dst", "alphabet", "table", "i16", "fn", "BufferBigIntNotDefined", "require_safe_buffer", "__commonJSMin", "exports", "module", "buffer", "Buffer", "copyProps", "src", "dst", "key", "SafeBuffer", "arg", "encodingOrOffset", "length", "size", "fill", "encoding", "buf", "require_browser", "__commonJSMin", "exports", "module", "MAX_BYTES", "MAX_UINT32", "oldBrowser", "Buffer", "crypto", "randomBytes", "size", "cb", "bytes", "generated", "Actor", "AccountIdentifier", "SubAccount", "checkAccountId", "arrayOfNumberToUint8Array", "asciiStringToByteArray", "assertPercentageNumber", "createServices", "fromNullable", "isNullish", "nonNullish", "uint8ArrayToBigInt", "isBytes", "a", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "bytes", "min", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "bytes", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "toBytes", "tmp", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "exists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "output", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "sha256", "wrapConstructor", "SHA256", "import_randombytes", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "idlFactory", "IDL", "NeuronId", "Followees", "KnownNeuronData", "NeuronStakeTransfer", "BallotInfo", "DissolveState", "Neuron", "NeuronInfo", "ListNeurons", "ListNeuronsResponse", "accountIdentifierToBytes", "Principal", "arrayBufferToUint8Array", "isNullish", "nonNullish", "toNullable", "StakeNeuronError", "CouldNotClaimNeuronError", "InsufficientAmountError", "minimumAmount", "UnrecognizedTypeError", "GovernanceError", "detail", "UnsupportedValueError", "value", "fromProposalId", "proposalId", "fromNeuronId", "neuronId", "fromNeuronIdOrSubaccount", "neuronIdOrSubaccount", "UnsupportedValueError", "fromPercentage", "percentage", "fromDuration", "duration", "fromGlobalTimeOfDay", "time", "fromCountries", "countries", "fromTokens", "tokens", "fromImage", "image", "fromVotingRewardParameters", "votingRewardParameters", "fromLedgerParameters", "ledgerParameters", "fromSwapParameters", "swapParameters", "fromNeuronBasketConstructionParameters", "toNullable", "neuronBasketConstructionParameters", "fromGovernanceParameters", "governanceParameters", "fromSwapDistribution", "swapDistribution", "fromInitialTokenDistribution", "initialTokenDistribution", "fromDeveloperDistribution", "fromNeuronDistribution", "neuronDistribution", "Principal", "developerDistribution", "fromCreateServiceNervousSystem", "createServiceNervousSystem", "id", "principalId", "fromInstallCode", "installCode", "arrayBufferToUint8Array", "nonNullish", "fromCanisterSettings", "canisterSettings", "controller", "fromAction", "action", "executeNnsFunction", "manageNeuron", "fromManageNeuron", "networkEconomics", "fromNeuronsFundEconomics", "rewardNodeProvider", "fromNodeProvider", "fromRewardMode", "rewardNodeProviders", "r", "addOrRemoveNodeProvider", "fromChange", "knownNeuron", "stopOrStartCanister", "updateCanisterSettings", "fromCommand", "command", "follow", "claimOrRefresh", "fromClaimOrRefreshBy", "configure", "fromOperation", "registerVote", "disburseToNeuron", "percentageToStake", "makeProposal", "disburse", "fromAccountIdentifier", "fromAmount", "spawn", "merge", "operation", "removeHotKey", "addHotKey", "requestedSettingForAutoStakeMaturity", "setVisibility", "change", "nodeProvider", "amount", "accountIdentifier", "accountIdentifierToBytes", "neuronsFundEconomics", "isNullish", "maximumIcpXdrRate", "maxTheoreticalNeuronsFundParticipationAmountXdr", "neuronsFundMatchedFundingCurveCoefficients", "minimumIcpXdrRate", "toRawPercentage", "toRawDecimals", "decimal", "toRawNeuronsFundMatchedFundingCurveCoefficients", "rewardMode", "by", "fromListNeurons", "neuronIds", "includeEmptyNeurons", "includePublicNeurons", "fromListProposalsRequest", "includeRewardStatus", "beforeProposal", "excludeTopic", "includeStatus", "limit", "includeAllManageNeuronProposals", "omitLargeFields", "fromClaimOrRefreshNeuronRequest", "request", "toClaimOrRefreshRequest", "memo", "rawCommand", "toSplitRawRequest", "toRegisterVoteRequest", "neuronId", "vote", "proposalId", "toCommand", "toMakeProposalRawRequest", "request", "rawCommand", "fromAction", "toManageNeuronsFollowRequest", "topic", "followees", "followeeId", "toDisburseNeuronRequest", "toAccountIdentifier", "amount", "fromAmount", "toMergeMaturityRequest", "percentageToMerge", "toStakeMaturityRequest", "percentageToStake", "toNullable", "toSpawnNeuronRequest", "percentageToSpawn", "newController", "nonce", "toAddHotkeyRequest", "principal", "toConfigureOperation", "toRemoveHotkeyRequest", "toIncreaseDissolveDelayRequest", "additionalDissolveDelaySeconds", "toSetDissolveDelayRequest", "dissolveDelaySeconds", "toJoinCommunityFundRequest", "toAutoStakeMaturityRequest", "autoStake", "toLeaveCommunityFundRequest", "toSetVisibilityRequest", "visibility", "toMergeRequest", "sourceNeuronId", "targetNeuronId", "toStartDissolvingRequest", "toStopDissolvingRequest", "command", "operation", "accountIdentifierFromBytes", "principalToAccountIdentifier", "Principal", "fromDefinedNullable", "fromNullable", "isNullish", "nonNullish", "toNullable", "uint8ArrayToArrayOfNumber", "uint8ArrayToHexString", "toNeuronInfo", "neuronId", "neuronInfo", "rawNeuron", "canisterId", "fullNeuron", "toNeuron", "toBallotInfo", "fromNullable", "neuron", "toNeuronId", "p", "principalToAccountIdentifier", "toDissolveState", "topic", "followees", "toFollowees", "toRawNeuron", "account", "nonNullish", "toNullable", "Principal", "ballot", "followeesTopic", "followee", "vote", "proposal_id", "dissolveState", "id", "toNeuronIdOrSubaccount", "neuronIdOrSubaccount", "uint8ArrayToArrayOfNumber", "UnsupportedValueError", "toBallot", "votingPower", "toProposal", "title", "url", "action", "summary", "toAction", "manageNeuron", "toCommand", "networkEconomics", "toNeuronsFundEconomics", "rewardNodeProvider", "toNodeProvider", "toRewardMode", "rewardNodeProviders", "r", "addOrRemoveNodeProvider", "toChange", "knownNeuron", "toKnownNeuron", "SetSnsTokenSwapOpenTimeWindow", "request", "swapCanisterId", "OpenSnsTokenSwap", "params", "createServiceNervousSystem", "toGovernanceParameters", "principalId", "toImage", "toLedgerParameters", "toCanisterIdString", "toSwapParameters", "toInitialTokenDistribution", "installCode", "uint8ArrayToHexString", "fromDefinedNullable", "stopOrStartCanister", "toCanisterSettings", "toTally", "tally", "command", "spawn", "follow", "claimOrRefresh", "toClaimOrRefreshBy", "configure", "toOperation", "registerVote", "disburseToNeuron", "percentage_to_stake", "makeProposal", "disburse", "toAccountIdentifier", "toAmount", "merge", "operation", "removeHotKey", "addHotKey", "requestedSettingForAutoStakeMaturity", "setVisibility", "change", "neuronsFundEconomics", "rawNeuronsFundEconomics", "isNullish", "maximum_icp_xdr_rate", "neurons_fund_matched_funding_curve_coefficients", "max_theoretical_neurons_fund_participation_amount_xdr", "minimum_icp_xdr_rate", "toPercentage", "percentage", "rawPercentage", "basis_points", "rawBasisPoints", "toDecimal", "decimal", "rawDecimal", "human_readable", "rawHumanReadable", "toNeuronsFundMatchedFundingCurveCoefficients", "rawNeuronsFundMatchedFundingCurveCoefficients", "full_participation_milestone_xdr", "one_third_participation_milestone_xdr", "contribution_threshold_xdr", "nodeProvider", "amount", "accountIdentifier", "accountIdentifierFromBytes", "rewardMode", "by", "toProposalInfo", "proposalInfo", "b", "toArrayOfNeuronInfo", "neuron_infos", "full_neurons", "toListProposalsResponse", "proposal_info", "known_neuron_data", "toDuration", "duration", "toGlobalTimeOfDay", "time", "toCountries", "countries", "toTokens", "tokens", "canister", "image", "ledgerParameters", "toVotingRewardParameters", "votingRewardParameters", "governanceParameters", "toNeuronBasketConstructionParameters", "neuronBasketConstructionParameters", "swapParameters", "toSwapDistribution", "swapDistribution", "toNeuronDistribution", "neuronDistribution", "toDeveloperDistribution", "developerDistribution", "initialTokenDistribution", "canisterSettings", "controller", "getSuccessfulCommandFromResponse", "response", "command", "data", "GovernanceError", "manageNeuron", "request", "service", "simulateManageNeuron", "E8S_PER_TOKEN", "GovernanceCanister", "_GovernanceCanister", "canisterId", "service", "certifiedService", "oldListNeuronsCertifiedService", "agent", "certified", "neuronIds", "includeEmptyNeurons", "includePublicNeurons", "rawRequest", "fromListNeurons", "raw_response", "isNullish", "toArrayOfNeuronInfo", "n", "fromNullable", "request", "fromListProposalsRequest", "rawResponse", "toListProposalsResponse", "stake", "principal", "fromSubAccount", "ledgerCanister", "createdAt", "fee", "E8S_PER_TOKEN", "InsufficientAmountError", "nonceBytes", "randomBytes", "nonce", "uint8ArrayToBigInt", "toSubAccount", "accountIdentifier", "AccountIdentifier", "neuronId", "CouldNotClaimNeuronError", "additionalDissolveDelaySeconds", "toIncreaseDissolveDelayRequest", "manageNeuron", "dissolveDelaySeconds", "toSetDissolveDelayRequest", "toStartDissolvingRequest", "toStopDissolvingRequest", "toJoinCommunityFundRequest", "params", "toAutoStakeMaturityRequest", "toLeaveCommunityFundRequest", "visibility", "toSetVisibilityRequest", "checkAccountId", "account", "response", "GovernanceError", "toMergeRequest", "command", "simulateManageNeuron", "merge", "neuronInfo", "rawNeuron", "nonNullish", "toNeuronInfo", "UnrecognizedTypeError", "amount", "toSplitRawRequest", "getSuccessfulCommandFromResponse", "neuron", "proposalId", "proposalInfo", "toProposalInfo", "toMakeProposalRawRequest", "cmd", "vote", "toRegisterVoteRequest", "followRequest", "toManageNeuronsFollowRequest", "toAccountId", "toAccountIdentifier", "toDisburseNeuronRequest", "percentageToMerge", "assertPercentageNumber", "toMergeMaturityRequest", "percentageToStake", "toStakeMaturityRequest", "percentageToSpawn", "newController", "toSpawnNeuronRequest", "createdNeuronId", "toAddHotkeyRequest", "toRemoveHotkeyRequest", "memo", "controller", "toClaimOrRefreshRequest", "fromClaimOrRefreshNeuronRequest", "SubAccount", "padding", "asciiStringToByteArray", "shaObj", "sha256", "arrayOfNumberToUint8Array", "options", "MAINNET_GOVERNANCE_CANISTER_ID", "createServices", "idlFactory", "Actor"]
}
