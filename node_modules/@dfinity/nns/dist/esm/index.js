import{a as so}from"./chunk-YKKQOXDQ.js";import{a as ue,b as Vo,c as So,d as xo,e as ho,f as Po,g as To,h as me,i as Oe,j as io}from"./chunk-BL4SIQCO.js";import{a as _o}from"./chunk-3GMJYFVP.js";import{c as le}from"./chunk-KCY3PAEP.js";var co=(a=>(a[a.Unspecified=0]="Unspecified",a[a.Locked=1]="Locked",a[a.Dissolving=2]="Dissolving",a[a.Dissolved=3]="Dissolved",a[a.Spawning=4]="Spawning",a))(co||{}),po=(n=>(n[n.Unspecified=0]="Unspecified",n[n.NeuronManagement=1]="NeuronManagement",n[n.ExchangeRate=2]="ExchangeRate",n[n.NetworkEconomics=3]="NetworkEconomics",n[n.Governance=4]="Governance",n[n.NodeAdmin=5]="NodeAdmin",n[n.ParticipantManagement=6]="ParticipantManagement",n[n.SubnetManagement=7]="SubnetManagement",n[n.NetworkCanisterManagement=8]="NetworkCanisterManagement",n[n.Kyc=9]="Kyc",n[n.NodeProviderRewards=10]="NodeProviderRewards",n[n.SnsDecentralizationSale=11]="SnsDecentralizationSale",n[n.IcOsVersionDeployment=12]="IcOsVersionDeployment",n[n.IcOsVersionElection=13]="IcOsVersionElection",n[n.SnsAndCommunityFund=14]="SnsAndCommunityFund",n[n.ApiBoundaryNodeManagement=15]="ApiBoundaryNodeManagement",n[n.SubnetRental=16]="SubnetRental",n[n.ProtocolCanisterManagement=17]="ProtocolCanisterManagement",n[n.ServiceNervousSystemManagement=18]="ServiceNervousSystemManagement",n))(po||{}),lo=(a=>(a[a.Unknown=0]="Unknown",a[a.AcceptVotes=1]="AcceptVotes",a[a.ReadyToSettle=2]="ReadyToSettle",a[a.Settled=3]="Settled",a[a.Ineligible=4]="Ineligible",a))(lo||{}),uo=(i=>(i[i.Unknown=0]="Unknown",i[i.Open=1]="Open",i[i.Rejected=2]="Rejected",i[i.Accepted=3]="Accepted",i[i.Executed=4]="Executed",i[i.Failed=5]="Failed",i))(uo||{}),Ne=(o=>(o[o.Unspecified=0]="Unspecified",o[o.Yes=1]="Yes",o[o.No=2]="No",o))(Ne||{}),mo=(t=>(t[t.Unspecified=0]="Unspecified",t[t.CreateSubnet=1]="CreateSubnet",t[t.AddNodeToSubnet=2]="AddNodeToSubnet",t[t.NnsCanisterInstall=3]="NnsCanisterInstall",t[t.NnsCanisterUpgrade=4]="NnsCanisterUpgrade",t[t.BlessReplicaVersion=5]="BlessReplicaVersion",t[t.RecoverSubnet=6]="RecoverSubnet",t[t.UpdateConfigOfSubnet=7]="UpdateConfigOfSubnet",t[t.AssignNoid=8]="AssignNoid",t[t.NnsRootUpgrade=9]="NnsRootUpgrade",t[t.IcpXdrConversionRate=10]="IcpXdrConversionRate",t[t.DeployGuestosToAllSubnetNodes=11]="DeployGuestosToAllSubnetNodes",t[t.ClearProvisionalWhitelist=12]="ClearProvisionalWhitelist",t[t.RemoveNodesFromSubnet=13]="RemoveNodesFromSubnet",t[t.SetAuthorizedSubnetworks=14]="SetAuthorizedSubnetworks",t[t.SetFirewallConfig=15]="SetFirewallConfig",t[t.UpdateNodeOperatorConfig=16]="UpdateNodeOperatorConfig",t[t.StopOrStartNnsCanister=17]="StopOrStartNnsCanister",t[t.RemoveNodes=18]="RemoveNodes",t[t.UninstallCode=19]="UninstallCode",t[t.UpdateNodeRewardsTable=20]="UpdateNodeRewardsTable",t[t.AddOrRemoveDataCenters=21]="AddOrRemoveDataCenters",t[t.UpdateUnassignedNodesConfig=22]="UpdateUnassignedNodesConfig",t[t.RemoveNodeOperators=23]="RemoveNodeOperators",t[t.RerouteCanisterRanges=24]="RerouteCanisterRanges",t[t.AddFirewallRules=25]="AddFirewallRules",t[t.RemoveFirewallRules=26]="RemoveFirewallRules",t[t.UpdateFirewallRules=27]="UpdateFirewallRules",t[t.PrepareCanisterMigration=28]="PrepareCanisterMigration",t[t.CompleteCanisterMigration=29]="CompleteCanisterMigration",t[t.AddSnsWasm=30]="AddSnsWasm",t[t.ChangeSubnetMembership=31]="ChangeSubnetMembership",t[t.UpdateSubnetType=32]="UpdateSubnetType",t[t.ChangeSubnetTypeAssignment=33]="ChangeSubnetTypeAssignment",t[t.UpdateSnsWasmSnsSubnetIds=34]="UpdateSnsWasmSnsSubnetIds",t[t.UpdateAllowedPrincipals=35]="UpdateAllowedPrincipals",t[t.RetireReplicaVersion=36]="RetireReplicaVersion",t[t.InsertSnsWasmUpgradePathEntries=37]="InsertSnsWasmUpgradePathEntries",t[t.ReviseElectedGuestosVersions=38]="ReviseElectedGuestosVersions",t[t.BitcoinSetConfig=39]="BitcoinSetConfig",t[t.UpdateElectedHostosVersions=40]="UpdateElectedHostosVersions",t[t.UpdateNodesHostosVersion=41]="UpdateNodesHostosVersion",t[t.HardResetNnsRootToVersion=42]="HardResetNnsRootToVersion",t[t.AddApiBoundaryNodes=43]="AddApiBoundaryNodes",t[t.RemoveApiBoundaryNodes=44]="RemoveApiBoundaryNodes",t[t.UpdateApiBoundaryNodeDomain=45]="UpdateApiBoundaryNodeDomain",t[t.UpdateApiBoundaryNodesVersion=46]="UpdateApiBoundaryNodesVersion",t[t.DeployGuestosToSomeApiBoundaryNodes=47]="DeployGuestosToSomeApiBoundaryNodes",t[t.DeployGuestosToAllUnassignedNodes=48]="DeployGuestosToAllUnassignedNodes",t[t.UpdateSshReadOnlyAccessForAllUnassignedNodes=49]="UpdateSshReadOnlyAccessForAllUnassignedNodes",t[t.ReviseElectedHostosVersions=50]="ReviseElectedHostosVersions",t[t.DeployHostosToSomeNodes=51]="DeployHostosToSomeNodes",t[t.SubnetRentalRequest=52]="SubnetRentalRequest",t))(mo||{}),Oo=(o=>(o[o.Unspecified=0]="Unspecified",o[o.Seed=1]="Seed",o[o.Ect=2]="Ect",o))(Oo||{}),No=(o=>(o[o.Unspecified=0]="Unspecified",o[o.Controllers=1]="Controllers",o[o.Public=2]="Public",o))(No||{}),Ro=(o=>(o[o.Unspecified=0]="Unspecified",o[o.Stop=1]="Stop",o[o.Start=2]="Start",o))(Ro||{}),vo=(o=>(o[o.Unspecified=0]="Unspecified",o[o.Private=1]="Private",o[o.Public=2]="Public",o))(vo||{}),fo=(_=>(_[_.Unspecified=0]="Unspecified",_[_.Install=1]="Install",_[_.Reinstall=2]="Reinstall",_[_.Upgrade=3]="Upgrade",_))(fo||{});import{principalToAccountIdentifier as go}from"@dfinity/ledger-icp";import{assertNonNullish as yo,createServices as wo}from"@dfinity/utils";var Re=({IDL:e})=>{let r=e.Rec(),s=e.Rec(),o=e.Record({id:e.Nat64}),_=e.Record({followees:e.Vec(o)}),a=e.Record({name:e.Text,description:e.Opt(e.Text)}),i=e.Record({id:e.Opt(o),known_neuron_data:e.Opt(a)}),v=e.Record({percentage_to_spawn:e.Opt(e.Nat32),new_controller:e.Opt(e.Principal),nonce:e.Opt(e.Nat64)}),R=e.Record({amount_e8s:e.Nat64}),K=e.Record({topic:e.Int32,followees:e.Vec(o)}),W=e.Record({controller:e.Opt(e.Principal),memo:e.Nat64}),fe=e.Variant({NeuronIdOrSubaccount:e.Record({}),MemoAndController:W,Memo:e.Nat64}),h=e.Record({by:e.Opt(fe)}),ge=e.Record({hot_key_to_remove:e.Opt(e.Principal)}),ye=e.Record({new_hot_key:e.Opt(e.Principal)}),we=e.Record({requested_setting_for_auto_stake_maturity:e.Bool}),ke=e.Record({additional_dissolve_delay_seconds:e.Nat32}),be=e.Record({visibility:e.Opt(e.Int32)}),Ve=e.Record({dissolve_timestamp_seconds:e.Nat64}),n=e.Variant({RemoveHotKey:ge,AddHotKey:ye,ChangeAutoStakeMaturity:we,StopDissolving:e.Record({}),StartDissolving:e.Record({}),IncreaseDissolveDelay:ke,SetVisibility:be,JoinCommunityFund:e.Record({}),LeaveCommunityFund:e.Record({}),SetDissolveTimestamp:Ve}),P=e.Record({operation:e.Opt(n)}),l=e.Record({id:e.Nat64}),H=e.Record({vote:e.Int32,proposal:e.Opt(l)}),T=e.Record({source_neuron_id:e.Opt(o)}),C=e.Record({dissolve_delay_seconds:e.Nat64,kyc_verified:e.Bool,amount_e8s:e.Nat64,new_controller:e.Opt(e.Principal),nonce:e.Nat64}),j=e.Record({percentage_to_stake:e.Opt(e.Nat32)}),M=e.Record({percentage_to_merge:e.Nat32}),f=e.Record({hash:e.Vec(e.Nat8)}),Se=e.Record({e8s:e.Nat64}),A=e.Record({to_account:e.Opt(f),amount:e.Opt(Se)}),xe=e.Variant({Spawn:v,Split:R,Follow:K,ClaimOrRefresh:h,Configure:P,RegisterVote:H,Merge:T,DisburseToNeuron:C,MakeProposal:s,StakeMaturity:j,MergeMaturity:M,Disburse:A}),g=e.Variant({Subaccount:e.Vec(e.Nat8),NeuronId:o}),he=e.Record({id:e.Opt(o),command:e.Opt(xe),neuron_id_or_subaccount:e.Opt(g)}),Pe=e.Record({controllers:e.Vec(e.Principal)}),Te=e.Record({freezing_threshold:e.Opt(e.Nat64),controllers:e.Opt(Pe),log_visibility:e.Opt(e.Int32),wasm_memory_limit:e.Opt(e.Nat64),memory_allocation:e.Opt(e.Nat64),compute_allocation:e.Opt(e.Nat64)}),z=e.Record({canister_id:e.Opt(e.Principal),settings:e.Opt(Te)}),Ce=e.Record({skip_stopping_before_installing:e.Opt(e.Bool),wasm_module_hash:e.Opt(e.Vec(e.Nat8)),canister_id:e.Opt(e.Principal),arg_hash:e.Opt(e.Vec(e.Nat8)),install_mode:e.Opt(e.Int32)}),F=e.Record({action:e.Opt(e.Int32),canister_id:e.Opt(e.Principal)}),O=e.Record({basis_points:e.Opt(e.Nat64)}),d=e.Record({seconds:e.Opt(e.Nat64)}),p=e.Record({e8s:e.Opt(e.Nat64)}),Me=e.Record({reward_rate_transition_duration:e.Opt(d),initial_reward_rate:e.Opt(O),final_reward_rate:e.Opt(O)}),Ae=e.Record({neuron_maximum_dissolve_delay_bonus:e.Opt(O),neuron_maximum_age_for_age_bonus:e.Opt(d),neuron_maximum_dissolve_delay:e.Opt(d),neuron_minimum_dissolve_delay_to_vote:e.Opt(d),neuron_maximum_age_bonus:e.Opt(O),neuron_minimum_stake:e.Opt(p),proposal_wait_for_quiet_deadline_increase:e.Opt(d),proposal_initial_voting_period:e.Opt(d),proposal_rejection_fee:e.Opt(p),voting_reward_parameters:e.Opt(Me)}),X=e.Record({base64_encoding:e.Opt(e.Text)}),qe=e.Record({transaction_fee:e.Opt(p),token_symbol:e.Opt(e.Text),token_logo:e.Opt(X),token_name:e.Opt(e.Text)}),Be=e.Record({id:e.Opt(e.Principal)}),Ee=e.Record({dissolve_delay_interval:e.Opt(d),count:e.Opt(e.Nat64)}),Ue=e.Record({seconds_after_utc_midnight:e.Opt(e.Nat64)}),Ge=e.Record({iso_codes:e.Vec(e.Text)}),Ke=e.Record({minimum_participants:e.Opt(e.Nat64),neurons_fund_participation:e.Opt(e.Bool),duration:e.Opt(d),neuron_basket_construction_parameters:e.Opt(Ee),confirmation_text:e.Opt(e.Text),maximum_participant_icp:e.Opt(p),minimum_icp:e.Opt(p),minimum_direct_participation_icp:e.Opt(p),minimum_participant_icp:e.Opt(p),start_time:e.Opt(Ue),maximum_direct_participation_icp:e.Opt(p),maximum_icp:e.Opt(p),neurons_fund_investment_icp:e.Opt(p),restricted_countries:e.Opt(Ge)}),J=e.Record({total:e.Opt(p)}),We=e.Record({controller:e.Opt(e.Principal),dissolve_delay:e.Opt(d),memo:e.Opt(e.Nat64),vesting_period:e.Opt(d),stake:e.Opt(p)}),He=e.Record({developer_neurons:e.Vec(We)}),t=e.Record({treasury_distribution:e.Opt(J),developer_distribution:e.Opt(He),swap_distribution:e.Opt(J)}),Q=e.Record({url:e.Opt(e.Text),governance_parameters:e.Opt(Ae),fallback_controller_principal_ids:e.Vec(e.Principal),logo:e.Opt(X),name:e.Opt(e.Text),ledger_parameters:e.Opt(qe),description:e.Opt(e.Text),dapp_canisters:e.Vec(Be),swap_parameters:e.Opt(Ke),initial_token_distribution:e.Opt(t)}),Y=e.Record({nns_function:e.Int32,payload:e.Vec(e.Nat8)}),u=e.Record({id:e.Opt(e.Principal),reward_account:e.Opt(f)}),je=e.Record({dissolve_delay_seconds:e.Nat64}),ze=e.Record({to_account:e.Opt(f)}),Fe=e.Variant({RewardToNeuron:je,RewardToAccount:ze}),y=e.Record({node_provider:e.Opt(u),reward_mode:e.Opt(Fe),amount_e8s:e.Nat64}),Xe=e.Record({dissolve_delay_interval_seconds:e.Nat64,count:e.Nat64}),Je=e.Record({min_participant_icp_e8s:e.Nat64,neuron_basket_construction_parameters:e.Opt(Xe),max_icp_e8s:e.Nat64,swap_due_timestamp_seconds:e.Nat64,min_participants:e.Nat32,sns_token_e8s:e.Nat64,sale_delay_seconds:e.Opt(e.Nat64),max_participant_icp_e8s:e.Nat64,min_direct_participation_icp_e8s:e.Opt(e.Nat64),min_icp_e8s:e.Nat64,max_direct_participation_icp_e8s:e.Opt(e.Nat64)}),Qe=e.Record({community_fund_investment_e8s:e.Opt(e.Nat64),target_swap_canister_id:e.Opt(e.Principal),params:e.Opt(Je)}),Ye=e.Record({start_timestamp_seconds:e.Nat64,end_timestamp_seconds:e.Nat64}),Ze=e.Record({open_time_window:e.Opt(Ye)}),$e=e.Record({request:e.Opt(Ze),swap_canister_id:e.Opt(e.Principal)}),Ie=e.Record({default_followees:e.Vec(e.Tuple(e.Int32,_))}),Z=e.Record({use_registry_derived_rewards:e.Opt(e.Bool),rewards:e.Vec(y)}),w=e.Record({human_readable:e.Opt(e.Text)}),De=e.Record({contribution_threshold_xdr:e.Opt(w),one_third_participation_milestone_xdr:e.Opt(w),full_participation_milestone_xdr:e.Opt(w)}),Le=e.Record({maximum_icp_xdr_rate:e.Opt(O),neurons_fund_matched_funding_curve_coefficients:e.Opt(De),max_theoretical_neurons_fund_participation_amount_xdr:e.Opt(w),minimum_icp_xdr_rate:e.Opt(O)}),k=e.Record({neuron_minimum_stake_e8s:e.Nat64,max_proposals_to_keep_per_topic:e.Nat32,neuron_management_fee_per_proposal_e8s:e.Nat64,reject_cost_e8s:e.Nat64,transaction_fee_e8s:e.Nat64,neuron_spawn_dissolve_delay_seconds:e.Nat64,minimum_icp_xdr_rate:e.Nat64,maximum_node_provider_rewards_e8s:e.Nat64,neurons_fund_economics:e.Opt(Le)}),q=e.Record({principals:e.Vec(e.Principal)}),et=e.Variant({ToRemove:u,ToAdd:u}),$=e.Record({change:e.Opt(et)}),I=e.Record({motion_text:e.Text}),tt=e.Variant({RegisterKnownNeuron:i,ManageNeuron:he,UpdateCanisterSettings:z,InstallCode:Ce,StopOrStartCanister:F,CreateServiceNervousSystem:Q,ExecuteNnsFunction:Y,RewardNodeProvider:y,OpenSnsTokenSwap:Qe,SetSnsTokenSwapOpenTimeWindow:$e,SetDefaultFollowees:Ie,RewardNodeProviders:Z,ManageNetworkEconomics:k,ApproveGenesisKyc:q,AddOrRemoveNodeProvider:$,Motion:I});s.fill(e.Record({url:e.Text,title:e.Opt(e.Text),action:e.Opt(tt),summary:e.Text}));let ot=e.Record({proposal:e.Opt(s),caller:e.Opt(e.Principal),proposer_id:e.Opt(o)}),D=e.Record({xdr_permyriad_per_icp:e.Opt(e.Nat64),timestamp_seconds:e.Opt(e.Nat64)}),b=e.Record({minimum_xdr_permyriad_per_icp:e.Opt(e.Nat64),registry_version:e.Opt(e.Nat64),node_providers:e.Vec(u),timestamp:e.Nat64,rewards:e.Vec(y),xdr_conversion_rate:e.Opt(D),maximum_node_provider_rewards_e8s:e.Opt(e.Nat64)}),L=e.Record({total_maturity_e8s_equivalent:e.Opt(e.Nat64),maturity_e8s_equivalent_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),voting_power_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),total_staked_e8s:e.Opt(e.Nat64),count:e.Opt(e.Nat64),total_staked_maturity_e8s_equivalent:e.Opt(e.Nat64),staked_maturity_e8s_equivalent_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),staked_e8s_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),total_voting_power:e.Opt(e.Nat64),count_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64))}),ee=e.Record({total_maturity_e8s_equivalent:e.Nat64,not_dissolving_neurons_e8s_buckets:e.Vec(e.Tuple(e.Nat64,e.Float64)),dissolving_neurons_staked_maturity_e8s_equivalent_sum:e.Nat64,garbage_collectable_neurons_count:e.Nat64,dissolving_neurons_staked_maturity_e8s_equivalent_buckets:e.Vec(e.Tuple(e.Nat64,e.Float64)),neurons_with_invalid_stake_count:e.Nat64,not_dissolving_neurons_count_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),ect_neuron_count:e.Nat64,total_supply_icp:e.Nat64,neurons_with_less_than_6_months_dissolve_delay_count:e.Nat64,dissolved_neurons_count:e.Nat64,community_fund_total_maturity_e8s_equivalent:e.Nat64,total_staked_e8s_seed:e.Nat64,total_staked_maturity_e8s_equivalent_ect:e.Nat64,total_staked_e8s:e.Nat64,not_dissolving_neurons_count:e.Nat64,total_locked_e8s:e.Nat64,neurons_fund_total_active_neurons:e.Nat64,total_voting_power_non_self_authenticating_controller:e.Opt(e.Nat64),total_staked_maturity_e8s_equivalent:e.Nat64,not_dissolving_neurons_e8s_buckets_ect:e.Vec(e.Tuple(e.Nat64,e.Float64)),total_staked_e8s_ect:e.Nat64,not_dissolving_neurons_staked_maturity_e8s_equivalent_sum:e.Nat64,dissolved_neurons_e8s:e.Nat64,total_staked_e8s_non_self_authenticating_controller:e.Opt(e.Nat64),dissolving_neurons_e8s_buckets_seed:e.Vec(e.Tuple(e.Nat64,e.Float64)),neurons_with_less_than_6_months_dissolve_delay_e8s:e.Nat64,not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets:e.Vec(e.Tuple(e.Nat64,e.Float64)),dissolving_neurons_count_buckets:e.Vec(e.Tuple(e.Nat64,e.Nat64)),dissolving_neurons_e8s_buckets_ect:e.Vec(e.Tuple(e.Nat64,e.Float64)),non_self_authenticating_controller_neuron_subset_metrics:e.Opt(L),dissolving_neurons_count:e.Nat64,dissolving_neurons_e8s_buckets:e.Vec(e.Tuple(e.Nat64,e.Float64)),total_staked_maturity_e8s_equivalent_seed:e.Nat64,community_fund_total_staked_e8s:e.Nat64,not_dissolving_neurons_e8s_buckets_seed:e.Vec(e.Tuple(e.Nat64,e.Float64)),public_neuron_subset_metrics:e.Opt(L),timestamp_seconds:e.Nat64,seed_neuron_count:e.Nat64}),nt=e.Record({count:e.Opt(e.Nat64),previous_total_stake_e8s:e.Opt(e.Nat64),current_total_stake_e8s:e.Opt(e.Nat64),group_type:e.Int32}),te=e.Record({groups:e.Vec(nt),timestamp_seconds:e.Opt(e.Nat64)}),oe=e.Record({rounds_since_last_distribution:e.Opt(e.Nat64),day_after_genesis:e.Nat64,actual_timestamp_seconds:e.Nat64,total_available_e8s_equivalent:e.Nat64,latest_round_available_e8s_equivalent:e.Opt(e.Nat64),distributed_e8s_equivalent:e.Nat64,settled_proposals:e.Vec(l)}),ne=e.Record({to_subaccount:e.Vec(e.Nat8),neuron_stake_e8s:e.Nat64,from:e.Opt(e.Principal),memo:e.Nat64,from_subaccount:e.Vec(e.Nat8),transfer_timestamp:e.Nat64,block_height:e.Nat64}),at=e.Record({followers:e.Vec(o)}),rt=e.Record({followers_map:e.Vec(e.Tuple(e.Nat64,at))}),st=e.Variant({LastNeuronId:o}),ae=e.Record({status:e.Opt(e.Int32),failure_reason:e.Opt(e.Text),progress:e.Opt(st)}),it=e.Record({neuron_indexes_migration:e.Opt(ae),copy_inactive_neurons_to_stable_memory_migration:e.Opt(ae)}),c=e.Record({error_message:e.Text,error_type:e.Int32}),re=e.Record({vote:e.Int32,voting_power:e.Nat64}),_t=e.Record({min_participant_icp_e8s:e.Opt(e.Nat64),max_participant_icp_e8s:e.Opt(e.Nat64),min_direct_participation_icp_e8s:e.Opt(e.Nat64),max_direct_participation_icp_e8s:e.Opt(e.Nat64)}),ct=e.Record({controller:e.Opt(e.Principal),hotkeys:e.Vec(e.Principal),is_capped:e.Opt(e.Bool),maturity_equivalent_icp_e8s:e.Opt(e.Nat64),nns_neuron_id:e.Opt(o),amount_icp_e8s:e.Opt(e.Nat64)}),B=e.Record({neurons_fund_neuron_portions:e.Vec(ct)}),pt=e.Record({serialized_representation:e.Opt(e.Text)}),V=e.Record({total_maturity_equivalent_icp_e8s:e.Opt(e.Nat64),intended_neurons_fund_participation_icp_e8s:e.Opt(e.Nat64),direct_participation_icp_e8s:e.Opt(e.Nat64),swap_participation_limits:e.Opt(_t),max_neurons_fund_swap_participation_icp_e8s:e.Opt(e.Nat64),neurons_fund_reserves:e.Opt(B),ideal_matched_participation_function:e.Opt(pt),allocated_neurons_fund_participation_icp_e8s:e.Opt(e.Nat64)}),dt=e.Record({final_neurons_fund_participation:e.Opt(V),initial_neurons_fund_participation:e.Opt(V),neurons_fund_refunds:e.Opt(B)}),lt=e.Record({status:e.Opt(e.Int32),freezing_threshold:e.Opt(e.Nat64),controllers:e.Vec(e.Principal),memory_size:e.Opt(e.Nat64),cycles:e.Opt(e.Nat64),idle_cycles_burned_per_day:e.Opt(e.Nat64),module_hash:e.Vec(e.Nat8)}),m=e.Record({status:e.Opt(lt),canister_id:e.Opt(e.Principal)}),ut=e.Record({ledger_index_canister_summary:e.Opt(m),fallback_controller_principal_ids:e.Vec(e.Principal),ledger_archive_canister_summaries:e.Vec(m),ledger_canister_summary:e.Opt(m),swap_canister_summary:e.Opt(m),governance_canister_summary:e.Opt(m),root_canister_summary:e.Opt(m),dapp_canister_summaries:e.Vec(m)}),se=e.Record({swap_background_information:e.Opt(ut)}),ie=e.Record({no:e.Nat64,yes:e.Nat64,total:e.Nat64,timestamp_seconds:e.Nat64}),mt=e.Record({current_deadline_timestamp_seconds:e.Nat64}),Ot=e.Record({id:e.Opt(l),failure_reason:e.Opt(c),ballots:e.Vec(e.Tuple(e.Nat64,re)),proposal_timestamp_seconds:e.Nat64,reward_event_round:e.Nat64,failed_timestamp_seconds:e.Nat64,neurons_fund_data:e.Opt(dt),reject_cost_e8s:e.Nat64,derived_proposal_information:e.Opt(se),latest_tally:e.Opt(ie),sns_token_swap_lifecycle:e.Opt(e.Int32),decided_timestamp_seconds:e.Nat64,proposal:e.Opt(s),proposer:e.Opt(o),wait_for_quiet_state:e.Opt(mt),executed_timestamp_seconds:e.Nat64,original_total_community_fund_maturity_e8s_equivalent:e.Opt(e.Nat64)}),Nt=e.Variant({Spawn:o,Split:R,Configure:P,Merge:T,DisburseToNeuron:C,SyncCommand:e.Record({}),ClaimOrRefreshNeuron:h,MergeMaturity:M,Disburse:A}),Rt=e.Record({command:e.Opt(Nt),timestamp:e.Nat64}),_e=e.Record({vote:e.Int32,proposal_id:e.Opt(l)}),vt=e.Variant({DissolveDelaySeconds:e.Nat64,WhenDissolvedTimestampSeconds:e.Nat64}),N=e.Record({id:e.Opt(o),staked_maturity_e8s_equivalent:e.Opt(e.Nat64),controller:e.Opt(e.Principal),recent_ballots:e.Vec(_e),kyc_verified:e.Bool,neuron_type:e.Opt(e.Int32),not_for_profit:e.Bool,maturity_e8s_equivalent:e.Nat64,cached_neuron_stake_e8s:e.Nat64,created_timestamp_seconds:e.Nat64,auto_stake_maturity:e.Opt(e.Bool),aging_since_timestamp_seconds:e.Nat64,hot_keys:e.Vec(e.Principal),account:e.Vec(e.Nat8),joined_community_fund_timestamp_seconds:e.Opt(e.Nat64),dissolve_state:e.Opt(vt),followees:e.Vec(e.Tuple(e.Int32,_)),neuron_fees_e8s:e.Nat64,visibility:e.Opt(e.Int32),transfer:e.Opt(ne),known_neuron_data:e.Opt(a),spawn_at_timestamp_seconds:e.Opt(e.Nat64)}),bo=e.Record({default_followees:e.Vec(e.Tuple(e.Int32,_)),making_sns_proposal:e.Opt(ot),most_recent_monthly_node_provider_rewards:e.Opt(b),maturity_modulation_last_updated_at_timestamp_seconds:e.Opt(e.Nat64),wait_for_quiet_threshold_seconds:e.Nat64,metrics:e.Opt(ee),neuron_management_voting_period_seconds:e.Opt(e.Nat64),node_providers:e.Vec(u),cached_daily_maturity_modulation_basis_points:e.Opt(e.Int32),economics:e.Opt(k),restore_aging_summary:e.Opt(te),spawning_neurons:e.Opt(e.Bool),latest_reward_event:e.Opt(oe),to_claim_transfers:e.Vec(ne),short_voting_period_seconds:e.Nat64,topic_followee_index:e.Vec(e.Tuple(e.Int32,rt)),migrations:e.Opt(it),proposals:e.Vec(e.Tuple(e.Nat64,Ot)),xdr_conversion_rate:e.Opt(D),in_flight_commands:e.Vec(e.Tuple(e.Nat64,Rt)),neurons:e.Vec(e.Tuple(e.Nat64,N)),genesis_timestamp_seconds:e.Nat64}),S=e.Variant({Ok:e.Null,Err:c}),ft=e.Variant({Error:c,NeuronId:o}),gt=e.Record({result:e.Opt(ft)}),ce=e.Variant({Ok:N,Err:c}),yt=e.Variant({Ok:ee,Err:c}),wt=e.Variant({Ok:b,Err:c}),x=e.Record({dissolve_delay_seconds:e.Nat64,recent_ballots:e.Vec(_e),neuron_type:e.Opt(e.Int32),created_timestamp_seconds:e.Nat64,state:e.Int32,stake_e8s:e.Nat64,joined_community_fund_timestamp_seconds:e.Opt(e.Nat64),retrieved_at_timestamp_seconds:e.Nat64,visibility:e.Opt(e.Int32),known_neuron_data:e.Opt(a),voting_power:e.Nat64,age_seconds:e.Nat64}),pe=e.Variant({Ok:x,Err:c}),kt=e.Record({nns_proposal_id:e.Opt(l)}),bt=e.Record({final_neurons_fund_participation:e.Opt(V),initial_neurons_fund_participation:e.Opt(V),neurons_fund_refunds:e.Opt(B)}),Vt=e.Record({neurons_fund_audit_info:e.Opt(bt)}),St=e.Variant({Ok:Vt,Err:c}),xt=e.Record({result:e.Opt(St)}),ht=e.Variant({Ok:u,Err:c}),E=e.Record({id:e.Opt(l),status:e.Int32,topic:e.Int32,failure_reason:e.Opt(c),ballots:e.Vec(e.Tuple(e.Nat64,re)),proposal_timestamp_seconds:e.Nat64,reward_event_round:e.Nat64,deadline_timestamp_seconds:e.Opt(e.Nat64),failed_timestamp_seconds:e.Nat64,reject_cost_e8s:e.Nat64,derived_proposal_information:e.Opt(se),latest_tally:e.Opt(ie),reward_status:e.Int32,decided_timestamp_seconds:e.Nat64,proposal:e.Opt(s),proposer:e.Opt(o),executed_timestamp_seconds:e.Nat64}),Pt=e.Record({known_neurons:e.Vec(i)}),Tt=e.Record({include_public_neurons_in_full_neurons:e.Opt(e.Bool),neuron_ids:e.Vec(e.Nat64),include_empty_neurons_readable_by_caller:e.Opt(e.Bool),include_neurons_readable_by_caller:e.Bool}),Ct=e.Record({neuron_infos:e.Vec(e.Tuple(e.Nat64,x)),full_neurons:e.Vec(N)}),Mt=e.Record({start_timestamp_seconds:e.Opt(e.Nat64),end_timestamp_seconds:e.Opt(e.Nat64)}),At=e.Record({date_filter:e.Opt(Mt)}),qt=e.Record({rewards:e.Vec(b)}),Bt=e.Record({node_providers:e.Vec(u)}),Et=e.Record({include_reward_status:e.Vec(e.Int32),omit_large_fields:e.Opt(e.Bool),before_proposal:e.Opt(l),limit:e.Nat32,exclude_topic:e.Vec(e.Int32),include_all_manage_neuron_proposals:e.Opt(e.Bool),include_status:e.Vec(e.Int32)}),Ut=e.Record({proposal_info:e.Vec(E)}),Gt=e.Record({arg:e.Opt(e.Vec(e.Nat8)),wasm_module:e.Opt(e.Vec(e.Nat8)),skip_stopping_before_installing:e.Opt(e.Bool),canister_id:e.Opt(e.Principal),install_mode:e.Opt(e.Int32)}),Kt=e.Variant({RegisterKnownNeuron:i,ManageNeuron:r,UpdateCanisterSettings:z,InstallCode:Gt,StopOrStartCanister:F,CreateServiceNervousSystem:Q,ExecuteNnsFunction:Y,RewardNodeProvider:y,RewardNodeProviders:Z,ManageNetworkEconomics:k,ApproveGenesisKyc:q,AddOrRemoveNodeProvider:$,Motion:I}),Wt=e.Record({url:e.Text,title:e.Opt(e.Text),action:e.Opt(Kt),summary:e.Text}),Ht=e.Variant({Spawn:v,Split:R,Follow:K,ClaimOrRefresh:h,Configure:P,RegisterVote:H,Merge:T,DisburseToNeuron:C,MakeProposal:Wt,StakeMaturity:j,MergeMaturity:M,Disburse:A});r.fill(e.Record({id:e.Opt(o),command:e.Opt(Ht),neuron_id_or_subaccount:e.Opt(g)}));let U=e.Record({created_neuron_id:e.Opt(o)}),jt=e.Record({refreshed_neuron_id:e.Opt(o)}),zt=e.Record({target_neuron:e.Opt(N),source_neuron:e.Opt(N),target_neuron_info:e.Opt(x),source_neuron_info:e.Opt(x)}),Ft=e.Record({message:e.Opt(e.Text),proposal_id:e.Opt(l)}),Xt=e.Record({maturity_e8s:e.Nat64,staked_maturity_e8s:e.Nat64}),Jt=e.Record({merged_maturity_e8s:e.Nat64,new_stake_e8s:e.Nat64}),Qt=e.Record({transfer_block_height:e.Nat64}),Yt=e.Variant({Error:c,Spawn:U,Split:U,Follow:e.Record({}),ClaimOrRefresh:jt,Configure:e.Record({}),RegisterVote:e.Record({}),Merge:zt,DisburseToNeuron:U,MakeProposal:Ft,StakeMaturity:Xt,MergeMaturity:Jt,Disburse:Qt}),de=e.Record({command:e.Opt(Yt)}),Zt=e.Record({total_direct_contribution_icp_e8s:e.Opt(e.Nat64),total_neurons_fund_contribution_icp_e8s:e.Opt(e.Nat64),sns_governance_canister_id:e.Opt(e.Principal)}),$t=e.Variant({Committed:Zt,Aborted:e.Record({})}),It=e.Record({result:e.Opt($t),open_sns_token_swap_proposal_id:e.Opt(e.Nat64)}),Dt=e.Record({total_direct_participation_icp_e8s:e.Opt(e.Nat64),total_neurons_fund_participation_icp_e8s:e.Opt(e.Nat64),sns_governance_canister_id:e.Opt(e.Principal)}),Lt=e.Variant({Committed:Dt,Aborted:e.Record({})}),eo=e.Record({result:e.Opt(Lt),nns_proposal_id:e.Opt(e.Nat64)}),to=e.Record({controller:e.Opt(e.Principal),hotkeys:e.Opt(q),is_capped:e.Opt(e.Bool),nns_neuron_id:e.Opt(e.Nat64),amount_icp_e8s:e.Opt(e.Nat64)}),oo=e.Record({neurons_fund_neuron_portions:e.Vec(to)}),no=e.Variant({Ok:oo,Err:c}),ao=e.Record({result:e.Opt(no)}),ro=e.Record({reward_account:e.Opt(f)});return e.Service({claim_gtc_neurons:e.Func([e.Principal,e.Vec(o)],[S],[]),claim_or_refresh_neuron_from_account:e.Func([W],[gt],[]),get_build_metadata:e.Func([],[e.Text],[]),get_full_neuron:e.Func([e.Nat64],[ce],[]),get_full_neuron_by_id_or_subaccount:e.Func([g],[ce],[]),get_latest_reward_event:e.Func([],[oe],[]),get_metrics:e.Func([],[yt],[]),get_monthly_node_provider_rewards:e.Func([],[wt],[]),get_most_recent_monthly_node_provider_rewards:e.Func([],[e.Opt(b)],[]),get_network_economics_parameters:e.Func([],[k],[]),get_neuron_ids:e.Func([],[e.Vec(e.Nat64)],[]),get_neuron_info:e.Func([e.Nat64],[pe],[]),get_neuron_info_by_id_or_subaccount:e.Func([g],[pe],[]),get_neurons_fund_audit_info:e.Func([kt],[xt],[]),get_node_provider_by_caller:e.Func([e.Null],[ht],[]),get_pending_proposals:e.Func([],[e.Vec(E)],[]),get_proposal_info:e.Func([e.Nat64],[e.Opt(E)],[]),get_restore_aging_summary:e.Func([],[te],[]),list_known_neurons:e.Func([],[Pt],[]),list_neurons:e.Func([Tt],[Ct],[]),list_node_provider_rewards:e.Func([At],[qt],[]),list_node_providers:e.Func([],[Bt],[]),list_proposals:e.Func([Et],[Ut],[]),manage_neuron:e.Func([r],[de],[]),settle_community_fund_participation:e.Func([It],[S],[]),settle_neurons_fund_participation:e.Func([eo],[ao],[]),simulate_manage_neuron:e.Func([r],[de],[]),transfer_gtc_neuron:e.Func([o,o],[S],[]),update_neuron:e.Func([N],[e.Opt(c)],[]),update_node_provider:e.Func([ro],[S],[])})};var G=class e{constructor(r,s){this.canisterId=r;this.certifiedService=s;this.canisterId=r,this.certifiedService=s}static create(r={}){let s=r.canisterId??le,{certifiedService:o}=wo({options:{...r,canisterId:s},idlFactory:ue,certifiedIdlFactory:Re});return new e(s,o)}async updateNeuron(r){yo(r.id);let s=me({neuronIds:[r.id]}),_=(await this.certifiedService.list_neurons(s)).full_neurons[0];if(go(this.canisterId,Uint8Array.from(_.account))!==r.accountIdentifier)throw new Error("Neuron account identifier can't be changed");let i=Oe({neuron:r,account:Uint8Array.from(_.account)});return this.certifiedService.update_neuron(i)}};var ve=({proposal:{ballots:e},neuron:{neuronId:r}})=>e.find(({neuronId:s})=>s===r)?.vote,ko=({neurons:e,proposal:r})=>{let{ballots:s,proposalTimestampSeconds:o}=r;return e.filter(({createdTimestampSeconds:_,neuronId:a})=>{let i=_>o,v=s.find(({neuronId:R})=>R===a)===void 0;return i||v})},jo=({neurons:e,proposal:r})=>e.filter(s=>ve({proposal:r,neuron:s})===0&&ko({neurons:e,proposal:r}).find(({neuronId:o})=>o===s.neuronId)===void 0),zo=({neurons:e,proposal:r})=>e.filter(s=>ve({proposal:r,neuron:s})!==0);export{Ro as CanisterAction,fo as CanisterInstallMode,So as CouldNotClaimNeuronError,so as GenesisTokenCanister,io as GovernanceCanister,Po as GovernanceError,G as GovernanceTestCanister,xo as InsufficientAmountError,No as LogVisibility,co as NeuronState,Oo as NeuronType,vo as NeuronVisibility,mo as NnsFunction,lo as ProposalRewardStatus,uo as ProposalStatus,_o as SnsWasmCanister,Vo as StakeNeuronError,po as Topic,ho as UnrecognizedTypeError,To as UnsupportedValueError,Ne as Vote,ko as ineligibleNeurons,jo as votableNeurons,zo as votedNeurons};
//# sourceMappingURL=index.js.map
