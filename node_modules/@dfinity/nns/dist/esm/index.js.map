{
  "version": 3,
  "sources": ["../../src/enums/governance.enums.ts", "../../src/governance_test.canister.ts", "../../candid/governance_test.certified.idl.js", "../../src/utils/neurons.utils.ts"],
  "sourcesContent": ["// The Candid files are generated from Proto. That's why the enums are currently lost in the conversion process.\n// These enums are used to map back numbers provided by the backend through the Candid declaration.\n// We use Pascal case for consistency reason.\n//\n// Proto source: https://github.com/dfinity/ic/blob/master/rs/nns/governance/proto/ic_nns_governance/pb/v1/governance.proto\n\nexport enum NeuronState {\n  Unspecified = 0,\n  Locked = 1,\n  Dissolving = 2,\n  Dissolved = 3,\n  Spawning = 4,\n}\n\nexport enum Topic {\n  Unspecified = 0,\n  NeuronManagement = 1,\n  ExchangeRate = 2,\n  NetworkEconomics = 3,\n  Governance = 4,\n  NodeAdmin = 5,\n  ParticipantManagement = 6,\n  SubnetManagement = 7,\n  NetworkCanisterManagement = 8,\n  Kyc = 9,\n  NodeProviderRewards = 10,\n  /**\n   * @deprecated\n   */\n  SnsDecentralizationSale = 11,\n  IcOsVersionDeployment = 12,\n  IcOsVersionElection = 13,\n  SnsAndCommunityFund = 14,\n  ApiBoundaryNodeManagement = 15,\n  SubnetRental = 16,\n  ProtocolCanisterManagement = 17,\n  ServiceNervousSystemManagement = 18,\n}\n\n// The proposal status, with respect to reward distribution.\n// See also ProposalStatus.\nexport enum ProposalRewardStatus {\n  Unknown = 0,\n\n  // The proposal still accept votes, for the purpose of\n  // vote rewards. This implies nothing on the ProposalStatus.\n  AcceptVotes = 1,\n\n  // The proposal no longer accepts votes. It is due to settle\n  // at the next reward event.\n  ReadyToSettle = 2,\n\n  // The proposal has been taken into account in a reward event.\n  Settled = 3,\n\n  // The proposal is not eligible to be taken into account in a reward event.\n  Ineligible = 4,\n}\n\n// The proposal status, with respect to decision making and execution.\n// See also ProposalRewardStatus.\nexport enum ProposalStatus {\n  Unknown = 0,\n\n  // A decision (accept/reject) has yet to be made.\n  Open = 1,\n\n  // The proposal has been rejected.\n  Rejected = 2,\n\n  // The proposal has been accepted. At this time, either execution\n  // as not yet started, or it has but the outcome is not yet known.\n  Accepted = 3,\n\n  // The proposal was accepted and successfully executed.\n  Executed = 4,\n\n  // The proposal was accepted, but execution failed.\n  Failed = 5,\n}\n\nexport enum Vote {\n  Unspecified = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum NnsFunction {\n  Unspecified = 0,\n  CreateSubnet = 1,\n  AddNodeToSubnet = 2,\n  NnsCanisterInstall = 3,\n  NnsCanisterUpgrade = 4,\n  BlessReplicaVersion = 5,\n  RecoverSubnet = 6,\n  UpdateConfigOfSubnet = 7,\n  AssignNoid = 8,\n  NnsRootUpgrade = 9,\n  IcpXdrConversionRate = 10,\n  DeployGuestosToAllSubnetNodes = 11,\n  ClearProvisionalWhitelist = 12,\n  RemoveNodesFromSubnet = 13,\n  SetAuthorizedSubnetworks = 14,\n  SetFirewallConfig = 15,\n  UpdateNodeOperatorConfig = 16,\n  StopOrStartNnsCanister = 17,\n  RemoveNodes = 18,\n  UninstallCode = 19,\n  UpdateNodeRewardsTable = 20,\n  AddOrRemoveDataCenters = 21,\n  UpdateUnassignedNodesConfig = 22,\n  RemoveNodeOperators = 23,\n  RerouteCanisterRanges = 24,\n  AddFirewallRules = 25,\n  RemoveFirewallRules = 26,\n  UpdateFirewallRules = 27,\n  PrepareCanisterMigration = 28,\n  CompleteCanisterMigration = 29,\n  AddSnsWasm = 30,\n  ChangeSubnetMembership = 31,\n  UpdateSubnetType = 32,\n  ChangeSubnetTypeAssignment = 33,\n  UpdateSnsWasmSnsSubnetIds = 34,\n  UpdateAllowedPrincipals = 35,\n  RetireReplicaVersion = 36,\n  InsertSnsWasmUpgradePathEntries = 37,\n  ReviseElectedGuestosVersions = 38,\n  BitcoinSetConfig = 39,\n  UpdateElectedHostosVersions = 40,\n  UpdateNodesHostosVersion = 41,\n  HardResetNnsRootToVersion = 42,\n  AddApiBoundaryNodes = 43,\n  RemoveApiBoundaryNodes = 44,\n  /**\n   * @deprecated\n   */\n  UpdateApiBoundaryNodeDomain = 45,\n  UpdateApiBoundaryNodesVersion = 46,\n  DeployGuestosToSomeApiBoundaryNodes = 47,\n  DeployGuestosToAllUnassignedNodes = 48,\n  UpdateSshReadOnlyAccessForAllUnassignedNodes = 49,\n  ReviseElectedHostosVersions = 50,\n  DeployHostosToSomeNodes = 51,\n  SubnetRentalRequest = 52,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/f4b2e28525ae9b030bd9edfc982e796417db2b80/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L3286-L3287\nexport enum NeuronType {\n  // Placeholder value due to the proto3 requirement for a zero default.\n  // This is an invalid type; neurons should not be assigned this value.\n  Unspecified = 0,\n  // Represents neurons initially created for Seed accounts in the\n  // Genesis Token Canister, or those descended from such neurons.\n  Seed = 1,\n  // Represents neurons initially created for Early Contributor Token (ECT)\n  // accounts in the Genesis Token Canister, or those descended from such neurons.\n  Ect = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2506-L2512\nexport enum LogVisibility {\n  Unspecified = 0,\n  /// The log is visible to the controllers of the dapp canister.\n  Controllers = 1,\n  /// The log is visible to the public.\n  Public = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2419-L2423\nexport enum CanisterAction {\n  Unspecified = 0,\n  // Stop a canister.\n  Stop = 1,\n  // Start a canister.\n  Start = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L3929-L3958\nexport enum NeuronVisibility {\n  Unspecified = 0,\n  Private = 1,\n  Public = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2354-L2359\nexport enum CanisterInstallMode {\n  Unspecified = 0,\n  Install = 1,\n  Reinstall = 2,\n  Upgrade = 3,\n}\n", "import type { ActorSubclass } from \"@dfinity/agent\";\nimport { principalToAccountIdentifier } from \"@dfinity/ledger-icp\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  assertNonNullish,\n  createServices,\n  type CanisterOptions,\n} from \"@dfinity/utils\";\nimport { idlFactory } from \"../candid/governance.idl\";\nimport type { _SERVICE as GovernanceService } from \"../candid/governance_test\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/governance_test.certified.idl\";\nimport { fromListNeurons } from \"./canisters/governance/request.converters\";\nimport { toRawNeuron } from \"./canisters/governance/response.converters\";\nimport { MAINNET_GOVERNANCE_CANISTER_ID } from \"./constants/canister_ids\";\nimport type { Neuron } from \"./types/governance_converters\";\n\nexport class GovernanceTestCanister {\n  private constructor(\n    private readonly canisterId: Principal,\n    private readonly certifiedService: ActorSubclass<GovernanceService>,\n  ) {\n    this.canisterId = canisterId;\n    this.certifiedService = certifiedService;\n  }\n\n  public static create(options: CanisterOptions<GovernanceService> = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_GOVERNANCE_CANISTER_ID;\n\n    const { certifiedService } = createServices<GovernanceService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new GovernanceTestCanister(canisterId, certifiedService);\n  }\n\n  /**\n   * Test method to update fields of a neuron.\n   *\n   * Only available in the governance test canister.\n   */\n  async updateNeuron(neuron: Neuron) {\n    assertNonNullish(neuron.id);\n    const rawListNeuronsRequest = fromListNeurons({ neuronIds: [neuron.id] });\n    const rawListNeuronsResponse = await this.certifiedService.list_neurons(\n      rawListNeuronsRequest,\n    );\n    const currentNeuron = rawListNeuronsResponse.full_neurons[0];\n    const currentAccountIdentifier = principalToAccountIdentifier(\n      this.canisterId,\n      Uint8Array.from(currentNeuron.account),\n    );\n    if (currentAccountIdentifier !== neuron.accountIdentifier) {\n      throw new Error(\"Neuron account identifier can't be changed\");\n    }\n    const rawNeuron = toRawNeuron({\n      neuron,\n      account: Uint8Array.from(currentNeuron.account),\n    });\n    return this.certifiedService.update_neuron(rawNeuron);\n  }\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance_test.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], []),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        [],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], []),\n    'get_metrics' : IDL.Func([], [Result_3], []),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        [],\n      ),\n    'get_network_economics_parameters' : IDL.Func([], [NetworkEconomics], []),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], []),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], []),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        [],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        [],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], []),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], []),\n    'get_proposal_info' : IDL.Func([IDL.Nat64], [IDL.Opt(ProposalInfo)], []),\n    'get_restore_aging_summary' : IDL.Func([], [RestoreAgingSummary], []),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], []),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        [],\n      ),\n    'list_node_providers' : IDL.Func([], [ListNodeProvidersResponse], []),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        [],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_neuron' : IDL.Func([Neuron], [IDL.Opt(GovernanceError)], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "import { Vote } from \"../enums/governance.enums\";\nimport type {\n  Ballot,\n  NeuronInfo,\n  ProposalInfo,\n} from \"../types/governance_converters\";\n\nconst getNeuronVoteForProposal = ({\n  proposal: { ballots },\n  neuron: { neuronId },\n}: {\n  proposal: ProposalInfo;\n  neuron: NeuronInfo;\n}): Vote | undefined =>\n  ballots.find(({ neuronId: id }) => id === neuronId)?.vote;\n\n/**\n * Filter the neurons that are ineligible to vote to a proposal.\n *\n * This feature needs the ballots of the proposal to contains accurate data.\n * If the proposal has settled, as the ballots of the proposal are emptied for archive purpose, the function might return a list of ineligible neurons that are actually neurons that have not voted but would have been eligible.\n *\n * Long story short, check the status of the proposal before using this function.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const ineligibleNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { ballots, proposalTimestampSeconds } = proposal;\n\n  return neurons.filter(({ createdTimestampSeconds, neuronId }: NeuronInfo) => {\n    const createdSinceProposal: boolean =\n      createdTimestampSeconds > proposalTimestampSeconds;\n\n    const dissolveTooShort: boolean =\n      ballots.find(\n        ({ neuronId: ballotNeuronId }: Ballot) => ballotNeuronId === neuronId,\n      ) === undefined;\n\n    return createdSinceProposal || dissolveTooShort;\n  });\n};\n\n/**\n * Filter the neurons that can vote for a proposal - i.e. the neurons that have not voted yet and are eligible\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const votableNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] =>\n  neurons.filter(\n    (neuron: NeuronInfo) =>\n      getNeuronVoteForProposal({ proposal, neuron }) === Vote.Unspecified &&\n      ineligibleNeurons({ neurons, proposal }).find(\n        ({ neuronId: ineligibleNeuronId }: NeuronInfo) =>\n          ineligibleNeuronId === neuron.neuronId,\n      ) === undefined,\n  );\n\n/**\n * Filter the neurons that have voted for a proposal.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal for which some neurons might have already voted.\n */\nexport const votedNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] =>\n  neurons.filter(\n    (neuron: NeuronInfo) =>\n      getNeuronVoteForProposal({ proposal, neuron }) !== Vote.Unspecified,\n  );\n"],
  "mappings": "4OAMO,IAAKA,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,OAAS,GAAT,SACAA,IAAA,WAAa,GAAb,aACAA,IAAA,UAAY,GAAZ,YACAA,IAAA,SAAW,GAAX,WALUA,QAAA,IAQAC,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,iBAAmB,GAAnB,mBACAA,IAAA,aAAe,GAAf,eACAA,IAAA,iBAAmB,GAAnB,mBACAA,IAAA,WAAa,GAAb,aACAA,IAAA,UAAY,GAAZ,YACAA,IAAA,sBAAwB,GAAxB,wBACAA,IAAA,iBAAmB,GAAnB,mBACAA,IAAA,0BAA4B,GAA5B,4BACAA,IAAA,IAAM,GAAN,MACAA,IAAA,oBAAsB,IAAtB,sBAIAA,IAAA,wBAA0B,IAA1B,0BACAA,IAAA,sBAAwB,IAAxB,wBACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,0BAA4B,IAA5B,4BACAA,IAAA,aAAe,IAAf,eACAA,IAAA,2BAA6B,IAA7B,6BACAA,IAAA,+BAAiC,IAAjC,iCAtBUA,QAAA,IA2BAC,QACVA,IAAA,QAAU,GAAV,UAIAA,IAAA,YAAc,GAAd,cAIAA,IAAA,cAAgB,GAAhB,gBAGAA,IAAA,QAAU,GAAV,UAGAA,IAAA,WAAa,GAAb,aAfUA,QAAA,IAoBAC,QACVA,IAAA,QAAU,GAAV,UAGAA,IAAA,KAAO,GAAP,OAGAA,IAAA,SAAW,GAAX,WAIAA,IAAA,SAAW,GAAX,WAGAA,IAAA,SAAW,GAAX,WAGAA,IAAA,OAAS,GAAT,SAjBUA,QAAA,IAoBAC,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,IAAM,GAAN,MACAA,IAAA,GAAK,GAAL,KAHUA,QAAA,IAMAC,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,aAAe,GAAf,eACAA,IAAA,gBAAkB,GAAlB,kBACAA,IAAA,mBAAqB,GAArB,qBACAA,IAAA,mBAAqB,GAArB,qBACAA,IAAA,oBAAsB,GAAtB,sBACAA,IAAA,cAAgB,GAAhB,gBACAA,IAAA,qBAAuB,GAAvB,uBACAA,IAAA,WAAa,GAAb,aACAA,IAAA,eAAiB,GAAjB,iBACAA,IAAA,qBAAuB,IAAvB,uBACAA,IAAA,8BAAgC,IAAhC,gCACAA,IAAA,0BAA4B,IAA5B,4BACAA,IAAA,sBAAwB,IAAxB,wBACAA,IAAA,yBAA2B,IAA3B,2BACAA,IAAA,kBAAoB,IAApB,oBACAA,IAAA,yBAA2B,IAA3B,2BACAA,IAAA,uBAAyB,IAAzB,yBACAA,IAAA,YAAc,IAAd,cACAA,IAAA,cAAgB,IAAhB,gBACAA,IAAA,uBAAyB,IAAzB,yBACAA,IAAA,uBAAyB,IAAzB,yBACAA,IAAA,4BAA8B,IAA9B,8BACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,sBAAwB,IAAxB,wBACAA,IAAA,iBAAmB,IAAnB,mBACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,yBAA2B,IAA3B,2BACAA,IAAA,0BAA4B,IAA5B,4BACAA,IAAA,WAAa,IAAb,aACAA,IAAA,uBAAyB,IAAzB,yBACAA,IAAA,iBAAmB,IAAnB,mBACAA,IAAA,2BAA6B,IAA7B,6BACAA,IAAA,0BAA4B,IAA5B,4BACAA,IAAA,wBAA0B,IAA1B,0BACAA,IAAA,qBAAuB,IAAvB,uBACAA,IAAA,gCAAkC,IAAlC,kCACAA,IAAA,6BAA+B,IAA/B,+BACAA,IAAA,iBAAmB,IAAnB,mBACAA,IAAA,4BAA8B,IAA9B,8BACAA,IAAA,yBAA2B,IAA3B,2BACAA,IAAA,0BAA4B,IAA5B,4BACAA,IAAA,oBAAsB,IAAtB,sBACAA,IAAA,uBAAyB,IAAzB,yBAIAA,IAAA,4BAA8B,IAA9B,8BACAA,IAAA,8BAAgC,IAAhC,gCACAA,IAAA,oCAAsC,IAAtC,sCACAA,IAAA,kCAAoC,IAApC,oCACAA,IAAA,6CAA+C,IAA/C,+CACAA,IAAA,4BAA8B,IAA9B,8BACAA,IAAA,wBAA0B,IAA1B,0BACAA,IAAA,oBAAsB,IAAtB,sBAxDUA,QAAA,IA4DAC,QAGVA,IAAA,YAAc,GAAd,cAGAA,IAAA,KAAO,GAAP,OAGAA,IAAA,IAAM,GAAN,MATUA,QAAA,IAaAC,QACVA,IAAA,YAAc,GAAd,cAEAA,IAAA,YAAc,GAAd,cAEAA,IAAA,OAAS,GAAT,SALUA,QAAA,IASAC,QACVA,IAAA,YAAc,GAAd,cAEAA,IAAA,KAAO,GAAP,OAEAA,IAAA,MAAQ,GAAR,QALUA,QAAA,IASAC,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,QAAU,GAAV,UACAA,IAAA,OAAS,GAAT,SAHUA,QAAA,IAOAC,QACVA,IAAA,YAAc,GAAd,cACAA,IAAA,QAAU,GAAV,UACAA,IAAA,UAAY,GAAZ,YACAA,IAAA,QAAU,GAAV,UAJUA,QAAA,ICxLZ,OAAS,gCAAAC,OAAoC,sBAE7C,OACE,oBAAAC,GACA,kBAAAC,OAEK,iBCNA,IAAMC,GAAa,CAAC,CAAE,IAAAC,CAAI,IAAM,CACrC,IAAMC,EAAsBD,EAAI,IAAI,EAC9BE,EAAWF,EAAI,IAAI,EACnBG,EAAWH,EAAI,OAAO,CAAE,GAAOA,EAAI,KAAM,CAAC,EAC1CI,EAAYJ,EAAI,OAAO,CAAE,UAAcA,EAAI,IAAIG,CAAQ,CAAE,CAAC,EAC1DE,EAAkBL,EAAI,OAAO,CACjC,KAASA,EAAI,KACb,YAAgBA,EAAI,IAAIA,EAAI,IAAI,CAClC,CAAC,EACKM,EAAcN,EAAI,OAAO,CAC7B,GAAOA,EAAI,IAAIG,CAAQ,EACvB,kBAAsBH,EAAI,IAAIK,CAAe,CAC/C,CAAC,EACKE,EAAQP,EAAI,OAAO,CACvB,oBAAwBA,EAAI,IAAIA,EAAI,KAAK,EACzC,eAAmBA,EAAI,IAAIA,EAAI,SAAS,EACxC,MAAUA,EAAI,IAAIA,EAAI,KAAK,CAC7B,CAAC,EACKQ,EAAQR,EAAI,OAAO,CAAE,WAAeA,EAAI,KAAM,CAAC,EAC/CS,EAAST,EAAI,OAAO,CACxB,MAAUA,EAAI,MACd,UAAcA,EAAI,IAAIG,CAAQ,CAChC,CAAC,EACKO,EAAkCV,EAAI,OAAO,CACjD,WAAeA,EAAI,IAAIA,EAAI,SAAS,EACpC,KAASA,EAAI,KACf,CAAC,EACKW,GAAKX,EAAI,QAAQ,CACrB,qBAAyBA,EAAI,OAAO,CAAC,CAAC,EACtC,kBAAsBU,EACtB,KAASV,EAAI,KACf,CAAC,EACKY,EAAiBZ,EAAI,OAAO,CAAE,GAAOA,EAAI,IAAIW,EAAE,CAAE,CAAC,EAClDE,GAAeb,EAAI,OAAO,CAC9B,kBAAsBA,EAAI,IAAIA,EAAI,SAAS,CAC7C,CAAC,EACKc,GAAYd,EAAI,OAAO,CAAE,YAAgBA,EAAI,IAAIA,EAAI,SAAS,CAAE,CAAC,EACjEe,GAA0Bf,EAAI,OAAO,CACzC,0CAA8CA,EAAI,IACpD,CAAC,EACKgB,GAAwBhB,EAAI,OAAO,CACvC,kCAAsCA,EAAI,KAC5C,CAAC,EACKiB,GAAgBjB,EAAI,OAAO,CAAE,WAAeA,EAAI,IAAIA,EAAI,KAAK,CAAE,CAAC,EAChEkB,GAAuBlB,EAAI,OAAO,CACtC,2BAA+BA,EAAI,KACrC,CAAC,EACKmB,EAAYnB,EAAI,QAAQ,CAC5B,aAAiBa,GACjB,UAAcC,GACd,wBAA4BC,GAC5B,eAAmBf,EAAI,OAAO,CAAC,CAAC,EAChC,gBAAoBA,EAAI,OAAO,CAAC,CAAC,EACjC,sBAA0BgB,GAC1B,cAAkBC,GAClB,kBAAsBjB,EAAI,OAAO,CAAC,CAAC,EACnC,mBAAuBA,EAAI,OAAO,CAAC,CAAC,EACpC,qBAAyBkB,EAC3B,CAAC,EACKE,EAAYpB,EAAI,OAAO,CAAE,UAAcA,EAAI,IAAImB,CAAS,CAAE,CAAC,EAC3DE,EAAarB,EAAI,OAAO,CAAE,GAAOA,EAAI,KAAM,CAAC,EAC5CsB,EAAetB,EAAI,OAAO,CAC9B,KAASA,EAAI,MACb,SAAaA,EAAI,IAAIqB,CAAU,CACjC,CAAC,EACKE,EAAQvB,EAAI,OAAO,CAAE,iBAAqBA,EAAI,IAAIG,CAAQ,CAAE,CAAC,EAC7DqB,EAAmBxB,EAAI,OAAO,CAClC,uBAA2BA,EAAI,MAC/B,aAAiBA,EAAI,KACrB,WAAeA,EAAI,MACnB,eAAmBA,EAAI,IAAIA,EAAI,SAAS,EACxC,MAAUA,EAAI,KAChB,CAAC,EACKyB,EAAgBzB,EAAI,OAAO,CAC/B,oBAAwBA,EAAI,IAAIA,EAAI,KAAK,CAC3C,CAAC,EACK0B,EAAgB1B,EAAI,OAAO,CAAE,oBAAwBA,EAAI,KAAM,CAAC,EAChE2B,EAAoB3B,EAAI,OAAO,CAAE,KAASA,EAAI,IAAIA,EAAI,IAAI,CAAE,CAAC,EAC7D4B,GAAS5B,EAAI,OAAO,CAAE,IAAQA,EAAI,KAAM,CAAC,EACzC6B,EAAW7B,EAAI,OAAO,CAC1B,WAAeA,EAAI,IAAI2B,CAAiB,EACxC,OAAW3B,EAAI,IAAI4B,EAAM,CAC3B,CAAC,EACKE,GAAU9B,EAAI,QAAQ,CAC1B,MAAUO,EACV,MAAUC,EACV,OAAWC,EACX,eAAmBG,EACnB,UAAcQ,EACd,aAAiBE,EACjB,MAAUC,EACV,iBAAqBC,EACrB,aAAiBtB,EACjB,cAAkBuB,EAClB,cAAkBC,EAClB,SAAaG,CACf,CAAC,EACKE,EAAuB/B,EAAI,QAAQ,CACvC,WAAeA,EAAI,IAAIA,EAAI,IAAI,EAC/B,SAAaG,CACf,CAAC,EACK6B,GAAehC,EAAI,OAAO,CAC9B,GAAOA,EAAI,IAAIG,CAAQ,EACvB,QAAYH,EAAI,IAAI8B,EAAO,EAC3B,wBAA4B9B,EAAI,IAAI+B,CAAoB,CAC1D,CAAC,EACKE,GAAcjC,EAAI,OAAO,CAAE,YAAgBA,EAAI,IAAIA,EAAI,SAAS,CAAE,CAAC,EACnEkC,GAAmBlC,EAAI,OAAO,CAClC,mBAAuBA,EAAI,IAAIA,EAAI,KAAK,EACxC,YAAgBA,EAAI,IAAIiC,EAAW,EACnC,eAAmBjC,EAAI,IAAIA,EAAI,KAAK,EACpC,kBAAsBA,EAAI,IAAIA,EAAI,KAAK,EACvC,kBAAsBA,EAAI,IAAIA,EAAI,KAAK,EACvC,mBAAuBA,EAAI,IAAIA,EAAI,KAAK,CAC1C,CAAC,EACKmC,EAAyBnC,EAAI,OAAO,CACxC,YAAgBA,EAAI,IAAIA,EAAI,SAAS,EACrC,SAAaA,EAAI,IAAIkC,EAAgB,CACvC,CAAC,EACKE,GAAcpC,EAAI,OAAO,CAC7B,gCAAoCA,EAAI,IAAIA,EAAI,IAAI,EACpD,iBAAqBA,EAAI,IAAIA,EAAI,IAAIA,EAAI,IAAI,CAAC,EAC9C,YAAgBA,EAAI,IAAIA,EAAI,SAAS,EACrC,SAAaA,EAAI,IAAIA,EAAI,IAAIA,EAAI,IAAI,CAAC,EACtC,aAAiBA,EAAI,IAAIA,EAAI,KAAK,CACpC,CAAC,EACKqC,EAAsBrC,EAAI,OAAO,CACrC,OAAWA,EAAI,IAAIA,EAAI,KAAK,EAC5B,YAAgBA,EAAI,IAAIA,EAAI,SAAS,CACvC,CAAC,EACKsC,EAAatC,EAAI,OAAO,CAAE,aAAiBA,EAAI,IAAIA,EAAI,KAAK,CAAE,CAAC,EAC/DuC,EAAWvC,EAAI,OAAO,CAAE,QAAYA,EAAI,IAAIA,EAAI,KAAK,CAAE,CAAC,EACxDwC,EAASxC,EAAI,OAAO,CAAE,IAAQA,EAAI,IAAIA,EAAI,KAAK,CAAE,CAAC,EAClDyC,GAAyBzC,EAAI,OAAO,CACxC,gCAAoCA,EAAI,IAAIuC,CAAQ,EACpD,oBAAwBvC,EAAI,IAAIsC,CAAU,EAC1C,kBAAsBtC,EAAI,IAAIsC,CAAU,CAC1C,CAAC,EACKI,GAAuB1C,EAAI,OAAO,CACtC,oCAAwCA,EAAI,IAAIsC,CAAU,EAC1D,iCAAqCtC,EAAI,IAAIuC,CAAQ,EACrD,8BAAkCvC,EAAI,IAAIuC,CAAQ,EAClD,sCAA0CvC,EAAI,IAAIuC,CAAQ,EAC1D,yBAA6BvC,EAAI,IAAIsC,CAAU,EAC/C,qBAAyBtC,EAAI,IAAIwC,CAAM,EACvC,0CAA8CxC,EAAI,IAAIuC,CAAQ,EAC9D,+BAAmCvC,EAAI,IAAIuC,CAAQ,EACnD,uBAA2BvC,EAAI,IAAIwC,CAAM,EACzC,yBAA6BxC,EAAI,IAAIyC,EAAsB,CAC7D,CAAC,EACKE,EAAQ3C,EAAI,OAAO,CAAE,gBAAoBA,EAAI,IAAIA,EAAI,IAAI,CAAE,CAAC,EAC5D4C,GAAmB5C,EAAI,OAAO,CAClC,gBAAoBA,EAAI,IAAIwC,CAAM,EAClC,aAAiBxC,EAAI,IAAIA,EAAI,IAAI,EACjC,WAAeA,EAAI,IAAI2C,CAAK,EAC5B,WAAe3C,EAAI,IAAIA,EAAI,IAAI,CACjC,CAAC,EACK6C,GAAW7C,EAAI,OAAO,CAAE,GAAOA,EAAI,IAAIA,EAAI,SAAS,CAAE,CAAC,EACvD8C,GAAqC9C,EAAI,OAAO,CACpD,wBAA4BA,EAAI,IAAIuC,CAAQ,EAC5C,MAAUvC,EAAI,IAAIA,EAAI,KAAK,CAC7B,CAAC,EACK+C,GAAkB/C,EAAI,OAAO,CACjC,2BAA+BA,EAAI,IAAIA,EAAI,KAAK,CAClD,CAAC,EACKgD,GAAYhD,EAAI,OAAO,CAAE,UAAcA,EAAI,IAAIA,EAAI,IAAI,CAAE,CAAC,EAC1DiD,GAAiBjD,EAAI,OAAO,CAChC,qBAAyBA,EAAI,IAAIA,EAAI,KAAK,EAC1C,2BAA+BA,EAAI,IAAIA,EAAI,IAAI,EAC/C,SAAaA,EAAI,IAAIuC,CAAQ,EAC7B,sCAA0CvC,EAAI,IAC5C8C,EACF,EACA,kBAAsB9C,EAAI,IAAIA,EAAI,IAAI,EACtC,wBAA4BA,EAAI,IAAIwC,CAAM,EAC1C,YAAgBxC,EAAI,IAAIwC,CAAM,EAC9B,iCAAqCxC,EAAI,IAAIwC,CAAM,EACnD,wBAA4BxC,EAAI,IAAIwC,CAAM,EAC1C,WAAexC,EAAI,IAAI+C,EAAe,EACtC,iCAAqC/C,EAAI,IAAIwC,CAAM,EACnD,YAAgBxC,EAAI,IAAIwC,CAAM,EAC9B,4BAAgCxC,EAAI,IAAIwC,CAAM,EAC9C,qBAAyBxC,EAAI,IAAIgD,EAAS,CAC5C,CAAC,EACKE,EAAmBlD,EAAI,OAAO,CAAE,MAAUA,EAAI,IAAIwC,CAAM,CAAE,CAAC,EAC3DW,GAAqBnD,EAAI,OAAO,CACpC,WAAeA,EAAI,IAAIA,EAAI,SAAS,EACpC,eAAmBA,EAAI,IAAIuC,CAAQ,EACnC,KAASvC,EAAI,IAAIA,EAAI,KAAK,EAC1B,eAAmBA,EAAI,IAAIuC,CAAQ,EACnC,MAAUvC,EAAI,IAAIwC,CAAM,CAC1B,CAAC,EACKY,GAAwBpD,EAAI,OAAO,CACvC,kBAAsBA,EAAI,IAAImD,EAAkB,CAClD,CAAC,EACKE,EAA2BrD,EAAI,OAAO,CAC1C,sBAA0BA,EAAI,IAAIkD,CAAgB,EAClD,uBAA2BlD,EAAI,IAAIoD,EAAqB,EACxD,kBAAsBpD,EAAI,IAAIkD,CAAgB,CAChD,CAAC,EACKI,EAA6BtD,EAAI,OAAO,CAC5C,IAAQA,EAAI,IAAIA,EAAI,IAAI,EACxB,sBAA0BA,EAAI,IAAI0C,EAAoB,EACtD,kCAAsC1C,EAAI,IAAIA,EAAI,SAAS,EAC3D,KAASA,EAAI,IAAI2C,CAAK,EACtB,KAAS3C,EAAI,IAAIA,EAAI,IAAI,EACzB,kBAAsBA,EAAI,IAAI4C,EAAgB,EAC9C,YAAgB5C,EAAI,IAAIA,EAAI,IAAI,EAChC,eAAmBA,EAAI,IAAI6C,EAAQ,EACnC,gBAAoB7C,EAAI,IAAIiD,EAAc,EAC1C,2BAA+BjD,EAAI,IAAIqD,CAAwB,CACjE,CAAC,EACKE,EAAqBvD,EAAI,OAAO,CACpC,aAAiBA,EAAI,MACrB,QAAYA,EAAI,IAAIA,EAAI,IAAI,CAC9B,CAAC,EACKwD,EAAexD,EAAI,OAAO,CAC9B,GAAOA,EAAI,IAAIA,EAAI,SAAS,EAC5B,eAAmBA,EAAI,IAAI2B,CAAiB,CAC9C,CAAC,EACK8B,GAAiBzD,EAAI,OAAO,CAAE,uBAA2BA,EAAI,KAAM,CAAC,EACpE0D,GAAkB1D,EAAI,OAAO,CACjC,WAAeA,EAAI,IAAI2B,CAAiB,CAC1C,CAAC,EACKgC,GAAa3D,EAAI,QAAQ,CAC7B,eAAmByD,GACnB,gBAAoBC,EACtB,CAAC,EACKE,EAAqB5D,EAAI,OAAO,CACpC,cAAkBA,EAAI,IAAIwD,CAAY,EACtC,YAAgBxD,EAAI,IAAI2D,EAAU,EAClC,WAAe3D,EAAI,KACrB,CAAC,EACK6D,GAAuC7D,EAAI,OAAO,CACtD,gCAAoCA,EAAI,MACxC,MAAUA,EAAI,KAChB,CAAC,EACK8D,GAAS9D,EAAI,OAAO,CACxB,wBAA4BA,EAAI,MAChC,sCAA0CA,EAAI,IAC5C6D,EACF,EACA,YAAgB7D,EAAI,MACpB,2BAA+BA,EAAI,MACnC,iBAAqBA,EAAI,MACzB,cAAkBA,EAAI,MACtB,mBAAuBA,EAAI,IAAIA,EAAI,KAAK,EACxC,wBAA4BA,EAAI,MAChC,iCAAqCA,EAAI,IAAIA,EAAI,KAAK,EACtD,YAAgBA,EAAI,MACpB,iCAAqCA,EAAI,IAAIA,EAAI,KAAK,CACxD,CAAC,EACK+D,GAAmB/D,EAAI,OAAO,CAClC,8BAAkCA,EAAI,IAAIA,EAAI,KAAK,EACnD,wBAA4BA,EAAI,IAAIA,EAAI,SAAS,EACjD,OAAWA,EAAI,IAAI8D,EAAM,CAC3B,CAAC,EACKE,GAAahE,EAAI,OAAO,CAC5B,wBAA4BA,EAAI,MAChC,sBAA0BA,EAAI,KAChC,CAAC,EACKiE,GAA2BjE,EAAI,OAAO,CAC1C,iBAAqBA,EAAI,IAAIgE,EAAU,CACzC,CAAC,EACKE,GAAgClE,EAAI,OAAO,CAC/C,QAAYA,EAAI,IAAIiE,EAAwB,EAC5C,iBAAqBjE,EAAI,IAAIA,EAAI,SAAS,CAC5C,CAAC,EACKmE,GAAsBnE,EAAI,OAAO,CACrC,kBAAsBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOI,CAAS,CAAC,CAC/D,CAAC,EACKgE,EAAsBpE,EAAI,OAAO,CACrC,6BAAiCA,EAAI,IAAIA,EAAI,IAAI,EACjD,QAAYA,EAAI,IAAI4D,CAAkB,CACxC,CAAC,EACKS,EAAUrE,EAAI,OAAO,CAAE,eAAmBA,EAAI,IAAIA,EAAI,IAAI,CAAE,CAAC,EAC7DsE,GAA6CtE,EAAI,OAAO,CAC5D,2BAA+BA,EAAI,IAAIqE,CAAO,EAC9C,sCAA0CrE,EAAI,IAAIqE,CAAO,EACzD,iCAAqCrE,EAAI,IAAIqE,CAAO,CACtD,CAAC,EACKE,GAAuBvE,EAAI,OAAO,CACtC,qBAAyBA,EAAI,IAAIsC,CAAU,EAC3C,gDAAoDtC,EAAI,IACtDsE,EACF,EACA,sDAA0DtE,EAAI,IAAIqE,CAAO,EACzE,qBAAyBrE,EAAI,IAAIsC,CAAU,CAC7C,CAAC,EACKkC,EAAmBxE,EAAI,OAAO,CAClC,yBAA6BA,EAAI,MACjC,gCAAoCA,EAAI,MACxC,uCAA2CA,EAAI,MAC/C,gBAAoBA,EAAI,MACxB,oBAAwBA,EAAI,MAC5B,oCAAwCA,EAAI,MAC5C,qBAAyBA,EAAI,MAC7B,kCAAsCA,EAAI,MAC1C,uBAA2BA,EAAI,IAAIuE,EAAoB,CACzD,CAAC,EACKE,EAAazE,EAAI,OAAO,CAAE,WAAeA,EAAI,IAAIA,EAAI,SAAS,CAAE,CAAC,EACjE0E,GAAS1E,EAAI,QAAQ,CACzB,SAAawD,EACb,MAAUA,CACZ,CAAC,EACKmB,EAA0B3E,EAAI,OAAO,CAAE,OAAWA,EAAI,IAAI0E,EAAM,CAAE,CAAC,EACnEE,EAAS5E,EAAI,OAAO,CAAE,YAAgBA,EAAI,IAAK,CAAC,EAChD6E,GAAS7E,EAAI,QAAQ,CACzB,oBAAwBM,EACxB,aAAiB0B,GACjB,uBAA2BG,EAC3B,YAAgBC,GAChB,oBAAwBC,EACxB,2BAA+BiB,EAC/B,mBAAuBC,EACvB,mBAAuBK,EACvB,iBAAqBG,GACrB,8BAAkCG,GAClC,oBAAwBC,GACxB,oBAAwBC,EACxB,uBAA2BI,EAC3B,kBAAsBC,EACtB,wBAA4BE,EAC5B,OAAWC,CACb,CAAC,EACD1E,EAAS,KACPF,EAAI,OAAO,CACT,IAAQA,EAAI,KACZ,MAAUA,EAAI,IAAIA,EAAI,IAAI,EAC1B,OAAWA,EAAI,IAAI6E,EAAM,EACzB,QAAY7E,EAAI,IAClB,CAAC,CACH,EACA,IAAM8E,GAAoB9E,EAAI,OAAO,CACnC,SAAaA,EAAI,IAAIE,CAAQ,EAC7B,OAAWF,EAAI,IAAIA,EAAI,SAAS,EAChC,YAAgBA,EAAI,IAAIG,CAAQ,CAClC,CAAC,EACK4E,EAAoB/E,EAAI,OAAO,CACnC,sBAA0BA,EAAI,IAAIA,EAAI,KAAK,EAC3C,kBAAsBA,EAAI,IAAIA,EAAI,KAAK,CACzC,CAAC,EACKgF,EAA6BhF,EAAI,OAAO,CAC5C,8BAAkCA,EAAI,IAAIA,EAAI,KAAK,EACnD,iBAAqBA,EAAI,IAAIA,EAAI,KAAK,EACtC,eAAmBA,EAAI,IAAIwD,CAAY,EACvC,UAAcxD,EAAI,MAClB,QAAYA,EAAI,IAAI4D,CAAkB,EACtC,oBAAwB5D,EAAI,IAAI+E,CAAiB,EACjD,kCAAsC/E,EAAI,IAAIA,EAAI,KAAK,CACzD,CAAC,EACKiF,EAAsBjF,EAAI,OAAO,CACrC,8BAAkCA,EAAI,IAAIA,EAAI,KAAK,EACnD,gCAAoCA,EAAI,IACtCA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAChC,EACA,qBAAyBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAAC,EAChE,iBAAqBA,EAAI,IAAIA,EAAI,KAAK,EACtC,MAAUA,EAAI,IAAIA,EAAI,KAAK,EAC3B,qCAAyCA,EAAI,IAAIA,EAAI,KAAK,EAC1D,uCAA2CA,EAAI,IAC7CA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAChC,EACA,mBAAuBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAAC,EAC9D,mBAAuBA,EAAI,IAAIA,EAAI,KAAK,EACxC,cAAkBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAAC,CAC3D,CAAC,EACKkF,GAA0BlF,EAAI,OAAO,CACzC,8BAAkCA,EAAI,MACtC,mCAAuCA,EAAI,IACzCA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,sDAA0DA,EAAI,MAC9D,kCAAsCA,EAAI,MAC1C,0DAA8DA,EAAI,IAChEA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,iCAAqCA,EAAI,MACzC,qCAAyCA,EAAI,IAC3CA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAChC,EACA,iBAAqBA,EAAI,MACzB,iBAAqBA,EAAI,MACzB,qDAAyDA,EAAI,MAC7D,wBAA4BA,EAAI,MAChC,6CAAiDA,EAAI,MACrD,sBAA0BA,EAAI,MAC9B,yCAA6CA,EAAI,MACjD,iBAAqBA,EAAI,MACzB,6BAAiCA,EAAI,MACrC,iBAAqBA,EAAI,MACzB,kCAAsCA,EAAI,MAC1C,sDAA0DA,EAAI,IAC5DA,EAAI,KACN,EACA,qCAAyCA,EAAI,MAC7C,uCAA2CA,EAAI,IAC7CA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,qBAAyBA,EAAI,MAC7B,0DAA8DA,EAAI,MAClE,sBAA0BA,EAAI,MAC9B,oDAAwDA,EAAI,IAAIA,EAAI,KAAK,EACzE,oCAAwCA,EAAI,IAC1CA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,mDAAuDA,EAAI,MAC3D,8DAAkEA,EAAI,IACpEA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,iCAAqCA,EAAI,IACvCA,EAAI,MAAMA,EAAI,MAAOA,EAAI,KAAK,CAChC,EACA,mCAAuCA,EAAI,IACzCA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,yDAA6DA,EAAI,IAC/DiF,CACF,EACA,yBAA6BjF,EAAI,MACjC,+BAAmCA,EAAI,IACrCA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,0CAA8CA,EAAI,MAClD,gCAAoCA,EAAI,MACxC,wCAA4CA,EAAI,IAC9CA,EAAI,MAAMA,EAAI,MAAOA,EAAI,OAAO,CAClC,EACA,6BAAiCA,EAAI,IAAIiF,CAAmB,EAC5D,kBAAsBjF,EAAI,MAC1B,kBAAsBA,EAAI,KAC5B,CAAC,EACKmF,GAA0BnF,EAAI,OAAO,CACzC,MAAUA,EAAI,IAAIA,EAAI,KAAK,EAC3B,yBAA6BA,EAAI,IAAIA,EAAI,KAAK,EAC9C,wBAA4BA,EAAI,IAAIA,EAAI,KAAK,EAC7C,WAAeA,EAAI,KACrB,CAAC,EACKoF,GAAsBpF,EAAI,OAAO,CACrC,OAAWA,EAAI,IAAImF,EAAuB,EAC1C,kBAAsBnF,EAAI,IAAIA,EAAI,KAAK,CACzC,CAAC,EACKqF,GAAcrF,EAAI,OAAO,CAC7B,+BAAmCA,EAAI,IAAIA,EAAI,KAAK,EACpD,kBAAsBA,EAAI,MAC1B,yBAA6BA,EAAI,MACjC,+BAAmCA,EAAI,MACvC,sCAA0CA,EAAI,IAAIA,EAAI,KAAK,EAC3D,2BAA+BA,EAAI,MACnC,kBAAsBA,EAAI,IAAIqB,CAAU,CAC1C,CAAC,EACKiE,GAAsBtF,EAAI,OAAO,CACrC,cAAkBA,EAAI,IAAIA,EAAI,IAAI,EAClC,iBAAqBA,EAAI,MACzB,KAASA,EAAI,IAAIA,EAAI,SAAS,EAC9B,KAASA,EAAI,MACb,gBAAoBA,EAAI,IAAIA,EAAI,IAAI,EACpC,mBAAuBA,EAAI,MAC3B,aAAiBA,EAAI,KACvB,CAAC,EACKuF,GAAYvF,EAAI,OAAO,CAAE,UAAcA,EAAI,IAAIG,CAAQ,CAAE,CAAC,EAC1DqF,GAAexF,EAAI,OAAO,CAC9B,cAAkBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOuF,EAAS,CAAC,CAC3D,CAAC,EACKE,GAAWzF,EAAI,QAAQ,CAAE,aAAiBG,CAAS,CAAC,EACpDuF,GAAY1F,EAAI,OAAO,CAC3B,OAAWA,EAAI,IAAIA,EAAI,KAAK,EAC5B,eAAmBA,EAAI,IAAIA,EAAI,IAAI,EACnC,SAAaA,EAAI,IAAIyF,EAAQ,CAC/B,CAAC,EACKE,GAAa3F,EAAI,OAAO,CAC5B,yBAA6BA,EAAI,IAAI0F,EAAS,EAC9C,iDAAqD1F,EAAI,IAAI0F,EAAS,CACxE,CAAC,EACKE,EAAkB5F,EAAI,OAAO,CACjC,cAAkBA,EAAI,KACtB,WAAeA,EAAI,KACrB,CAAC,EACK6F,GAAS7F,EAAI,OAAO,CAAE,KAASA,EAAI,MAAO,aAAiBA,EAAI,KAAM,CAAC,EACtE8F,GAA0B9F,EAAI,OAAO,CACzC,wBAA4BA,EAAI,IAAIA,EAAI,KAAK,EAC7C,wBAA4BA,EAAI,IAAIA,EAAI,KAAK,EAC7C,iCAAqCA,EAAI,IAAIA,EAAI,KAAK,EACtD,iCAAqCA,EAAI,IAAIA,EAAI,KAAK,CACxD,CAAC,EACK+F,GAA2B/F,EAAI,OAAO,CAC1C,WAAeA,EAAI,IAAIA,EAAI,SAAS,EACpC,QAAYA,EAAI,IAAIA,EAAI,SAAS,EACjC,UAAcA,EAAI,IAAIA,EAAI,IAAI,EAC9B,4BAAgCA,EAAI,IAAIA,EAAI,KAAK,EACjD,cAAkBA,EAAI,IAAIG,CAAQ,EAClC,eAAmBH,EAAI,IAAIA,EAAI,KAAK,CACtC,CAAC,EACKgG,EAAsBhG,EAAI,OAAO,CACrC,6BAAiCA,EAAI,IAAI+F,EAAwB,CACnE,CAAC,EACKE,GAAoCjG,EAAI,OAAO,CACnD,0BAA8BA,EAAI,IAAIA,EAAI,IAAI,CAChD,CAAC,EACKkG,EAA2BlG,EAAI,OAAO,CAC1C,kCAAsCA,EAAI,IAAIA,EAAI,KAAK,EACvD,4CAAgDA,EAAI,IAAIA,EAAI,KAAK,EACjE,6BAAiCA,EAAI,IAAIA,EAAI,KAAK,EAClD,0BAA8BA,EAAI,IAAI8F,EAAuB,EAC7D,4CAAgD9F,EAAI,IAAIA,EAAI,KAAK,EACjE,sBAA0BA,EAAI,IAAIgG,CAAmB,EACrD,qCAAyChG,EAAI,IAC3CiG,EACF,EACA,6CAAiDjG,EAAI,IAAIA,EAAI,KAAK,CACpE,CAAC,EACKmG,GAAkBnG,EAAI,OAAO,CACjC,iCAAqCA,EAAI,IAAIkG,CAAwB,EACrE,mCAAuClG,EAAI,IAAIkG,CAAwB,EACvE,qBAAyBlG,EAAI,IAAIgG,CAAmB,CACtD,CAAC,EACKI,GAAyBpG,EAAI,OAAO,CACxC,OAAWA,EAAI,IAAIA,EAAI,KAAK,EAC5B,mBAAuBA,EAAI,IAAIA,EAAI,KAAK,EACxC,YAAgBA,EAAI,IAAIA,EAAI,SAAS,EACrC,YAAgBA,EAAI,IAAIA,EAAI,KAAK,EACjC,OAAWA,EAAI,IAAIA,EAAI,KAAK,EAC5B,2BAA+BA,EAAI,IAAIA,EAAI,KAAK,EAChD,YAAgBA,EAAI,IAAIA,EAAI,IAAI,CAClC,CAAC,EACKqG,EAAkBrG,EAAI,OAAO,CACjC,OAAWA,EAAI,IAAIoG,EAAsB,EACzC,YAAgBpG,EAAI,IAAIA,EAAI,SAAS,CACvC,CAAC,EACKsG,GAA4BtG,EAAI,OAAO,CAC3C,8BAAkCA,EAAI,IAAIqG,CAAe,EACzD,kCAAsCrG,EAAI,IAAIA,EAAI,SAAS,EAC3D,kCAAsCA,EAAI,IAAIqG,CAAe,EAC7D,wBAA4BrG,EAAI,IAAIqG,CAAe,EACnD,sBAA0BrG,EAAI,IAAIqG,CAAe,EACjD,4BAAgCrG,EAAI,IAAIqG,CAAe,EACvD,sBAA0BrG,EAAI,IAAIqG,CAAe,EACjD,wBAA4BrG,EAAI,IAAIqG,CAAe,CACrD,CAAC,EACKE,GAA6BvG,EAAI,OAAO,CAC5C,4BAAgCA,EAAI,IAAIsG,EAAyB,CACnE,CAAC,EACKE,GAAQxG,EAAI,OAAO,CACvB,GAAOA,EAAI,MACX,IAAQA,EAAI,MACZ,MAAUA,EAAI,MACd,kBAAsBA,EAAI,KAC5B,CAAC,EACKyG,GAAoBzG,EAAI,OAAO,CACnC,mCAAuCA,EAAI,KAC7C,CAAC,EACK0G,GAAe1G,EAAI,OAAO,CAC9B,GAAOA,EAAI,IAAIqB,CAAU,EACzB,eAAmBrB,EAAI,IAAI4F,CAAe,EAC1C,QAAY5F,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAO6F,EAAM,CAAC,EAChD,2BAA+B7F,EAAI,MACnC,mBAAuBA,EAAI,MAC3B,yBAA6BA,EAAI,MACjC,kBAAsBA,EAAI,IAAImG,EAAe,EAC7C,gBAAoBnG,EAAI,MACxB,6BAAiCA,EAAI,IAAIuG,EAA0B,EACnE,aAAiBvG,EAAI,IAAIwG,EAAK,EAC9B,yBAA6BxG,EAAI,IAAIA,EAAI,KAAK,EAC9C,0BAA8BA,EAAI,MAClC,SAAaA,EAAI,IAAIE,CAAQ,EAC7B,SAAaF,EAAI,IAAIG,CAAQ,EAC7B,qBAAyBH,EAAI,IAAIyG,EAAiB,EAClD,2BAA+BzG,EAAI,MACnC,sDAA0DA,EAAI,IAC5DA,EAAI,KACN,CACF,CAAC,EACK2G,GAAY3G,EAAI,QAAQ,CAC5B,MAAUG,EACV,MAAUK,EACV,UAAcY,EACd,MAAUG,EACV,iBAAqBC,EACrB,YAAgBxB,EAAI,OAAO,CAAC,CAAC,EAC7B,qBAAyBY,EACzB,cAAkBc,EAClB,SAAaG,CACf,CAAC,EACK+E,GAAwB5G,EAAI,OAAO,CACvC,QAAYA,EAAI,IAAI2G,EAAS,EAC7B,UAAc3G,EAAI,KACpB,CAAC,EACK6G,GAAa7G,EAAI,OAAO,CAC5B,KAASA,EAAI,MACb,YAAgBA,EAAI,IAAIqB,CAAU,CACpC,CAAC,EACKyF,GAAgB9G,EAAI,QAAQ,CAChC,qBAAyBA,EAAI,MAC7B,8BAAkCA,EAAI,KACxC,CAAC,EACK+G,EAAS/G,EAAI,OAAO,CACxB,GAAOA,EAAI,IAAIG,CAAQ,EACvB,+BAAmCH,EAAI,IAAIA,EAAI,KAAK,EACpD,WAAeA,EAAI,IAAIA,EAAI,SAAS,EACpC,eAAmBA,EAAI,IAAI6G,EAAU,EACrC,aAAiB7G,EAAI,KACrB,YAAgBA,EAAI,IAAIA,EAAI,KAAK,EACjC,eAAmBA,EAAI,KACvB,wBAA4BA,EAAI,MAChC,wBAA4BA,EAAI,MAChC,0BAA8BA,EAAI,MAClC,oBAAwBA,EAAI,IAAIA,EAAI,IAAI,EACxC,8BAAkCA,EAAI,MACtC,SAAaA,EAAI,IAAIA,EAAI,SAAS,EAClC,QAAYA,EAAI,IAAIA,EAAI,IAAI,EAC5B,wCAA4CA,EAAI,IAAIA,EAAI,KAAK,EAC7D,eAAmBA,EAAI,IAAI8G,EAAa,EACxC,UAAc9G,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOI,CAAS,CAAC,EACrD,gBAAoBJ,EAAI,MACxB,WAAeA,EAAI,IAAIA,EAAI,KAAK,EAChC,SAAaA,EAAI,IAAIsF,EAAmB,EACxC,kBAAsBtF,EAAI,IAAIK,CAAe,EAC7C,2BAA+BL,EAAI,IAAIA,EAAI,KAAK,CAClD,CAAC,EACKgH,GAAahH,EAAI,OAAO,CAC5B,kBAAsBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOI,CAAS,CAAC,EAC7D,oBAAwBJ,EAAI,IAAI8E,EAAiB,EACjD,0CAA8C9E,EAAI,IAChDgF,CACF,EACA,sDAA0DhF,EAAI,IAC5DA,EAAI,KACN,EACA,iCAAqCA,EAAI,MACzC,QAAYA,EAAI,IAAIkF,EAAuB,EAC3C,wCAA4ClF,EAAI,IAAIA,EAAI,KAAK,EAC7D,eAAmBA,EAAI,IAAIwD,CAAY,EACvC,8CAAkDxD,EAAI,IAAIA,EAAI,KAAK,EACnE,UAAcA,EAAI,IAAIwE,CAAgB,EACtC,sBAA0BxE,EAAI,IAAIoF,EAAmB,EACrD,iBAAqBpF,EAAI,IAAIA,EAAI,IAAI,EACrC,oBAAwBA,EAAI,IAAIqF,EAAW,EAC3C,mBAAuBrF,EAAI,IAAIsF,EAAmB,EAClD,4BAAgCtF,EAAI,MACpC,qBAAyBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOwF,EAAY,CAAC,EACnE,WAAexF,EAAI,IAAI2F,EAAU,EACjC,UAAc3F,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAO0G,EAAY,CAAC,EACxD,oBAAwB1G,EAAI,IAAI+E,CAAiB,EACjD,mBAAuB/E,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAO4G,EAAqB,CAAC,EAC1E,QAAY5G,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAO+G,CAAM,CAAC,EAChD,0BAA8B/G,EAAI,KACpC,CAAC,EACKiH,EAASjH,EAAI,QAAQ,CAAE,GAAOA,EAAI,KAAM,IAAQ4F,CAAgB,CAAC,EACjEsB,GAAWlH,EAAI,QAAQ,CAC3B,MAAU4F,EACV,SAAazF,CACf,CAAC,EACKgH,GAA0CnH,EAAI,OAAO,CACzD,OAAWA,EAAI,IAAIkH,EAAQ,CAC7B,CAAC,EACKE,GAAWpH,EAAI,QAAQ,CAAE,GAAO+G,EAAQ,IAAQnB,CAAgB,CAAC,EACjEyB,GAAWrH,EAAI,QAAQ,CAC3B,GAAOkF,GACP,IAAQU,CACV,CAAC,EACK0B,GAAWtH,EAAI,QAAQ,CAC3B,GAAOgF,EACP,IAAQY,CACV,CAAC,EACK2B,EAAavH,EAAI,OAAO,CAC5B,uBAA2BA,EAAI,MAC/B,eAAmBA,EAAI,IAAI6G,EAAU,EACrC,YAAgB7G,EAAI,IAAIA,EAAI,KAAK,EACjC,0BAA8BA,EAAI,MAClC,MAAUA,EAAI,MACd,UAAcA,EAAI,MAClB,wCAA4CA,EAAI,IAAIA,EAAI,KAAK,EAC7D,+BAAmCA,EAAI,MACvC,WAAeA,EAAI,IAAIA,EAAI,KAAK,EAChC,kBAAsBA,EAAI,IAAIK,CAAe,EAC7C,aAAiBL,EAAI,MACrB,YAAgBA,EAAI,KACtB,CAAC,EACKwH,GAAWxH,EAAI,QAAQ,CAAE,GAAOuH,EAAY,IAAQ3B,CAAgB,CAAC,EACrE6B,GAAiCzH,EAAI,OAAO,CAChD,gBAAoBA,EAAI,IAAIqB,CAAU,CACxC,CAAC,EACKqG,GAAuB1H,EAAI,OAAO,CACtC,iCAAqCA,EAAI,IAAIkG,CAAwB,EACrE,mCAAuClG,EAAI,IAAIkG,CAAwB,EACvE,qBAAyBlG,EAAI,IAAIgG,CAAmB,CACtD,CAAC,EACK2B,GAAK3H,EAAI,OAAO,CACpB,wBAA4BA,EAAI,IAAI0H,EAAoB,CAC1D,CAAC,EACKE,GAAW5H,EAAI,QAAQ,CAAE,GAAO2H,GAAI,IAAQ/B,CAAgB,CAAC,EAC7DiC,GAAkC7H,EAAI,OAAO,CACjD,OAAWA,EAAI,IAAI4H,EAAQ,CAC7B,CAAC,EACKE,GAAW9H,EAAI,QAAQ,CAC3B,GAAOwD,EACP,IAAQoC,CACV,CAAC,EACKmC,EAAe/H,EAAI,OAAO,CAC9B,GAAOA,EAAI,IAAIqB,CAAU,EACzB,OAAWrB,EAAI,MACf,MAAUA,EAAI,MACd,eAAmBA,EAAI,IAAI4F,CAAe,EAC1C,QAAY5F,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAO6F,EAAM,CAAC,EAChD,2BAA+B7F,EAAI,MACnC,mBAAuBA,EAAI,MAC3B,2BAA+BA,EAAI,IAAIA,EAAI,KAAK,EAChD,yBAA6BA,EAAI,MACjC,gBAAoBA,EAAI,MACxB,6BAAiCA,EAAI,IAAIuG,EAA0B,EACnE,aAAiBvG,EAAI,IAAIwG,EAAK,EAC9B,cAAkBxG,EAAI,MACtB,0BAA8BA,EAAI,MAClC,SAAaA,EAAI,IAAIE,CAAQ,EAC7B,SAAaF,EAAI,IAAIG,CAAQ,EAC7B,2BAA+BH,EAAI,KACrC,CAAC,EACKgI,GAA2BhI,EAAI,OAAO,CAC1C,cAAkBA,EAAI,IAAIM,CAAW,CACvC,CAAC,EACK2H,GAAcjI,EAAI,OAAO,CAC7B,uCAA2CA,EAAI,IAAIA,EAAI,IAAI,EAC3D,WAAeA,EAAI,IAAIA,EAAI,KAAK,EAChC,yCAA6CA,EAAI,IAAIA,EAAI,IAAI,EAC7D,mCAAuCA,EAAI,IAC7C,CAAC,EACKkI,GAAsBlI,EAAI,OAAO,CACrC,aAAiBA,EAAI,IAAIA,EAAI,MAAMA,EAAI,MAAOuH,CAAU,CAAC,EACzD,aAAiBvH,EAAI,IAAI+G,CAAM,CACjC,CAAC,EACKoB,GAAkBnI,EAAI,OAAO,CACjC,wBAA4BA,EAAI,IAAIA,EAAI,KAAK,EAC7C,sBAA0BA,EAAI,IAAIA,EAAI,KAAK,CAC7C,CAAC,EACKoI,GAAiCpI,EAAI,OAAO,CAChD,YAAgBA,EAAI,IAAImI,EAAe,CACzC,CAAC,EACKE,GAAkCrI,EAAI,OAAO,CACjD,QAAYA,EAAI,IAAIgF,CAA0B,CAChD,CAAC,EACKsD,GAA4BtI,EAAI,OAAO,CAC3C,eAAmBA,EAAI,IAAIwD,CAAY,CACzC,CAAC,EACK+E,GAAmBvI,EAAI,OAAO,CAClC,sBAA0BA,EAAI,IAAIA,EAAI,KAAK,EAC3C,kBAAsBA,EAAI,IAAIA,EAAI,IAAI,EACtC,gBAAoBA,EAAI,IAAIqB,CAAU,EACtC,MAAUrB,EAAI,MACd,cAAkBA,EAAI,IAAIA,EAAI,KAAK,EACnC,oCAAwCA,EAAI,IAAIA,EAAI,IAAI,EACxD,eAAmBA,EAAI,IAAIA,EAAI,KAAK,CACtC,CAAC,EACKwI,GAA2BxI,EAAI,OAAO,CAC1C,cAAkBA,EAAI,IAAI+H,CAAY,CACxC,CAAC,EACKU,GAAqBzI,EAAI,OAAO,CACpC,IAAQA,EAAI,IAAIA,EAAI,IAAIA,EAAI,IAAI,CAAC,EACjC,YAAgBA,EAAI,IAAIA,EAAI,IAAIA,EAAI,IAAI,CAAC,EACzC,gCAAoCA,EAAI,IAAIA,EAAI,IAAI,EACpD,YAAgBA,EAAI,IAAIA,EAAI,SAAS,EACrC,aAAiBA,EAAI,IAAIA,EAAI,KAAK,CACpC,CAAC,EACK0I,GAAwB1I,EAAI,QAAQ,CACxC,oBAAwBM,EACxB,aAAiBL,EACjB,uBAA2BkC,EAC3B,YAAgBsG,GAChB,oBAAwBpG,EACxB,2BAA+BiB,EAC/B,mBAAuBC,EACvB,mBAAuBK,EACvB,oBAAwBQ,EACxB,uBAA2BI,EAC3B,kBAAsBC,EACtB,wBAA4BE,EAC5B,OAAWC,CACb,CAAC,EACK+D,GAAsB3I,EAAI,OAAO,CACrC,IAAQA,EAAI,KACZ,MAAUA,EAAI,IAAIA,EAAI,IAAI,EAC1B,OAAWA,EAAI,IAAI0I,EAAqB,EACxC,QAAY1I,EAAI,IAClB,CAAC,EACK4I,GAA6B5I,EAAI,QAAQ,CAC7C,MAAUO,EACV,MAAUC,EACV,OAAWC,EACX,eAAmBG,EACnB,UAAcQ,EACd,aAAiBE,EACjB,MAAUC,EACV,iBAAqBC,EACrB,aAAiBmH,GACjB,cAAkBlH,EAClB,cAAkBC,EAClB,SAAaG,CACf,CAAC,EACD5B,EAAoB,KAClBD,EAAI,OAAO,CACT,GAAOA,EAAI,IAAIG,CAAQ,EACvB,QAAYH,EAAI,IAAI4I,EAA0B,EAC9C,wBAA4B5I,EAAI,IAAI+B,CAAoB,CAC1D,CAAC,CACH,EACA,IAAM8G,EAAgB7I,EAAI,OAAO,CAAE,kBAAsBA,EAAI,IAAIG,CAAQ,CAAE,CAAC,EACtE2I,GAAyB9I,EAAI,OAAO,CACxC,oBAAwBA,EAAI,IAAIG,CAAQ,CAC1C,CAAC,EACK4I,GAAgB/I,EAAI,OAAO,CAC/B,cAAkBA,EAAI,IAAI+G,CAAM,EAChC,cAAkB/G,EAAI,IAAI+G,CAAM,EAChC,mBAAuB/G,EAAI,IAAIuH,CAAU,EACzC,mBAAuBvH,EAAI,IAAIuH,CAAU,CAC3C,CAAC,EACKyB,GAAuBhJ,EAAI,OAAO,CACtC,QAAYA,EAAI,IAAIA,EAAI,IAAI,EAC5B,YAAgBA,EAAI,IAAIqB,CAAU,CACpC,CAAC,EACK4H,GAAwBjJ,EAAI,OAAO,CACvC,aAAiBA,EAAI,MACrB,oBAAwBA,EAAI,KAC9B,CAAC,EACKkJ,GAAwBlJ,EAAI,OAAO,CACvC,oBAAwBA,EAAI,MAC5B,cAAkBA,EAAI,KACxB,CAAC,EACKmJ,GAAmBnJ,EAAI,OAAO,CAAE,sBAA0BA,EAAI,KAAM,CAAC,EACrEoJ,GAAYpJ,EAAI,QAAQ,CAC5B,MAAU4F,EACV,MAAUiD,EACV,MAAUA,EACV,OAAW7I,EAAI,OAAO,CAAC,CAAC,EACxB,eAAmB8I,GACnB,UAAc9I,EAAI,OAAO,CAAC,CAAC,EAC3B,aAAiBA,EAAI,OAAO,CAAC,CAAC,EAC9B,MAAU+I,GACV,iBAAqBF,EACrB,aAAiBG,GACjB,cAAkBC,GAClB,cAAkBC,GAClB,SAAaC,EACf,CAAC,EACKE,GAAuBrJ,EAAI,OAAO,CAAE,QAAYA,EAAI,IAAIoJ,EAAS,CAAE,CAAC,EACpEE,GAAYtJ,EAAI,OAAO,CAC3B,kCAAsCA,EAAI,IAAIA,EAAI,KAAK,EACvD,wCAA4CA,EAAI,IAAIA,EAAI,KAAK,EAC7D,2BAA+BA,EAAI,IAAIA,EAAI,SAAS,CACtD,CAAC,EACKuJ,GAAWvJ,EAAI,QAAQ,CAC3B,UAAcsJ,GACd,QAAYtJ,EAAI,OAAO,CAAC,CAAC,CAC3B,CAAC,EACKwJ,GAAmCxJ,EAAI,OAAO,CAClD,OAAWA,EAAI,IAAIuJ,EAAQ,EAC3B,gCAAoCvJ,EAAI,IAAIA,EAAI,KAAK,CACvD,CAAC,EACKyJ,GAAczJ,EAAI,OAAO,CAC7B,mCAAuCA,EAAI,IAAIA,EAAI,KAAK,EACxD,yCAA6CA,EAAI,IAAIA,EAAI,KAAK,EAC9D,2BAA+BA,EAAI,IAAIA,EAAI,SAAS,CACtD,CAAC,EACK0J,GAAW1J,EAAI,QAAQ,CAC3B,UAAcyJ,GACd,QAAYzJ,EAAI,OAAO,CAAC,CAAC,CAC3B,CAAC,EACK2J,GAAwC3J,EAAI,OAAO,CACvD,OAAWA,EAAI,IAAI0J,EAAQ,EAC3B,gBAAoB1J,EAAI,IAAIA,EAAI,KAAK,CACvC,CAAC,EACK4J,GAAoB5J,EAAI,OAAO,CACnC,WAAeA,EAAI,IAAIA,EAAI,SAAS,EACpC,QAAYA,EAAI,IAAIyE,CAAU,EAC9B,UAAczE,EAAI,IAAIA,EAAI,IAAI,EAC9B,cAAkBA,EAAI,IAAIA,EAAI,KAAK,EACnC,eAAmBA,EAAI,IAAIA,EAAI,KAAK,CACtC,CAAC,EACK6J,GAAO7J,EAAI,OAAO,CACtB,6BAAiCA,EAAI,IAAI4J,EAAiB,CAC5D,CAAC,EACKE,GAAY9J,EAAI,QAAQ,CAAE,GAAO6J,GAAM,IAAQjE,CAAgB,CAAC,EAChEmE,GAAyC/J,EAAI,OAAO,CACxD,OAAWA,EAAI,IAAI8J,EAAS,CAC9B,CAAC,EACKE,GAAqBhK,EAAI,OAAO,CACpC,eAAmBA,EAAI,IAAI2B,CAAiB,CAC9C,CAAC,EACD,OAAO3B,EAAI,QAAQ,CACjB,kBAAsBA,EAAI,KACtB,CAACA,EAAI,UAAWA,EAAI,IAAIG,CAAQ,CAAC,EACjC,CAAC8G,CAAM,EACP,CAAC,CACH,EACF,qCAAyCjH,EAAI,KACzC,CAACU,CAA+B,EAChC,CAACyG,EAAuC,EACxC,CAAC,CACH,EACF,mBAAuBnH,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,IAAI,EAAG,CAAC,CAAC,EAClD,gBAAoBA,EAAI,KAAK,CAACA,EAAI,KAAK,EAAG,CAACoH,EAAQ,EAAG,CAAC,CAAC,EACxD,oCAAwCpH,EAAI,KACxC,CAAC+B,CAAoB,EACrB,CAACqF,EAAQ,EACT,CAAC,CACH,EACF,wBAA4BpH,EAAI,KAAK,CAAC,EAAG,CAACqF,EAAW,EAAG,CAAC,CAAC,EAC1D,YAAgBrF,EAAI,KAAK,CAAC,EAAG,CAACqH,EAAQ,EAAG,CAAC,CAAC,EAC3C,kCAAsCrH,EAAI,KAAK,CAAC,EAAG,CAACsH,EAAQ,EAAG,CAAC,CAAC,EACjE,8CAAkDtH,EAAI,KAClD,CAAC,EACD,CAACA,EAAI,IAAIgF,CAA0B,CAAC,EACpC,CAAC,CACH,EACF,iCAAqChF,EAAI,KAAK,CAAC,EAAG,CAACwE,CAAgB,EAAG,CAAC,CAAC,EACxE,eAAmBxE,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,IAAIA,EAAI,KAAK,CAAC,EAAG,CAAC,CAAC,EACxD,gBAAoBA,EAAI,KAAK,CAACA,EAAI,KAAK,EAAG,CAACwH,EAAQ,EAAG,CAAC,CAAC,EACxD,oCAAwCxH,EAAI,KACxC,CAAC+B,CAAoB,EACrB,CAACyF,EAAQ,EACT,CAAC,CACH,EACF,4BAAgCxH,EAAI,KAChC,CAACyH,EAA8B,EAC/B,CAACI,EAA+B,EAChC,CAAC,CACH,EACF,4BAAgC7H,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAAC8H,EAAQ,EAAG,CAAC,CAAC,EACnE,sBAA0B9H,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,IAAI+H,CAAY,CAAC,EAAG,CAAC,CAAC,EAClE,kBAAsB/H,EAAI,KAAK,CAACA,EAAI,KAAK,EAAG,CAACA,EAAI,IAAI+H,CAAY,CAAC,EAAG,CAAC,CAAC,EACvE,0BAA8B/H,EAAI,KAAK,CAAC,EAAG,CAACoF,EAAmB,EAAG,CAAC,CAAC,EACpE,mBAAuBpF,EAAI,KAAK,CAAC,EAAG,CAACgI,EAAwB,EAAG,CAAC,CAAC,EAClE,aAAiBhI,EAAI,KAAK,CAACiI,EAAW,EAAG,CAACC,EAAmB,EAAG,CAAC,CAAC,EAClE,2BAA+BlI,EAAI,KAC/B,CAACoI,EAA8B,EAC/B,CAACC,EAA+B,EAChC,CAAC,CACH,EACF,oBAAwBrI,EAAI,KAAK,CAAC,EAAG,CAACsI,EAAyB,EAAG,CAAC,CAAC,EACpE,eAAmBtI,EAAI,KACnB,CAACuI,EAAgB,EACjB,CAACC,EAAwB,EACzB,CAAC,CACH,EACF,cAAkBxI,EAAI,KAClB,CAACC,CAAmB,EACpB,CAACoJ,EAAoB,EACrB,CAAC,CACH,EACF,oCAAwCrJ,EAAI,KACxC,CAACwJ,EAAgC,EACjC,CAACvC,CAAM,EACP,CAAC,CACH,EACF,kCAAsCjH,EAAI,KACtC,CAAC2J,EAAqC,EACtC,CAACI,EAAsC,EACvC,CAAC,CACH,EACF,uBAA2B/J,EAAI,KAC3B,CAACC,CAAmB,EACpB,CAACoJ,EAAoB,EACrB,CAAC,CACH,EACF,oBAAwBrJ,EAAI,KAAK,CAACG,EAAUA,CAAQ,EAAG,CAAC8G,CAAM,EAAG,CAAC,CAAC,EACnE,cAAkBjH,EAAI,KAAK,CAAC+G,CAAM,EAAG,CAAC/G,EAAI,IAAI4F,CAAe,CAAC,EAAG,CAAC,CAAC,EACnE,qBAAyB5F,EAAI,KAAK,CAACgK,EAAkB,EAAG,CAAC/C,CAAM,EAAG,CAAC,CAAC,CACtE,CAAC,CACH,EDv7BO,IAAMgD,EAAN,MAAMC,CAAuB,CAC1B,YACWC,EACAC,EACjB,CAFiB,gBAAAD,EACA,sBAAAC,EAEjB,KAAK,WAAaD,EAClB,KAAK,iBAAmBC,CAC1B,CAEA,OAAc,OAAOC,EAA8C,CAAC,EAAG,CACrE,IAAMF,EACJE,EAAQ,YAAcC,GAElB,CAAE,iBAAAF,CAAiB,EAAIG,GAAkC,CAC7D,QAAS,CACP,GAAGF,EACH,WAAAF,CACF,EACA,WAAAK,GACA,oBAAAA,EACF,CAAC,EAED,OAAO,IAAIN,EAAuBC,EAAYC,CAAgB,CAChE,CAOA,MAAM,aAAaK,EAAgB,CACjCC,GAAiBD,EAAO,EAAE,EAC1B,IAAME,EAAwBC,GAAgB,CAAE,UAAW,CAACH,EAAO,EAAE,CAAE,CAAC,EAIlEI,GAHyB,MAAM,KAAK,iBAAiB,aACzDF,CACF,GAC6C,aAAa,CAAC,EAK3D,GAJiCG,GAC/B,KAAK,WACL,WAAW,KAAKD,EAAc,OAAO,CACvC,IACiCJ,EAAO,kBACtC,MAAM,IAAI,MAAM,4CAA4C,EAE9D,IAAMM,EAAYC,GAAY,CAC5B,OAAAP,EACA,QAAS,WAAW,KAAKI,EAAc,OAAO,CAChD,CAAC,EACD,OAAO,KAAK,iBAAiB,cAAcE,CAAS,CACtD,CACF,EE3DA,IAAME,GAA2B,CAAC,CAChC,SAAU,CAAE,QAAAC,CAAQ,EACpB,OAAQ,CAAE,SAAAC,CAAS,CACrB,IAIED,EAAQ,KAAK,CAAC,CAAE,SAAUE,CAAG,IAAMA,IAAOD,CAAQ,GAAG,KAc1CE,GAAoB,CAAC,CAChC,QAAAC,EACA,SAAAC,CACF,IAGoB,CAClB,GAAM,CAAE,QAAAL,EAAS,yBAAAM,CAAyB,EAAID,EAE9C,OAAOD,EAAQ,OAAO,CAAC,CAAE,wBAAAG,EAAyB,SAAAN,CAAS,IAAkB,CAC3E,IAAMO,EACJD,EAA0BD,EAEtBG,EACJT,EAAQ,KACN,CAAC,CAAE,SAAUU,CAAe,IAAcA,IAAmBT,CAC/D,IAAM,OAER,OAAOO,GAAwBC,CACjC,CAAC,CACH,EASaE,GAAiB,CAAC,CAC7B,QAAAP,EACA,SAAAC,CACF,IAIED,EAAQ,OACLQ,GACCb,GAAyB,CAAE,SAAAM,EAAU,OAAAO,CAAO,CAAC,IAAM,GACnDT,GAAkB,CAAE,QAAAC,EAAS,SAAAC,CAAS,CAAC,EAAE,KACvC,CAAC,CAAE,SAAUQ,CAAmB,IAC9BA,IAAuBD,EAAO,QAClC,IAAM,MACV,EASWE,GAAe,CAAC,CAC3B,QAAAV,EACA,SAAAC,CACF,IAIED,EAAQ,OACLQ,GACCb,GAAyB,CAAE,SAAAM,EAAU,OAAAO,CAAO,CAAC,IAAM,CACvD",
  "names": ["NeuronState", "Topic", "ProposalRewardStatus", "ProposalStatus", "Vote", "NnsFunction", "NeuronType", "LogVisibility", "CanisterAction", "NeuronVisibility", "CanisterInstallMode", "principalToAccountIdentifier", "assertNonNullish", "createServices", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "GovernanceTestCanister", "_GovernanceTestCanister", "canisterId", "certifiedService", "options", "MAINNET_GOVERNANCE_CANISTER_ID", "createServices", "idlFactory", "neuron", "assertNonNullish", "rawListNeuronsRequest", "fromListNeurons", "currentNeuron", "principalToAccountIdentifier", "rawNeuron", "toRawNeuron", "getNeuronVoteForProposal", "ballots", "neuronId", "id", "ineligibleNeurons", "neurons", "proposal", "proposalTimestampSeconds", "createdTimestampSeconds", "createdSinceProposal", "dissolveTooShort", "ballotNeuronId", "votableNeurons", "neuron", "ineligibleNeuronId", "votedNeurons"]
}
