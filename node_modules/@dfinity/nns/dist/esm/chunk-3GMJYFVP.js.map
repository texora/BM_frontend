{
  "version": 3,
  "sources": ["../../src/sns_wasm.canister.ts", "../../candid/sns_wasm.certified.idl.js", "../../candid/sns_wasm.idl.js"],
  "sourcesContent": ["import { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type {\n  DeployedSns,\n  _SERVICE as SnsWasmService,\n} from \"../candid/sns_wasm\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/sns_wasm.certified.idl\";\nimport { idlFactory } from \"../candid/sns_wasm.idl\";\nimport { MAINNET_SNS_WASM_CANISTER_ID } from \"./constants/canister_ids\";\n\nexport class SnsWasmCanister {\n  private constructor(\n    private readonly service: SnsWasmService,\n    private readonly certifiedService: SnsWasmService,\n  ) {}\n\n  public static create(options: CanisterOptions<SnsWasmService> = {}) {\n    const { service, certifiedService } = createServices<SnsWasmService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_SNS_WASM_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new SnsWasmCanister(service, certifiedService);\n  }\n\n  public listSnses = async ({\n    certified = true,\n  }: {\n    certified?: boolean;\n  }): Promise<DeployedSns[]> => {\n    const service = certified ? this.certifiedService : this.service;\n\n    const { instances } = await service.list_deployed_snses({});\n    return instances;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const LinearScalingCoefficient = IDL.Record({\n    'slope_numerator' : IDL.Opt(IDL.Nat64),\n    'intercept_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'from_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'slope_denominator' : IDL.Opt(IDL.Nat64),\n    'to_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipationConstraints = IDL.Record({\n    'coefficient_intervals' : IDL.Vec(LinearScalingCoefficient),\n    'max_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_threshold_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participation_constraints' : IDL.Opt(\n      NeuronsFundParticipationConstraints\n    ),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdRequest = IDL.Record({\n    'proposal_id' : IDL.Nat64,\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'DeployedSns' : DeployedSns,\n  });\n  const GetDeployedSnsByProposalIdResponse = IDL.Record({\n    'get_deployed_sns_by_proposal_id_result' : IDL.Opt(\n      GetDeployedSnsByProposalIdResult\n    ),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetProposalIdThatAddedWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetProposalIdThatAddedWasmResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const GetWasmMetadataRequest = IDL.Record({\n    'hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const MetadataSection = IDL.Record({\n    'contents' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Opt(IDL.Text),\n    'visibility' : IDL.Opt(IDL.Text),\n  });\n  const Ok = IDL.Record({ 'sections' : IDL.Vec(MetadataSection) });\n  const Result_1 = IDL.Variant({ 'Ok' : Ok, 'Error' : SnsWasmError });\n  const GetWasmMetadataResponse = IDL.Record({ 'result' : IDL.Opt(Result_1) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        [],\n      ),\n    'get_deployed_sns_by_proposal_id' : IDL.Func(\n        [GetDeployedSnsByProposalIdRequest],\n        [GetDeployedSnsByProposalIdResponse],\n        [],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        [],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        [],\n      ),\n    'get_proposal_id_that_added_wasm' : IDL.Func(\n        [GetProposalIdThatAddedWasmRequest],\n        [GetProposalIdThatAddedWasmResponse],\n        [],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        [],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], []),\n    'get_wasm_metadata' : IDL.Func(\n        [GetWasmMetadataRequest],\n        [GetWasmMetadataResponse],\n        [],\n      ),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        [],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        [],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const LinearScalingCoefficient = IDL.Record({\n    'slope_numerator' : IDL.Opt(IDL.Nat64),\n    'intercept_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'from_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'slope_denominator' : IDL.Opt(IDL.Nat64),\n    'to_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipationConstraints = IDL.Record({\n    'coefficient_intervals' : IDL.Vec(LinearScalingCoefficient),\n    'max_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_threshold_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participation_constraints' : IDL.Opt(\n      NeuronsFundParticipationConstraints\n    ),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdRequest = IDL.Record({\n    'proposal_id' : IDL.Nat64,\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'DeployedSns' : DeployedSns,\n  });\n  const GetDeployedSnsByProposalIdResponse = IDL.Record({\n    'get_deployed_sns_by_proposal_id_result' : IDL.Opt(\n      GetDeployedSnsByProposalIdResult\n    ),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetProposalIdThatAddedWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetProposalIdThatAddedWasmResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const GetWasmMetadataRequest = IDL.Record({\n    'hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const MetadataSection = IDL.Record({\n    'contents' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Opt(IDL.Text),\n    'visibility' : IDL.Opt(IDL.Text),\n  });\n  const Ok = IDL.Record({ 'sections' : IDL.Vec(MetadataSection) });\n  const Result_1 = IDL.Variant({ 'Ok' : Ok, 'Error' : SnsWasmError });\n  const GetWasmMetadataResponse = IDL.Record({ 'result' : IDL.Opt(Result_1) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        ['query'],\n      ),\n    'get_deployed_sns_by_proposal_id' : IDL.Func(\n        [GetDeployedSnsByProposalIdRequest],\n        [GetDeployedSnsByProposalIdResponse],\n        ['query'],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        ['query'],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        ['query'],\n      ),\n    'get_proposal_id_that_added_wasm' : IDL.Func(\n        [GetProposalIdThatAddedWasmRequest],\n        [GetProposalIdThatAddedWasmResponse],\n        ['query'],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        ['query'],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], ['query']),\n    'get_wasm_metadata' : IDL.Func(\n        [GetWasmMetadataRequest],\n        [GetWasmMetadataResponse],\n        ['query'],\n      ),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        ['query'],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        ['query'],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n"],
  "mappings": "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",
  "names": ["createServices", "idlFactory", "IDL", "SnsWasmCanisterInitPayload", "SnsWasm", "AddWasmRequest", "SnsWasmError", "Result", "AddWasmResponse", "NeuronBasketConstructionParameters", "Canister", "DappCanisters", "LinearScalingCoefficient", "IdealMatchedParticipationFunction", "NeuronsFundParticipationConstraints", "TreasuryDistribution", "NeuronDistribution", "DeveloperDistribution", "AirdropDistribution", "SwapDistribution", "FractionalDeveloperVotingPower", "InitialTokenDistribution", "Countries", "SnsInitPayload", "DeployNewSnsRequest", "DappCanistersTransferResult", "SnsCanisterIds", "DeployNewSnsResponse", "GetAllowedPrincipalsResponse", "GetDeployedSnsByProposalIdRequest", "DeployedSns", "GetDeployedSnsByProposalIdResult", "GetDeployedSnsByProposalIdResponse", "SnsVersion", "GetNextSnsVersionRequest", "GetNextSnsVersionResponse", "GetProposalIdThatAddedWasmRequest", "GetProposalIdThatAddedWasmResponse", "GetSnsSubnetIdsResponse", "GetWasmRequest", "GetWasmResponse", "GetWasmMetadataRequest", "MetadataSection", "Ok", "Result_1", "GetWasmMetadataResponse", "SnsUpgrade", "InsertUpgradePathEntriesRequest", "InsertUpgradePathEntriesResponse", "ListDeployedSnsesResponse", "ListUpgradeStepsRequest", "PrettySnsVersion", "ListUpgradeStep", "ListUpgradeStepsResponse", "UpdateAllowedPrincipalsRequest", "UpdateAllowedPrincipalsResult", "UpdateAllowedPrincipalsResponse", "UpdateSnsSubnetListRequest", "UpdateSnsSubnetListResponse", "idlFactory", "IDL", "SnsWasmCanisterInitPayload", "SnsWasm", "AddWasmRequest", "SnsWasmError", "Result", "AddWasmResponse", "NeuronBasketConstructionParameters", "Canister", "DappCanisters", "LinearScalingCoefficient", "IdealMatchedParticipationFunction", "NeuronsFundParticipationConstraints", "TreasuryDistribution", "NeuronDistribution", "DeveloperDistribution", "AirdropDistribution", "SwapDistribution", "FractionalDeveloperVotingPower", "InitialTokenDistribution", "Countries", "SnsInitPayload", "DeployNewSnsRequest", "DappCanistersTransferResult", "SnsCanisterIds", "DeployNewSnsResponse", "GetAllowedPrincipalsResponse", "GetDeployedSnsByProposalIdRequest", "DeployedSns", "GetDeployedSnsByProposalIdResult", "GetDeployedSnsByProposalIdResponse", "SnsVersion", "GetNextSnsVersionRequest", "GetNextSnsVersionResponse", "GetProposalIdThatAddedWasmRequest", "GetProposalIdThatAddedWasmResponse", "GetSnsSubnetIdsResponse", "GetWasmRequest", "GetWasmResponse", "GetWasmMetadataRequest", "MetadataSection", "Ok", "Result_1", "GetWasmMetadataResponse", "SnsUpgrade", "InsertUpgradePathEntriesRequest", "InsertUpgradePathEntriesResponse", "ListDeployedSnsesResponse", "ListUpgradeStepsRequest", "PrettySnsVersion", "ListUpgradeStep", "ListUpgradeStepsResponse", "UpdateAllowedPrincipalsRequest", "UpdateAllowedPrincipalsResult", "UpdateAllowedPrincipalsResponse", "UpdateSnsSubnetListRequest", "UpdateSnsSubnetListResponse", "SnsWasmCanister", "_SnsWasmCanister", "service", "certifiedService", "certified", "instances", "options", "createServices", "MAINNET_SNS_WASM_CANISTER_ID", "idlFactory"]
}
