{
  "version": 3,
  "sources": ["../../../../node_modules/randombytes/index.js", "../../src/index.ts", "../../src/enums/governance.enums.ts", "../../src/errors/governance.errors.ts", "../../src/genesis_token.canister.ts", "../../candid/genesis_token.certified.idl.js", "../../candid/genesis_token.idl.js", "../../src/constants/canister_ids.ts", "../../src/governance.canister.ts", "../../../../node_modules/@noble/hashes/src/_assert.ts", "../../../../node_modules/@noble/hashes/src/utils.ts", "../../../../node_modules/@noble/hashes/src/_md.ts", "../../../../node_modules/@noble/hashes/src/sha256.ts", "../../candid/governance.certified.idl.js", "../../candid/governance.idl.js", "../../candid/old_list_neurons_service.certified.idl.js", "../../src/canisters/governance/request.converters.ts", "../../src/canisters/governance/response.converters.ts", "../../src/canisters/governance/services.ts", "../../src/constants/constants.ts", "../../src/governance_test.canister.ts", "../../candid/governance_test.certified.idl.js", "../../src/sns_wasm.canister.ts", "../../candid/sns_wasm.certified.idl.js", "../../candid/sns_wasm.idl.js", "../../src/utils/neurons.utils.ts"],
  "sourcesContent": ["module.exports = require('crypto').randomBytes\n", "export type { RewardEvent } from \"../candid/governance\";\nexport type { DeployedSns } from \"../candid/sns_wasm\";\nexport * from \"./enums/governance.enums\";\nexport * from \"./errors/governance.errors\";\nexport { GenesisTokenCanister } from \"./genesis_token.canister\";\nexport { GovernanceCanister } from \"./governance.canister\";\nexport { GovernanceTestCanister } from \"./governance_test.canister\";\nexport { SnsWasmCanister } from \"./sns_wasm.canister\";\nexport * from \"./types/common\";\nexport * from \"./types/governance.options\";\nexport * from \"./types/governance_converters\";\nexport type { SnsWasmCanisterOptions } from \"./types/sns_wasm.options\";\nexport * from \"./utils/neurons.utils\";\n", "// The Candid files are generated from Proto. That's why the enums are currently lost in the conversion process.\n// These enums are used to map back numbers provided by the backend through the Candid declaration.\n// We use Pascal case for consistency reason.\n//\n// Proto source: https://github.com/dfinity/ic/blob/master/rs/nns/governance/proto/ic_nns_governance/pb/v1/governance.proto\n\nexport enum NeuronState {\n  Unspecified = 0,\n  Locked = 1,\n  Dissolving = 2,\n  Dissolved = 3,\n  Spawning = 4,\n}\n\nexport enum Topic {\n  Unspecified = 0,\n  NeuronManagement = 1,\n  ExchangeRate = 2,\n  NetworkEconomics = 3,\n  Governance = 4,\n  NodeAdmin = 5,\n  ParticipantManagement = 6,\n  SubnetManagement = 7,\n  NetworkCanisterManagement = 8,\n  Kyc = 9,\n  NodeProviderRewards = 10,\n  /**\n   * @deprecated\n   */\n  SnsDecentralizationSale = 11,\n  IcOsVersionDeployment = 12,\n  IcOsVersionElection = 13,\n  SnsAndCommunityFund = 14,\n  ApiBoundaryNodeManagement = 15,\n  SubnetRental = 16,\n  ProtocolCanisterManagement = 17,\n  ServiceNervousSystemManagement = 18,\n}\n\n// The proposal status, with respect to reward distribution.\n// See also ProposalStatus.\nexport enum ProposalRewardStatus {\n  Unknown = 0,\n\n  // The proposal still accept votes, for the purpose of\n  // vote rewards. This implies nothing on the ProposalStatus.\n  AcceptVotes = 1,\n\n  // The proposal no longer accepts votes. It is due to settle\n  // at the next reward event.\n  ReadyToSettle = 2,\n\n  // The proposal has been taken into account in a reward event.\n  Settled = 3,\n\n  // The proposal is not eligible to be taken into account in a reward event.\n  Ineligible = 4,\n}\n\n// The proposal status, with respect to decision making and execution.\n// See also ProposalRewardStatus.\nexport enum ProposalStatus {\n  Unknown = 0,\n\n  // A decision (accept/reject) has yet to be made.\n  Open = 1,\n\n  // The proposal has been rejected.\n  Rejected = 2,\n\n  // The proposal has been accepted. At this time, either execution\n  // as not yet started, or it has but the outcome is not yet known.\n  Accepted = 3,\n\n  // The proposal was accepted and successfully executed.\n  Executed = 4,\n\n  // The proposal was accepted, but execution failed.\n  Failed = 5,\n}\n\nexport enum Vote {\n  Unspecified = 0,\n  Yes = 1,\n  No = 2,\n}\n\nexport enum NnsFunction {\n  Unspecified = 0,\n  CreateSubnet = 1,\n  AddNodeToSubnet = 2,\n  NnsCanisterInstall = 3,\n  NnsCanisterUpgrade = 4,\n  BlessReplicaVersion = 5,\n  RecoverSubnet = 6,\n  UpdateConfigOfSubnet = 7,\n  AssignNoid = 8,\n  NnsRootUpgrade = 9,\n  IcpXdrConversionRate = 10,\n  DeployGuestosToAllSubnetNodes = 11,\n  ClearProvisionalWhitelist = 12,\n  RemoveNodesFromSubnet = 13,\n  SetAuthorizedSubnetworks = 14,\n  SetFirewallConfig = 15,\n  UpdateNodeOperatorConfig = 16,\n  StopOrStartNnsCanister = 17,\n  RemoveNodes = 18,\n  UninstallCode = 19,\n  UpdateNodeRewardsTable = 20,\n  AddOrRemoveDataCenters = 21,\n  UpdateUnassignedNodesConfig = 22,\n  RemoveNodeOperators = 23,\n  RerouteCanisterRanges = 24,\n  AddFirewallRules = 25,\n  RemoveFirewallRules = 26,\n  UpdateFirewallRules = 27,\n  PrepareCanisterMigration = 28,\n  CompleteCanisterMigration = 29,\n  AddSnsWasm = 30,\n  ChangeSubnetMembership = 31,\n  UpdateSubnetType = 32,\n  ChangeSubnetTypeAssignment = 33,\n  UpdateSnsWasmSnsSubnetIds = 34,\n  UpdateAllowedPrincipals = 35,\n  RetireReplicaVersion = 36,\n  InsertSnsWasmUpgradePathEntries = 37,\n  ReviseElectedGuestosVersions = 38,\n  BitcoinSetConfig = 39,\n  UpdateElectedHostosVersions = 40,\n  UpdateNodesHostosVersion = 41,\n  HardResetNnsRootToVersion = 42,\n  AddApiBoundaryNodes = 43,\n  RemoveApiBoundaryNodes = 44,\n  /**\n   * @deprecated\n   */\n  UpdateApiBoundaryNodeDomain = 45,\n  UpdateApiBoundaryNodesVersion = 46,\n  DeployGuestosToSomeApiBoundaryNodes = 47,\n  DeployGuestosToAllUnassignedNodes = 48,\n  UpdateSshReadOnlyAccessForAllUnassignedNodes = 49,\n  ReviseElectedHostosVersions = 50,\n  DeployHostosToSomeNodes = 51,\n  SubnetRentalRequest = 52,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/f4b2e28525ae9b030bd9edfc982e796417db2b80/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L3286-L3287\nexport enum NeuronType {\n  // Placeholder value due to the proto3 requirement for a zero default.\n  // This is an invalid type; neurons should not be assigned this value.\n  Unspecified = 0,\n  // Represents neurons initially created for Seed accounts in the\n  // Genesis Token Canister, or those descended from such neurons.\n  Seed = 1,\n  // Represents neurons initially created for Early Contributor Token (ECT)\n  // accounts in the Genesis Token Canister, or those descended from such neurons.\n  Ect = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2506-L2512\nexport enum LogVisibility {\n  Unspecified = 0,\n  /// The log is visible to the controllers of the dapp canister.\n  Controllers = 1,\n  /// The log is visible to the public.\n  Public = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2419-L2423\nexport enum CanisterAction {\n  Unspecified = 0,\n  // Stop a canister.\n  Stop = 1,\n  // Start a canister.\n  Start = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L3929-L3958\nexport enum NeuronVisibility {\n  Unspecified = 0,\n  Private = 1,\n  Public = 2,\n}\n\n// Reference: https://github.com/dfinity/ic/blob/3b3ffedc6aa481fd9b92eefaf46beded9e51a344/rs/nns/governance/src/gen/ic_nns_governance.pb.v1.rs#L2354-L2359\nexport enum CanisterInstallMode {\n  Unspecified = 0,\n  Install = 1,\n  Reinstall = 2,\n  Upgrade = 3,\n}\n", "import type { GovernanceError as GovernanceErrorDetail } from \"../../candid/governance\";\n\nexport abstract class StakeNeuronError extends Error {}\n\nexport class CouldNotClaimNeuronError extends StakeNeuronError {}\n\nexport class InsufficientAmountError extends StakeNeuronError {\n  constructor(public readonly minimumAmount: bigint) {\n    super();\n  }\n}\n\nexport class UnrecognizedTypeError extends Error {}\nexport class GovernanceError extends Error {\n  constructor(public readonly detail: GovernanceErrorDetail) {\n    super();\n  }\n}\n\n/**\n * An error used to ensure at compile-time that it's never reached.\n */\nexport class UnsupportedValueError extends Error {\n  constructor(value: never) {\n    super(\"Unsupported value: \" + value);\n  }\n}\n", "import type { ActorSubclass } from \"@dfinity/agent\";\nimport { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type { _SERVICE as GenesisTokenService } from \"../candid/genesis_token\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/genesis_token.certified.idl\";\nimport { idlFactory } from \"../candid/genesis_token.idl\";\nimport { MAINNET_GENESIS_TOKEN_CANISTER_ID } from \"./constants/canister_ids\";\nimport type { NeuronId } from \"./types/common\";\n\nexport class GenesisTokenCanister {\n  private constructor(\n    private readonly service: ActorSubclass<GenesisTokenService>,\n  ) {}\n\n  public static create(options: CanisterOptions<GenesisTokenService> = {}) {\n    const { service } = createServices<GenesisTokenService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_GENESIS_TOKEN_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new GenesisTokenCanister(service);\n  }\n\n  public claimNeurons = async ({\n    hexPubKey,\n  }: {\n    hexPubKey: string;\n  }): Promise<NeuronId[]> => {\n    const response = await this.service.claim_neurons(hexPubKey);\n    if (\"Ok\" in response) {\n      return response.Ok.map((neuronId) => neuronId.id);\n    }\n\n    throw new Error(response.Err);\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], []),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], []),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'len' : IDL.Func([], [IDL.Nat16], []),\n    'total' : IDL.Func([], [IDL.Nat32], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], ['query']),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], ['query']),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'len' : IDL.Func([], [IDL.Nat16], ['query']),\n    'total' : IDL.Func([], [IDL.Nat32], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "import { Principal } from \"@dfinity/principal\";\n\nexport const GOVERNANCE_CANISTER_ID = Principal.fromText(\n  \"rrkah-fqaaa-aaaaa-aaaaq-cai\",\n);\n\nexport const MAINNET_GOVERNANCE_CANISTER_ID = Principal.fromText(\n  \"rrkah-fqaaa-aaaaa-aaaaq-cai\",\n);\n\nexport const MAINNET_GENESIS_TOKEN_CANISTER_ID = Principal.fromText(\n  \"renrk-eyaaa-aaaaa-aaada-cai\",\n);\n\n// TODO(L2-828): Sns-wasm canister is not yet deployed on mainnet\nexport const MAINNET_SNS_WASM_CANISTER_ID = Principal.fromText(\n  \"r7inp-6aaaa-aaaaa-aaabq-cai\",\n);\n", "import type { ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { LedgerCanister } from \"@dfinity/ledger-icp\";\nimport {\n  AccountIdentifier,\n  SubAccount,\n  checkAccountId,\n} from \"@dfinity/ledger-icp\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  arrayOfNumberToUint8Array,\n  asciiStringToByteArray,\n  assertPercentageNumber,\n  createServices,\n  fromNullable,\n  isNullish,\n  nonNullish,\n  uint8ArrayToBigInt,\n} from \"@dfinity/utils\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport randomBytes from \"randombytes\";\nimport type {\n  Command_1,\n  _SERVICE as GovernanceService,\n  ListProposalInfo,\n  MergeResponse,\n  Neuron as RawNeuron,\n  NeuronInfo as RawNeuronInfo,\n  ProposalInfo as RawProposalInfo,\n  RewardEvent,\n} from \"../candid/governance\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/governance.certified.idl\";\nimport { idlFactory } from \"../candid/governance.idl\";\nimport { idlFactory as oldListNeuronsCertifiedIdlFactory } from \"../candid/old_list_neurons_service.certified.idl\";\nimport {\n  fromClaimOrRefreshNeuronRequest,\n  fromListNeurons,\n  fromListProposalsRequest,\n  toAddHotkeyRequest,\n  toAutoStakeMaturityRequest,\n  toClaimOrRefreshRequest,\n  toDisburseNeuronRequest,\n  toIncreaseDissolveDelayRequest,\n  toJoinCommunityFundRequest,\n  toLeaveCommunityFundRequest,\n  toMakeProposalRawRequest,\n  toManageNeuronsFollowRequest,\n  toMergeMaturityRequest,\n  toMergeRequest,\n  toRegisterVoteRequest,\n  toRemoveHotkeyRequest,\n  toSetDissolveDelayRequest,\n  toSetVisibilityRequest,\n  toSpawnNeuronRequest,\n  toSplitRawRequest,\n  toStakeMaturityRequest,\n  toStartDissolvingRequest,\n  toStopDissolvingRequest,\n} from \"./canisters/governance/request.converters\";\nimport {\n  toArrayOfNeuronInfo,\n  toListProposalsResponse,\n  toNeuronInfo,\n  toProposalInfo,\n} from \"./canisters/governance/response.converters\";\nimport {\n  getSuccessfulCommandFromResponse,\n  manageNeuron,\n  simulateManageNeuron,\n} from \"./canisters/governance/services\";\nimport { MAINNET_GOVERNANCE_CANISTER_ID } from \"./constants/canister_ids\";\nimport { E8S_PER_TOKEN } from \"./constants/constants\";\nimport type { NeuronVisibility, Vote } from \"./enums/governance.enums\";\nimport {\n  CouldNotClaimNeuronError,\n  GovernanceError,\n  InsufficientAmountError,\n  UnrecognizedTypeError,\n} from \"./errors/governance.errors\";\nimport type { E8s, NeuronId } from \"./types/common\";\nimport type { GovernanceCanisterOptions } from \"./types/governance.options\";\nimport type {\n  ClaimOrRefreshNeuronRequest,\n  FollowRequest,\n  KnownNeuron,\n  ListProposalsRequest,\n  ListProposalsResponse,\n  MakeProposalRequest,\n  NeuronInfo,\n  ProposalId,\n  ProposalInfo,\n} from \"./types/governance_converters\";\n\nexport class GovernanceCanister {\n  private constructor(\n    private readonly canisterId: Principal,\n    private readonly service: ActorSubclass<GovernanceService>,\n    private readonly certifiedService: ActorSubclass<GovernanceService>,\n    private readonly oldListNeuronsCertifiedService: ActorSubclass<GovernanceService>,\n    private readonly agent: Agent,\n  ) {\n    this.canisterId = canisterId;\n    this.service = service;\n    this.certifiedService = certifiedService;\n    this.oldListNeuronsCertifiedService = oldListNeuronsCertifiedService;\n    this.agent = agent;\n  }\n\n  public static create(options: GovernanceCanisterOptions = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_GOVERNANCE_CANISTER_ID;\n\n    const { service, certifiedService, agent } =\n      createServices<GovernanceService>({\n        options: {\n          ...options,\n          canisterId,\n        },\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    const oldListNeuronsCertifiedService =\n      options.oldListNeuronsServiceOverride ??\n      Actor.createActor<GovernanceService>(oldListNeuronsCertifiedIdlFactory, {\n        agent,\n        canisterId,\n      });\n\n    return new GovernanceCanister(\n      canisterId,\n      service,\n      certifiedService,\n      oldListNeuronsCertifiedService,\n      agent,\n    );\n  }\n\n  /**\n   * Returns the list of neurons controlled by the caller.\n   *\n   * If an array of neuron IDs is provided, precisely those neurons will be fetched.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * The backend treats `includeEmptyNeurons` as true if absent.\n   */\n  public listNeurons = async ({\n    certified = true,\n    neuronIds,\n    includeEmptyNeurons,\n    includePublicNeurons,\n  }: {\n    certified: boolean;\n    neuronIds?: NeuronId[];\n    includeEmptyNeurons?: boolean;\n    includePublicNeurons?: boolean;\n  }): Promise<NeuronInfo[]> => {\n    const rawRequest = fromListNeurons({\n      neuronIds,\n      includeEmptyNeurons,\n      includePublicNeurons,\n    });\n    // The Ledger app version 2.4.9 does not support\n    // include_empty_neurons_readable_by_caller nor include_public_neurons_in_full_neurons,\n    // even when the field is absent,\n    // so we use the old service (which does not have these fields) if possible,\n    // in case the call will be signed by the Ledger device. We only have a\n    // certified version of the old service.\n    const useOldMethod =\n      isNullish(includeEmptyNeurons) &&\n      isNullish(includePublicNeurons) &&\n      certified;\n    const service = useOldMethod\n      ? this.oldListNeuronsCertifiedService\n      : this.getGovernanceService(certified);\n    const raw_response = await service.list_neurons(rawRequest);\n    return toArrayOfNeuronInfo({\n      response: raw_response,\n      canisterId: this.canisterId,\n    });\n  };\n\n  /**\n   * Returns the list of neurons who have been approved by the community to\n   * appear as the default followee options.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public listKnownNeurons = async (\n    certified = true,\n  ): Promise<KnownNeuron[]> => {\n    const response =\n      await this.getGovernanceService(certified).list_known_neurons();\n\n    return response.known_neurons.map((n) => ({\n      id: fromNullable(n.id)?.id ?? BigInt(0),\n      name: fromNullable(n.known_neuron_data)?.name ?? \"\",\n      description: fromNullable(\n        fromNullable(n.known_neuron_data)?.description ?? [],\n      ),\n    }));\n  };\n\n  /**\n   * Returns the latest reward event.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it's fetched using a query call.\n   *\n   */\n  public getLastestRewardEvent = async (\n    certified = true,\n  ): Promise<RewardEvent> => {\n    return this.getGovernanceService(certified).get_latest_reward_event();\n  };\n\n  /**\n   * Returns the list of proposals made for the community to vote on,\n   * paginated and filtered by the request.\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @param request the options to list the proposals (limit number of results, topics to search for, etc.)\n   * @param certified query or update calls\n   */\n  public listProposals = async ({\n    request,\n    certified = true,\n  }: {\n    request: ListProposalsRequest;\n    certified?: boolean;\n  }): Promise<ListProposalsResponse> => {\n    const rawRequest: ListProposalInfo = fromListProposalsRequest(request);\n    const rawResponse =\n      await this.getGovernanceService(certified).list_proposals(rawRequest);\n    return toListProposalsResponse(rawResponse);\n  };\n\n  /**\n   * @throws {@link InsufficientAmountError}\n   * @throws {@link StakeNeuronTransferError}\n   * @throws {@link CouldNotClaimNeuronError}\n   * @throws {@link TransferError}\n   */\n  public stakeNeuron = async ({\n    stake,\n    principal,\n    fromSubAccount,\n    ledgerCanister,\n    createdAt,\n    fee,\n  }: {\n    stake: bigint;\n    principal: Principal;\n    fromSubAccount?: number[];\n    ledgerCanister: LedgerCanister;\n    // Used for the TransferRequest parameters.\n    // Check the TransferRequest type for more information.\n    createdAt?: bigint;\n    fee?: E8s;\n  }): Promise<NeuronId> => {\n    if (stake < E8S_PER_TOKEN) {\n      throw new InsufficientAmountError(stake);\n    }\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const nonce = uint8ArrayToBigInt(nonceBytes);\n    const toSubAccount = this.buildNeuronStakeSubAccount(nonceBytes, principal);\n    const accountIdentifier = AccountIdentifier.fromPrincipal({\n      principal: this.canisterId,\n      subAccount: toSubAccount,\n    });\n\n    // Send amount to the ledger.\n    await ledgerCanister.transfer({\n      memo: nonce,\n      amount: stake,\n      fromSubAccount,\n      to: accountIdentifier,\n      createdAt,\n      fee,\n    });\n\n    // Notify the governance of the transaction so that the neuron is created.\n    const neuronId: NeuronId | undefined =\n      await this.claimOrRefreshNeuronFromAccount({\n        controller: principal,\n        memo: nonce,\n      });\n\n    // Typescript was complaining with `neuronId || new NeuronNotFound()`:\n    // \"Type 'undefined' is not assignable to type 'bigint | StakeNeuronError | TransferError'\"\n    // hence the explicit check.\n    if (isNullish(neuronId)) {\n      throw new CouldNotClaimNeuronError();\n    }\n\n    return neuronId;\n  };\n\n  // TODO: Rename to and replace `stakeNeuron` once `stakeNeuronIcrc1` is tested\n  // in NNS dapp.\n  // Note: Ledger HW does currently (2023-09-20) not support ICRC-1 transfers to\n  // the governance canister.\n  /**\n   * @throws {@link InsufficientAmountError}\n   * @throws {@link StakeNeuronTransferError}\n   * @throws {@link CouldNotClaimNeuronError}\n   * @throws {@link TransferError}\n   */\n  public stakeNeuronIcrc1 = async ({\n    stake,\n    principal,\n    fromSubAccount,\n    ledgerCanister,\n    createdAt,\n    fee,\n  }: {\n    stake: bigint;\n    principal: Principal;\n    fromSubAccount?: Uint8Array;\n    ledgerCanister: LedgerCanister;\n    // Used for the TransferRequest parameters.\n    // Check the TransferRequest type for more information.\n    createdAt?: bigint;\n    fee?: E8s;\n  }): Promise<NeuronId> => {\n    if (stake < E8S_PER_TOKEN) {\n      throw new InsufficientAmountError(stake);\n    }\n\n    const nonceBytes = new Uint8Array(randomBytes(8));\n    const nonce = uint8ArrayToBigInt(nonceBytes);\n    const toSubAccount = this.getNeuronStakeSubAccountBytes(\n      nonceBytes,\n      principal,\n    );\n\n    // Send amount to the ledger.\n    await ledgerCanister.icrc1Transfer({\n      // WARNING: This does not set the same memo field as the stakeNeuron\n      // function above and would need to be handled separately from that field.\n      icrc1Memo: nonceBytes,\n      amount: stake,\n      fromSubAccount,\n      to: {\n        owner: this.canisterId,\n        subaccount: [toSubAccount],\n      },\n      createdAt,\n      fee,\n    });\n\n    // Notify the governance of the transaction so that the neuron is created.\n    const neuronId: NeuronId | undefined =\n      await this.claimOrRefreshNeuronFromAccount({\n        controller: principal,\n        memo: nonce,\n      });\n\n    // Typescript was complaining with `neuronId || new NeuronNotFound()`:\n    // \"Type 'undefined' is not assignable to type 'bigint | StakeNeuronError | TransferError'\"\n    // hence the explicit check.\n    if (isNullish(neuronId)) {\n      throw new CouldNotClaimNeuronError();\n    }\n\n    return neuronId;\n  };\n\n  /**\n   * Increases dissolve delay of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public increaseDissolveDelay = async ({\n    neuronId,\n    additionalDissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    additionalDissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const request = toIncreaseDissolveDelayRequest({\n      neuronId,\n      additionalDissolveDelaySeconds,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets dissolve delay of a neuron.\n   * The new date is now + dissolveDelaySeconds.\n   *\n   * @param {NeuronId} neuronId\n   * @param {number} dissolveDelaySeconds\n   * @throws {@link GovernanceError}\n   */\n  public setDissolveDelay = async ({\n    neuronId,\n    dissolveDelaySeconds,\n  }: {\n    neuronId: NeuronId;\n    dissolveDelaySeconds: number;\n  }): Promise<void> => {\n    const request = toSetDissolveDelayRequest({\n      neuronId,\n      dissolveDelaySeconds,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Start dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public startDissolving = async (neuronId: NeuronId): Promise<void> => {\n    const request = toStartDissolvingRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stop dissolving process of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public stopDissolving = async (neuronId: NeuronId): Promise<void> => {\n    const request = toStopDissolvingRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Neuron joins the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public joinCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    const request = toJoinCommunityFundRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Changes auto-stake maturity for this Neuron. While on, auto-stake maturity will cause all the maturity generated by voting rewards to this neuron to be automatically staked and contribute to the voting power of the neuron.\n   *\n   * @param {neuronId: NeuronId; autoStake: boolean;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to request a change of the auto stake feature\n   * @param {number} autoStake `true` to enable the auto-stake maturity for this neuron, `false` to turn it off\n   *\n   * @throws {@link GovernanceError}\n   */\n  public autoStakeMaturity = async (params: {\n    neuronId: NeuronId;\n    autoStake: boolean;\n  }): Promise<void> => {\n    await manageNeuron({\n      request: toAutoStakeMaturityRequest(params),\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Neuron leaves the community fund\n   *\n   * @throws {@link GovernanceError}\n   */\n  public leaveCommunityFund = async (neuronId: NeuronId): Promise<void> => {\n    const request = toLeaveCommunityFundRequest(neuronId);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Set visibility of a neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public setVisibility = async (\n    neuronId: NeuronId,\n    visibility: NeuronVisibility,\n  ): Promise<void> => {\n    const request = toSetVisibilityRequest({ neuronId, visibility });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Sets node provider reward account.\n   * Where the reward is paid to.\n   *\n   * @param {string} accountIdentifier\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public setNodeProviderAccount = async (\n    accountIdentifier: string,\n  ): Promise<void> => {\n    // Might throw InvalidAccountIDError\n    checkAccountId(accountIdentifier);\n    const account = AccountIdentifier.fromHex(accountIdentifier);\n    const response = await this.certifiedService.update_node_provider({\n      reward_account: [account.toAccountIdentifierHash()],\n    });\n\n    if (\"Err\" in response) {\n      throw new GovernanceError(response.Err);\n    }\n  };\n\n  /**\n   * Merge two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public mergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<void> => {\n    const rawRequest = toMergeRequest(request);\n\n    await manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Simulate merging two neurons\n   *\n   * @throws {@link GovernanceError}\n   */\n  public simulateMergeNeurons = async (request: {\n    sourceNeuronId: NeuronId;\n    targetNeuronId: NeuronId;\n  }): Promise<NeuronInfo> => {\n    const rawRequest = toMergeRequest(request);\n\n    const command = await simulateManageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n\n    let merge: MergeResponse | undefined;\n    let neuronInfo: RawNeuronInfo | undefined;\n    let rawNeuron: RawNeuron | undefined;\n    let neuronId: NeuronId | undefined;\n\n    if (\n      \"Merge\" in command &&\n      nonNullish((merge = command.Merge)) &&\n      nonNullish((neuronInfo = fromNullable(merge.target_neuron_info))) &&\n      nonNullish((rawNeuron = fromNullable(merge.target_neuron))) &&\n      nonNullish((neuronId = fromNullable(rawNeuron.id)?.id))\n    ) {\n      return toNeuronInfo({\n        neuronId,\n        neuronInfo,\n        rawNeuron,\n        canisterId: this.canisterId,\n      });\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `simulateMergeNeurons: Unrecognized Merge error in ${JSON.stringify(\n        command,\n      )}`,\n    );\n  };\n\n  /**\n   * Splits a neuron creating a new one\n   *\n   * @returns newNeuronId\n   * @throws {@link GovernanceError}\n   */\n  public splitNeuron = async ({\n    neuronId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    amount: bigint;\n  }): Promise<NeuronId> => {\n    const request = toSplitRawRequest({\n      neuronId,\n      amount,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n\n    if (\"Split\" in command) {\n      const neuron = fromNullable(command.Split.created_neuron_id);\n      if (isNullish(neuron)) {\n        // Edge case\n        throw new GovernanceError({\n          error_message:\n            \"Unexpected error splitting neuron. No neuronId in Split response.\",\n          error_type: 0,\n        });\n      }\n      return neuron.id;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Split error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Returns single proposal info\n   *\n   * If `certified` is true (default), the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   */\n  public getProposal = async ({\n    proposalId,\n    certified = true,\n  }: {\n    proposalId: bigint;\n    certified?: boolean;\n  }): Promise<ProposalInfo | undefined> => {\n    const [proposalInfo]: [] | [RawProposalInfo] =\n      await this.getGovernanceService(certified).get_proposal_info(proposalId);\n    return proposalInfo ? toProposalInfo(proposalInfo) : undefined;\n  };\n\n  /**\n   * Create new proposal\n   *\n   * @returns The newly created proposal ID or undefined if the success response returned by the Governance canister does not provide such information.\n   * @throws {@link GovernanceError}\n   */\n  public makeProposal = async (\n    request: MakeProposalRequest,\n  ): Promise<NeuronId | undefined> => {\n    const rawRequest = toMakeProposalRawRequest(request);\n\n    const cmd = await manageNeuron({\n      request: rawRequest,\n      service: this.certifiedService,\n    });\n\n    return \"MakeProposal\" in cmd\n      ? fromNullable(cmd.MakeProposal.proposal_id)?.id\n      : undefined;\n  };\n\n  /**\n   *\n   * Registers vote for a proposal from the neuron passed.\n   *\n   * @throws {@link GovernanceError}\n   */\n  public registerVote = async ({\n    neuronId,\n    vote,\n    proposalId,\n  }: {\n    neuronId: NeuronId;\n    vote: Vote;\n    proposalId: ProposalId;\n  }): Promise<void> => {\n    const request = toRegisterVoteRequest({ neuronId, vote, proposalId });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Edit neuron followees per topic\n   *\n   * @throws {@link GovernanceError}\n   */\n  public setFollowees = async (followRequest: FollowRequest): Promise<void> => {\n    const request = toManageNeuronsFollowRequest(followRequest);\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Disburse neuron on Account\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidAccountIDError}\n   */\n  public disburse = async ({\n    neuronId,\n    toAccountId,\n    amount,\n  }: {\n    neuronId: NeuronId;\n    toAccountId?: string;\n    amount?: E8s;\n  }): Promise<void> => {\n    if (nonNullish(toAccountId)) {\n      // Might throw InvalidAccountIDError\n      checkAccountId(toAccountId);\n    }\n    // TODO: Test that the new way also works for disbursements.\n    const toAccountIdentifier = nonNullish(toAccountId)\n      ? AccountIdentifier.fromHex(toAccountId)\n      : undefined;\n    const request = toDisburseNeuronRequest({\n      neuronId,\n      toAccountIdentifier,\n      amount,\n    });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public mergeMaturity = async ({\n    neuronId,\n    percentageToMerge,\n  }: {\n    neuronId: NeuronId;\n    percentageToMerge: number;\n  }): Promise<void> => {\n    // Might throw InvalidPercentageError\n    assertPercentageNumber(percentageToMerge);\n\n    const request = toMergeMaturityRequest({ neuronId, percentageToMerge });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Stake the maturity of a neuron.\n   *\n   * @param {neuronId: NeuronId; percentageToStake: number;} params\n   * @param {NeuronId} neuronId The id of the neuron for which to stake the maturity\n   * @param {number} percentageToStake Optional. Percentage of the current maturity to stake. If not provided, all of the neuron's current maturity will be staked.\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public stakeMaturity = async ({\n    neuronId,\n    percentageToStake,\n  }: {\n    neuronId: NeuronId;\n    percentageToStake?: number;\n  }): Promise<void> => {\n    assertPercentageNumber(percentageToStake ?? 100);\n\n    await manageNeuron({\n      request: toStakeMaturityRequest({ neuronId, percentageToStake }),\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Merge Maturity of a neuron\n   *\n   * @throws {@link GovernanceError}\n   * @throws {@link InvalidPercentageError}\n   *\n   */\n  public spawnNeuron = async ({\n    neuronId,\n    percentageToSpawn,\n    newController,\n    nonce,\n  }: {\n    neuronId: NeuronId;\n    percentageToSpawn?: number;\n    newController?: Principal;\n    nonce?: bigint;\n  }): Promise<bigint> => {\n    if (nonNullish(percentageToSpawn)) {\n      // Migth throw InvalidPercentageError\n      assertPercentageNumber(percentageToSpawn);\n    }\n\n    const request = toSpawnNeuronRequest({\n      neuronId,\n      percentageToSpawn,\n      newController,\n      nonce,\n    });\n\n    const response = await this.certifiedService.manage_neuron(request);\n    const command = getSuccessfulCommandFromResponse(response);\n    let createdNeuronId: NeuronId | undefined;\n\n    if (\n      \"Spawn\" in command &&\n      nonNullish(\n        (createdNeuronId = fromNullable(command.Spawn.created_neuron_id)?.id),\n      )\n    ) {\n      return createdNeuronId;\n    }\n\n    // Edge case\n    throw new UnrecognizedTypeError(\n      `Unrecognized Spawn error in ${JSON.stringify(response)}`,\n    );\n  };\n\n  /**\n   * Add hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public addHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const request = toAddHotkeyRequest({ neuronId, principal });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Remove hotkey to neuron\n   *\n   * @throws {@link GovernanceError}\n   */\n  public removeHotkey = async ({\n    neuronId,\n    principal,\n  }: {\n    neuronId: NeuronId;\n    principal: Principal;\n  }): Promise<void> => {\n    const request = toRemoveHotkeyRequest({ neuronId, principal });\n\n    await manageNeuron({\n      request,\n      service: this.certifiedService,\n    });\n  };\n\n  /**\n   * Gets the NeuronID of a newly created neuron.\n   */\n  public claimOrRefreshNeuronFromAccount = async ({\n    memo,\n    controller,\n  }: {\n    memo: bigint;\n    controller?: Principal;\n  }): Promise<NeuronId | undefined> => {\n    const rawRequest = toClaimOrRefreshRequest({\n      memo,\n      controller,\n    });\n    const rawResponse = await this.certifiedService.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  /**\n   * Refreshes neuron and returns neuronId when successful\n   * Uses query call only.\n   *\n   * @throws {@link UnrecognizedTypeError}\n   */\n  public claimOrRefreshNeuron = async (\n    request: ClaimOrRefreshNeuronRequest,\n  ): Promise<NeuronId | undefined> => {\n    const rawRequest = fromClaimOrRefreshNeuronRequest(request);\n    const rawResponse = await this.service.manage_neuron(rawRequest);\n    let command: Command_1 | undefined;\n    if (\n      nonNullish((command = fromNullable(rawResponse.command))) &&\n      \"ClaimOrRefresh\" in command\n    ) {\n      return fromNullable(command.ClaimOrRefresh.refreshed_neuron_id)?.id;\n    }\n\n    throw new UnrecognizedTypeError(\n      `Unrecognized ClaimOrRefresh error in ${JSON.stringify(rawResponse)}`,\n    );\n  };\n\n  private buildNeuronStakeSubAccount = (\n    nonce: Uint8Array,\n    principal: Principal,\n  ): SubAccount => {\n    return SubAccount.fromBytes(\n      this.getNeuronStakeSubAccountBytes(nonce, principal),\n    ) as SubAccount;\n  };\n\n  private getNeuronStakeSubAccountBytes = (\n    nonce: Uint8Array,\n    principal: Principal,\n  ): Uint8Array => {\n    const padding = asciiStringToByteArray(\"neuron-stake\");\n    const shaObj = sha256.create();\n    shaObj.update(\n      arrayOfNumberToUint8Array([\n        0x0c,\n        ...padding,\n        ...principal.toUint8Array(),\n        ...nonce,\n      ]),\n    );\n    return shaObj.digest();\n  };\n\n  private getGovernanceService(certified: boolean): GovernanceService {\n    return certified ? this.certifiedService : this.service;\n  }\n\n  /**\n   * Return the data of the neuron provided as id.\n   */\n  public getNeuron = async ({\n    certified = true,\n    neuronId,\n  }: {\n    certified: boolean;\n    neuronId: NeuronId;\n  }): Promise<NeuronInfo | undefined> => {\n    // The governance canister exposes two functions \"get_neuron_info\" and \"get_full_neuron\" that could probably be used to fetch the neuron details too.\n    // However historically this function has been resolved with a single call \"list_neurons\".\n\n    const [neuron]: NeuronInfo[] = await this.listNeurons({\n      certified,\n      neuronIds: [neuronId],\n    });\n\n    return neuron;\n  };\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], []),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        [],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], []),\n    'get_metrics' : IDL.Func([], [Result_3], []),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        [],\n      ),\n    'get_network_economics_parameters' : IDL.Func([], [NetworkEconomics], []),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], []),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], []),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        [],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        [],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], []),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], []),\n    'get_proposal_info' : IDL.Func([IDL.Nat64], [IDL.Opt(ProposalInfo)], []),\n    'get_restore_aging_summary' : IDL.Func([], [RestoreAgingSummary], []),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], []),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        [],\n      ),\n    'list_node_providers' : IDL.Func([], [ListNodeProvidersResponse], []),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        [],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], ['query']),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        ['query'],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], ['query']),\n    'get_metrics' : IDL.Func([], [Result_3], ['query']),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        ['query'],\n      ),\n    'get_network_economics_parameters' : IDL.Func(\n        [],\n        [NetworkEconomics],\n        ['query'],\n      ),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], ['query']),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], ['query']),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        ['query'],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        ['query'],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], ['query']),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], ['query']),\n    'get_proposal_info' : IDL.Func(\n        [IDL.Nat64],\n        [IDL.Opt(ProposalInfo)],\n        ['query'],\n      ),\n    'get_restore_aging_summary' : IDL.Func(\n        [],\n        [RestoreAgingSummary],\n        ['query'],\n      ),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], ['query']),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], ['query']),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        ['query'],\n      ),\n    'list_node_providers' : IDL.Func(\n        [],\n        [ListNodeProvidersResponse],\n        ['query'],\n      ),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        ['query'],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "// This file was created manually by taking governance.certified.idl.js and\n// removing everything that isn't needed for `list_neurons` and then removing\n// all fields except `neuron_ids` and `include_neurons_readable_by_caller` from\n// `ListNeurons`.\n// The Ledger hardware wallet app verion 2.4.9 doesn't support the newer fields,\n// even when they are optional and not set, so we use this service for\n// compatibility with the hardware wallet.\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(NeuronId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const ListNeurons = IDL.Record({\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  return IDL.Service({\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n  });\n};\n", "import type {\n  AccountIdentifier as AccountIdentifierClass,\n  AccountIdentifierHex,\n} from \"@dfinity/ledger-icp\";\nimport { accountIdentifierToBytes } from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport {\n  arrayBufferToUint8Array,\n  isNullish,\n  nonNullish,\n  toNullable,\n} from \"@dfinity/utils\";\nimport type {\n  Amount,\n  ListProposalInfo,\n  AccountIdentifier as RawAccountIdentifier,\n  ProposalActionRequest as RawAction,\n  By as RawBy,\n  CanisterSettings as RawCanisterSettings,\n  Change as RawChange,\n  ManageNeuronCommandRequest as RawCommand,\n  Countries as RawCountries,\n  CreateServiceNervousSystem as RawCreateServiceNervousSystem,\n  Decimal as RawDecimal,\n  DeveloperDistribution as RawDeveloperDistribution,\n  Duration as RawDuration,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  InstallCodeRequest as RawInstallCode,\n  LedgerParameters as RawLedgerParameters,\n  ListNeurons as RawListNeurons,\n  ManageNeuronRequest as RawManageNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NeuronsFundEconomics as RawNeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients as RawNeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Percentage as RawPercentage,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport type { NeuronVisibility, Vote } from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type { E8s, NeuronId, Option } from \"../../types/common\";\nimport type {\n  By,\n  CanisterSettings,\n  Change,\n  ClaimOrRefreshNeuronRequest,\n  Countries,\n  CreateServiceNervousSystem,\n  Decimal,\n  DeveloperDistribution,\n  DisburseToNeuronRequest,\n  Duration,\n  FollowRequest,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  InstallCodeRequest,\n  LedgerParameters,\n  ListProposalsRequest,\n  MakeProposalRequest,\n  ManageNeuronCommandRequest,\n  ManageNeuronRequest,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider,\n  Operation,\n  Percentage,\n  ProposalActionRequest,\n  ProposalId,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\n\nconst fromProposalId = (proposalId: ProposalId): RawNeuronId => ({\n  id: proposalId,\n});\n\nconst fromNeuronId = (neuronId: NeuronId): RawNeuronId => ({\n  id: neuronId,\n});\n\nconst fromNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: NeuronIdOrSubaccount,\n): RawNeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: { id: neuronIdOrSubaccount.NeuronId } };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return { Subaccount: Uint8Array.from(neuronIdOrSubaccount.Subaccount) };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst fromPercentage = (percentage: Percentage): RawPercentage =>\n  percentage.basisPoints !== undefined\n    ? { basis_points: [percentage.basisPoints] }\n    : { basis_points: [] };\n\nconst fromDuration = (duration: Duration): RawDuration =>\n  duration.seconds !== undefined\n    ? { seconds: [duration.seconds] }\n    : { seconds: [] };\n\nconst fromGlobalTimeOfDay = (time: GlobalTimeOfDay): RawGlobalTimeOfDay =>\n  time.secondsAfterUtcMidnight !== undefined\n    ? { seconds_after_utc_midnight: [time.secondsAfterUtcMidnight] }\n    : { seconds_after_utc_midnight: [] };\n\nconst fromCountries = (countries: Countries): RawCountries => ({\n  iso_codes: countries.isoCodes,\n});\n\nconst fromTokens = (tokens: Tokens): RawTokens =>\n  tokens.e8s !== undefined ? { e8s: [tokens.e8s] } : { e8s: [] };\n\nconst fromImage = (image: Image): RawImage =>\n  image.base64Encoding !== undefined\n    ? { base64_encoding: [image.base64Encoding] }\n    : { base64_encoding: [] };\n\nconst fromVotingRewardParameters = (\n  votingRewardParameters: VotingRewardParameters,\n): RawVotingRewardParameters => ({\n  reward_rate_transition_duration:\n    votingRewardParameters.rewardRateTransitionDuration !== undefined\n      ? [fromDuration(votingRewardParameters.rewardRateTransitionDuration)]\n      : [],\n  initial_reward_rate:\n    votingRewardParameters.initialRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.initialRewardRate)]\n      : [],\n  final_reward_rate:\n    votingRewardParameters.finalRewardRate !== undefined\n      ? [fromPercentage(votingRewardParameters.finalRewardRate)]\n      : [],\n});\n\nconst fromLedgerParameters = (\n  ledgerParameters: LedgerParameters,\n): RawLedgerParameters => ({\n  transaction_fee:\n    ledgerParameters.transactionFee !== undefined\n      ? [fromTokens(ledgerParameters.transactionFee)]\n      : [],\n  token_symbol:\n    ledgerParameters.tokenSymbol !== undefined\n      ? [ledgerParameters.tokenSymbol]\n      : [],\n  token_logo:\n    ledgerParameters.tokenLogo !== undefined\n      ? [fromImage(ledgerParameters.tokenLogo)]\n      : [],\n  token_name:\n    ledgerParameters.tokenName !== undefined\n      ? [ledgerParameters.tokenName]\n      : [],\n});\n\nconst fromSwapParameters = (\n  swapParameters: SwapParameters,\n): RawSwapParameters => ({\n  minimum_participants:\n    swapParameters.minimumParticipants !== undefined\n      ? [swapParameters.minimumParticipants]\n      : [],\n  duration:\n    swapParameters.duration !== undefined\n      ? [fromDuration(swapParameters.duration)]\n      : [],\n  neuron_basket_construction_parameters:\n    swapParameters.neuronBasketConstructionParameters !== undefined\n      ? [\n          fromNeuronBasketConstructionParameters(\n            swapParameters.neuronBasketConstructionParameters,\n          ),\n        ]\n      : [],\n  confirmation_text:\n    swapParameters.confirmationText !== undefined\n      ? [swapParameters.confirmationText]\n      : [],\n  maximum_participant_icp:\n    swapParameters.maximumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.maximumParticipantIcp)]\n      : [],\n  neurons_fund_investment_icp:\n    swapParameters.neuronsFundInvestmentIcp !== undefined\n      ? [fromTokens(swapParameters.neuronsFundInvestmentIcp)]\n      : [],\n  minimum_icp:\n    swapParameters.minimumIcp !== undefined\n      ? [fromTokens(swapParameters.minimumIcp)]\n      : [],\n  minimum_participant_icp:\n    swapParameters.minimumParticipantIcp !== undefined\n      ? [fromTokens(swapParameters.minimumParticipantIcp)]\n      : [],\n  start_time:\n    swapParameters.startTime !== undefined\n      ? [fromGlobalTimeOfDay(swapParameters.startTime)]\n      : [],\n  maximum_icp:\n    swapParameters.maximumIcp !== undefined\n      ? [fromTokens(swapParameters.maximumIcp)]\n      : [],\n  restricted_countries:\n    swapParameters.restrictedCountries !== undefined\n      ? [fromCountries(swapParameters.restrictedCountries)]\n      : [],\n  maximum_direct_participation_icp:\n    swapParameters.maxDirectParticipationIcp !== undefined\n      ? [fromTokens(swapParameters.maxDirectParticipationIcp)]\n      : [],\n  minimum_direct_participation_icp:\n    swapParameters.minDirectParticipationIcp !== undefined\n      ? [fromTokens(swapParameters.minDirectParticipationIcp)]\n      : [],\n  neurons_fund_participation: toNullable(\n    swapParameters.neuronsFundParticipation,\n  ),\n});\n\nconst fromNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters: NeuronBasketConstructionParameters,\n): RawNeuronBasketConstructionParameters => ({\n  dissolve_delay_interval:\n    neuronBasketConstructionParameters.dissolveDelayInterval !== undefined\n      ? [fromDuration(neuronBasketConstructionParameters.dissolveDelayInterval)]\n      : [],\n  count:\n    neuronBasketConstructionParameters.count !== undefined\n      ? [neuronBasketConstructionParameters.count]\n      : [],\n});\n\nconst fromGovernanceParameters = (\n  governanceParameters: GovernanceParameters,\n): RawGovernanceParameters => ({\n  neuron_maximum_dissolve_delay_bonus:\n    governanceParameters.neuronMaximumDissolveDelayBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumDissolveDelayBonus)]\n      : [],\n  neuron_maximum_age_for_age_bonus:\n    governanceParameters.neuronMaximumAgeForAgeBonus !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumAgeForAgeBonus)]\n      : [],\n  neuron_maximum_dissolve_delay:\n    governanceParameters.neuronMaximumDissolveDelay !== undefined\n      ? [fromDuration(governanceParameters.neuronMaximumDissolveDelay)]\n      : [],\n  neuron_minimum_dissolve_delay_to_vote:\n    governanceParameters.neuronMinimumDissolveDelayToVote !== undefined\n      ? [fromDuration(governanceParameters.neuronMinimumDissolveDelayToVote)]\n      : [],\n  neuron_maximum_age_bonus:\n    governanceParameters.neuronMaximumAgeBonus !== undefined\n      ? [fromPercentage(governanceParameters.neuronMaximumAgeBonus)]\n      : [],\n  neuron_minimum_stake:\n    governanceParameters.neuronMinimumStake !== undefined\n      ? [fromTokens(governanceParameters.neuronMinimumStake)]\n      : [],\n  proposal_wait_for_quiet_deadline_increase:\n    governanceParameters.proposalWaitForQuietDeadlineIncrease !== undefined\n      ? [\n          fromDuration(\n            governanceParameters.proposalWaitForQuietDeadlineIncrease,\n          ),\n        ]\n      : [],\n  proposal_initial_voting_period:\n    governanceParameters.proposalInitialVotingPeriod !== undefined\n      ? [fromDuration(governanceParameters.proposalInitialVotingPeriod)]\n      : [],\n  proposal_rejection_fee:\n    governanceParameters.proposalRejectionFee !== undefined\n      ? [fromTokens(governanceParameters.proposalRejectionFee)]\n      : [],\n  voting_reward_parameters:\n    governanceParameters.votingRewardParameters !== undefined\n      ? [\n          fromVotingRewardParameters(\n            governanceParameters.votingRewardParameters,\n          ),\n        ]\n      : [],\n});\n\nconst fromSwapDistribution = (\n  swapDistribution: SwapDistribution,\n): RawSwapDistribution => ({\n  total:\n    swapDistribution.total !== undefined\n      ? [fromTokens(swapDistribution.total)]\n      : [],\n});\n\nconst fromInitialTokenDistribution = (\n  initialTokenDistribution: InitialTokenDistribution,\n): RawInitialTokenDistribution => ({\n  treasury_distribution:\n    initialTokenDistribution.treasuryDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.treasuryDistribution)]\n      : [],\n  developer_distribution:\n    initialTokenDistribution.developerDistribution !== undefined\n      ? [\n          fromDeveloperDistribution(\n            initialTokenDistribution.developerDistribution,\n          ),\n        ]\n      : [],\n  swap_distribution:\n    initialTokenDistribution.swapDistribution !== undefined\n      ? [fromSwapDistribution(initialTokenDistribution.swapDistribution)]\n      : [],\n});\n\nconst fromNeuronDistribution = (\n  neuronDistribution: NeuronDistribution,\n): RawNeuronDistribution => ({\n  controller:\n    neuronDistribution.controller !== undefined\n      ? [Principal.fromText(neuronDistribution.controller)]\n      : [],\n  dissolve_delay:\n    neuronDistribution.dissolveDelay !== undefined\n      ? [fromDuration(neuronDistribution.dissolveDelay)]\n      : [],\n  memo: neuronDistribution.memo !== undefined ? [neuronDistribution.memo] : [],\n  vesting_period:\n    neuronDistribution.vestingPeriod !== undefined\n      ? [fromDuration(neuronDistribution.vestingPeriod)]\n      : [],\n  stake:\n    neuronDistribution.stake !== undefined\n      ? [fromTokens(neuronDistribution.stake)]\n      : [],\n});\n\nconst fromDeveloperDistribution = (\n  developerDistribution: DeveloperDistribution,\n): RawDeveloperDistribution => ({\n  developer_neurons: developerDistribution.developerNeurons.map(\n    fromNeuronDistribution,\n  ),\n});\n\nconst fromCreateServiceNervousSystem = (\n  createServiceNervousSystem: CreateServiceNervousSystem,\n): RawCreateServiceNervousSystem => ({\n  url:\n    createServiceNervousSystem.url !== undefined\n      ? [createServiceNervousSystem.url]\n      : [],\n  governance_parameters:\n    createServiceNervousSystem.governanceParameters !== undefined\n      ? [\n          fromGovernanceParameters(\n            createServiceNervousSystem.governanceParameters,\n          ),\n        ]\n      : [],\n  fallback_controller_principal_ids:\n    createServiceNervousSystem.fallbackControllerPrincipalIds.map((id) =>\n      Principal.fromText(id),\n    ),\n  logo:\n    createServiceNervousSystem.logo !== undefined\n      ? [fromImage(createServiceNervousSystem.logo)]\n      : [],\n  name:\n    createServiceNervousSystem.name !== undefined\n      ? [createServiceNervousSystem.name]\n      : [],\n  ledger_parameters:\n    createServiceNervousSystem.ledgerParameters !== undefined\n      ? [fromLedgerParameters(createServiceNervousSystem.ledgerParameters)]\n      : [],\n  description:\n    createServiceNervousSystem.description !== undefined\n      ? [createServiceNervousSystem.description]\n      : [],\n  dapp_canisters: createServiceNervousSystem.dappCanisters.map(\n    (principalId) => ({\n      id: [Principal.fromText(principalId)],\n    }),\n  ),\n  swap_parameters:\n    createServiceNervousSystem.swapParameters !== undefined\n      ? [fromSwapParameters(createServiceNervousSystem.swapParameters)]\n      : [],\n  initial_token_distribution:\n    createServiceNervousSystem.initialTokenDistribution !== undefined\n      ? [\n          fromInitialTokenDistribution(\n            createServiceNervousSystem.initialTokenDistribution,\n          ),\n        ]\n      : [],\n});\n\nconst fromInstallCode = (installCode: InstallCodeRequest): RawInstallCode => {\n  if (installCode.wasmModule === undefined) {\n    throw new Error(\"wasmModule not found\");\n  }\n\n  return {\n    arg: toNullable(\n      arrayBufferToUint8Array(installCode.arg ?? new ArrayBuffer(0)),\n    ),\n    wasm_module: toNullable(arrayBufferToUint8Array(installCode.wasmModule)),\n    skip_stopping_before_installing: toNullable(\n      installCode.skipStoppingBeforeInstalling,\n    ),\n    canister_id: toNullable(\n      nonNullish(installCode.canisterId)\n        ? Principal.fromText(installCode.canisterId)\n        : undefined,\n    ),\n    install_mode: toNullable(installCode.installMode as number),\n  };\n};\n\nconst fromCanisterSettings = (\n  canisterSettings: Option<CanisterSettings>,\n): [RawCanisterSettings] | [] => {\n  return canisterSettings === undefined\n    ? []\n    : [\n        {\n          freezing_threshold: toNullable(canisterSettings.freezingThreshold),\n          controllers: canisterSettings.controllers\n            ? [\n                {\n                  controllers: canisterSettings.controllers.map((controller) =>\n                    Principal.fromText(controller),\n                  ),\n                },\n              ]\n            : [],\n          log_visibility: toNullable(canisterSettings.logVisibility as number),\n          wasm_memory_limit: toNullable(canisterSettings.wasmMemoryLimit),\n          compute_allocation: toNullable(canisterSettings.computeAllocation),\n          memory_allocation: toNullable(canisterSettings.memoryAllocation),\n        },\n      ];\n};\n\nconst fromAction = (action: ProposalActionRequest): RawAction => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    if (executeNnsFunction.payloadBytes === undefined) {\n      throw new Error(\"payloadBytes not found\");\n    }\n\n    return {\n      ExecuteNnsFunction: {\n        nns_function: executeNnsFunction.nnsFunctionId,\n        payload: arrayBufferToUint8Array(executeNnsFunction.payloadBytes),\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: fromManageNeuron(manageNeuron),\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveGenesisKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveGenesisKyc.principals.map(Principal.fromText),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuron_minimum_stake_e8s: networkEconomics.neuronMinimumStake,\n        max_proposals_to_keep_per_topic:\n          networkEconomics.maxProposalsToKeepPerTopic,\n        neuron_management_fee_per_proposal_e8s:\n          networkEconomics.neuronManagementFeePerProposal,\n        reject_cost_e8s: networkEconomics.rejectCost,\n        transaction_fee_e8s: networkEconomics.transactionFee,\n        neuron_spawn_dissolve_delay_seconds:\n          networkEconomics.neuronSpawnDissolveDelaySeconds,\n        minimum_icp_xdr_rate: networkEconomics.minimumIcpXdrRate,\n        maximum_node_provider_rewards_e8s:\n          networkEconomics.maximumNodeProviderRewards,\n        neurons_fund_economics: fromNeuronsFundEconomics(\n          networkEconomics.neuronsFundEconomics,\n        ),\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        node_provider: rewardNodeProvider.nodeProvider\n          ? [fromNodeProvider(rewardNodeProvider.nodeProvider)]\n          : [],\n        amount_e8s: rewardNodeProvider.amountE8s,\n        reward_mode:\n          rewardNodeProvider.rewardMode != null\n            ? [fromRewardMode(rewardNodeProvider.rewardMode)]\n            : [],\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        use_registry_derived_rewards:\n          rewardNodeProviders.useRegistryDerivedRewards === undefined\n            ? []\n            : [rewardNodeProviders.useRegistryDerivedRewards],\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          node_provider: r.nodeProvider\n            ? [fromNodeProvider(r.nodeProvider)]\n            : [],\n          amount_e8s: r.amountE8s,\n          reward_mode:\n            r.rewardMode != null ? [fromRewardMode(r.rewardMode)] : [],\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change\n          ? [fromChange(addOrRemoveNodeProvider.change)]\n          : [],\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motion_text: motion.motionText,\n      },\n    };\n  }\n\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: {\n        id: [{ id: knownNeuron.id }],\n        known_neuron_data: [\n          {\n            name: knownNeuron.name,\n            description:\n              knownNeuron.description !== undefined\n                ? [knownNeuron.description]\n                : [],\n          },\n        ],\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    return {\n      CreateServiceNervousSystem: fromCreateServiceNervousSystem(\n        action.CreateServiceNervousSystem,\n      ),\n    };\n  }\n\n  if (\"InstallCode\" in action) {\n    return {\n      InstallCode: fromInstallCode(action.InstallCode),\n    };\n  }\n\n  if (\"StopOrStartCanister\" in action) {\n    const stopOrStartCanister = action.StopOrStartCanister;\n    return {\n      StopOrStartCanister: {\n        canister_id: stopOrStartCanister.canisterId\n          ? [Principal.fromText(stopOrStartCanister.canisterId)]\n          : [],\n        action: stopOrStartCanister.action\n          ? [stopOrStartCanister.action as number]\n          : [],\n      },\n    };\n  }\n\n  if (\"UpdateCanisterSettings\" in action) {\n    const updateCanisterSettings = action.UpdateCanisterSettings;\n    return {\n      UpdateCanisterSettings: {\n        canister_id: updateCanisterSettings.canisterId\n          ? [Principal.fromText(updateCanisterSettings.canisterId)]\n          : [],\n        settings: fromCanisterSettings(updateCanisterSettings.settings),\n      },\n    };\n  }\n\n  // If there's a missing action, this line will cause a compiler error.\n  throw new UnsupportedValueError(action);\n};\n\nconst fromCommand = (command: ManageNeuronCommandRequest): RawCommand => {\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount_e8s: split.amount,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(fromNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by ? [fromClaimOrRefreshBy(claimOrRefresh.by)] : [],\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation\n          ? [fromOperation(configure.operation)]\n          : [],\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal\n          ? [fromProposalId(registerVote.proposal)]\n          : [],\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolve_delay_seconds: disburseToNeuron.dissolveDelaySeconds,\n        kyc_verified: disburseToNeuron.kycVerified,\n        amount_e8s: disburseToNeuron.amount,\n        new_controller: disburseToNeuron.newController\n          ? [Principal.fromText(disburseToNeuron.newController)]\n          : [],\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentage_to_merge: mergeMaturity.percentageToMerge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentageToStake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        url: makeProposal.url,\n        title: [],\n        action: makeProposal.action ? [fromAction(makeProposal.action)] : [],\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        to_account: disburse.toAccountId\n          ? [fromAccountIdentifier(disburse.toAccountId)]\n          : [],\n        amount: disburse.amount ? [fromAmount(disburse.amount)] : [],\n      },\n    };\n  }\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        percentage_to_spawn:\n          spawn.percentageToSpawn === undefined\n            ? []\n            : [spawn.percentageToSpawn],\n        new_controller: spawn.newController\n          ? [Principal.fromText(spawn.newController)]\n          : [],\n        nonce: [],\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        source_neuron_id: merge.sourceNeuronId\n          ? [{ id: merge.sourceNeuronId }]\n          : [],\n      },\n    };\n  }\n\n  // If there's a missing command above, this line will cause a compiler error.\n  throw new UnsupportedValueError(command);\n};\n\nconst fromOperation = (operation: Operation): RawOperation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hot_key_to_remove:\n          removeHotKey.hotKeyToRemove != null\n            ? [Principal.fromText(removeHotKey.hotKeyToRemove)]\n            : [],\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        new_hot_key: addHotKey.newHotKey\n          ? [Principal.fromText(addHotKey.newHotKey)]\n          : [],\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds:\n          increaseDissolveDelay.additionalDissolveDelaySeconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds:\n          setDissolveTimestamp.dissolveTimestampSeconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const { requestedSettingForAutoStakeMaturity } =\n      operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity:\n          requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  if (\"SetVisibility\" in operation) {\n    const setVisibility = operation.SetVisibility;\n    return {\n      SetVisibility: {\n        visibility: toNullable(setVisibility.visibility),\n      },\n    };\n  }\n  // If there's a missing operation above, this line will cause a compiler error.\n  throw new UnsupportedValueError(operation);\n};\n\nconst fromChange = (change: Change): RawChange => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: fromNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: fromNodeProvider(change.ToAdd),\n    };\n  }\n  // If there's a missing change above, this line will cause a compiler error.\n  throw new UnsupportedValueError(change);\n};\n\nconst fromNodeProvider = (nodeProvider: NodeProvider): RawNodeProvider => {\n  return {\n    id: nodeProvider.id != null ? [Principal.fromText(nodeProvider.id)] : [],\n    reward_account:\n      nodeProvider.rewardAccount != null\n        ? [fromAccountIdentifier(nodeProvider.rewardAccount)]\n        : [],\n  };\n};\n\nconst fromAmount = (amount: E8s): Amount => ({\n  e8s: amount,\n});\n\nconst fromAccountIdentifier = (\n  accountIdentifier: AccountIdentifierHex,\n): RawAccountIdentifier => ({\n  hash: accountIdentifierToBytes(accountIdentifier),\n});\n\nconst fromNeuronsFundEconomics = (\n  neuronsFundEconomics: Option<NeuronsFundEconomics>,\n): [] | [RawNeuronsFundEconomics] => {\n  if (isNullish(neuronsFundEconomics)) {\n    return [];\n  }\n\n  const {\n    maximumIcpXdrRate,\n    maxTheoreticalNeuronsFundParticipationAmountXdr,\n    neuronsFundMatchedFundingCurveCoefficients,\n    minimumIcpXdrRate,\n  } = neuronsFundEconomics;\n\n  const toRawPercentage = (\n    percentage: Option<Percentage>,\n  ): [] | [RawPercentage] =>\n    isNullish(percentage)\n      ? []\n      : [\n          {\n            basis_points: toNullable(percentage.basisPoints),\n          },\n        ];\n\n  const toRawDecimals = (decimal: Option<Decimal>): [] | [RawDecimal] =>\n    isNullish(decimal)\n      ? []\n      : [\n          {\n            human_readable: toNullable(decimal.humanReadable),\n          },\n        ];\n\n  const toRawNeuronsFundMatchedFundingCurveCoefficients = (\n    neuronsFundMatchedFundingCurveCoefficients: Option<NeuronsFundMatchedFundingCurveCoefficients>,\n  ): [] | [RawNeuronsFundMatchedFundingCurveCoefficients] =>\n    isNullish(neuronsFundMatchedFundingCurveCoefficients)\n      ? []\n      : [\n          {\n            contribution_threshold_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.contributionThresholdXdr,\n            ),\n            full_participation_milestone_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.fullParticipationMilestoneXdr,\n            ),\n            one_third_participation_milestone_xdr: toRawDecimals(\n              neuronsFundMatchedFundingCurveCoefficients.oneThirdParticipationMilestoneXdr,\n            ),\n          },\n        ];\n\n  return [\n    {\n      maximum_icp_xdr_rate: toRawPercentage(maximumIcpXdrRate),\n      neurons_fund_matched_funding_curve_coefficients:\n        toRawNeuronsFundMatchedFundingCurveCoefficients(\n          neuronsFundMatchedFundingCurveCoefficients,\n        ),\n      minimum_icp_xdr_rate: toRawPercentage(minimumIcpXdrRate),\n      max_theoretical_neurons_fund_participation_amount_xdr: toRawDecimals(\n        maxTheoreticalNeuronsFundParticipationAmountXdr,\n      ),\n    },\n  ];\n};\n\nconst fromRewardMode = (rewardMode: RewardMode): RawRewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolve_delay_seconds: rewardMode.RewardToNeuron.dissolveDelaySeconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        to_account:\n          rewardMode.RewardToAccount.toAccount != null\n            ? [fromAccountIdentifier(rewardMode.RewardToAccount.toAccount)]\n            : [],\n      },\n    };\n  } else {\n    // If there's a missing rewardMode above, this line will cause a compiler error.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst fromClaimOrRefreshBy = (by: By): RawBy => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller\n          ? [by.MemoAndController.controller]\n          : [],\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const fromListNeurons = ({\n  neuronIds,\n  includeEmptyNeurons,\n  includePublicNeurons,\n}: {\n  neuronIds?: NeuronId[];\n  includeEmptyNeurons?: boolean;\n  includePublicNeurons?: boolean;\n}): RawListNeurons => ({\n  neuron_ids: BigUint64Array.from(neuronIds ?? []),\n  include_neurons_readable_by_caller: neuronIds ? false : true,\n  include_empty_neurons_readable_by_caller: toNullable(includeEmptyNeurons),\n  include_public_neurons_in_full_neurons: toNullable(includePublicNeurons),\n});\n\nexport const fromManageNeuron = ({\n  id,\n  command,\n  neuronIdOrSubaccount,\n}: ManageNeuronRequest): RawManageNeuron => ({\n  id: id ? [fromNeuronId(id)] : [],\n  command: command ? [fromCommand(command)] : [],\n  neuron_id_or_subaccount: neuronIdOrSubaccount\n    ? [fromNeuronIdOrSubaccount(neuronIdOrSubaccount)]\n    : [],\n});\n\nexport const fromListProposalsRequest = ({\n  includeRewardStatus,\n  beforeProposal,\n  excludeTopic,\n  includeStatus,\n  limit,\n  includeAllManageNeuronProposals,\n  omitLargeFields,\n}: ListProposalsRequest): ListProposalInfo => {\n  return {\n    include_reward_status: Int32Array.from(includeRewardStatus),\n    before_proposal: beforeProposal ? [fromProposalId(beforeProposal)] : [],\n    limit: limit,\n    exclude_topic: Int32Array.from(excludeTopic),\n    include_all_manage_neuron_proposals:\n      includeAllManageNeuronProposals !== undefined\n        ? [includeAllManageNeuronProposals]\n        : [],\n    include_status: Int32Array.from(includeStatus),\n    omit_large_fields: toNullable(omitLargeFields),\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromAddHotKeyRequest = (request: AddHotKeyRequest): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const hotkey = new PbManageNeuron.AddHotKey();\n  hotkey.setNewHotKey(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setAddHotKey(hotkey);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n*/\n\nexport const fromClaimOrRefreshNeuronRequest = (\n  request: ClaimOrRefreshNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: { by: [{ NeuronIdOrSubaccount: {} }] },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toClaimOrRefreshRequest = ({\n  memo,\n  controller,\n}: {\n  memo: bigint;\n  controller?: Principal;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    ClaimOrRefresh: {\n      by: [\n        {\n          MemoAndController: {\n            controller: controller == undefined ? [] : [controller],\n            memo,\n          },\n        },\n      ],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromMergeMaturityRequest = (\n  request: MergeMaturityRequest\n): PbManageNeuron => {\n  const mergeMaturity = new PbManageNeuron.MergeMaturity();\n  mergeMaturity.setPercentageToMerge(request.percentageToMerge);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setMergeMaturity(mergeMaturity);\n  return manageNeuron;\n};\n*/\n\n/* Protobuf is not supported yet\nexport const fromRemoveHotKeyRequest = (\n  request: RemoveHotKeyRequest\n): PbManageNeuron => {\n  const hotkeyPrincipal = new PbPrincipalId();\n  hotkeyPrincipal.setSerializedId(\n    Principal.fromText(request.principal).toUint8Array()\n  );\n\n  const command = new PbManageNeuron.RemoveHotKey();\n  command.setHotKeyToRemove(hotkeyPrincipal);\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setRemoveHotKey(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStartDissolvingRequest = (\n  request: StartDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStartDissolving(new PbManageNeuron.StartDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromStopDissolvingRequest = (\n  request: StopDissolvingRequest\n): PbManageNeuron => {\n  const configure = new PbManageNeuron.Configure();\n  configure.setStopDissolving(new PbManageNeuron.StopDissolving());\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromIncreaseDissolveDelayRequest = (\n  request: IncreaseDissolveDelayRequest\n): PbManageNeuron => {\n  const command = new PbManageNeuron.IncreaseDissolveDelay();\n  command.setAdditionalDissolveDelaySeconds(\n    request.additionalDissolveDelaySeconds\n  );\n\n  const configure = new PbManageNeuron.Configure();\n  configure.setIncreaseDissolveDelay(command);\n\n  const result = new PbManageNeuron();\n  result.setConfigure(configure);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  result.setNeuronId(neuronId);\n\n  return result;\n};\n\nexport const fromFollowRequest = (request: FollowRequest): PbManageNeuron => {\n  const follow = new PbManageNeuron.Follow();\n  follow.setTopic(request.topic);\n  follow.setFolloweesList(\n    request.followees.map((followee) => {\n      const neuronId = new PbNeuronId();\n      neuronId.setId(followee.toString());\n      return neuronId;\n    })\n  );\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setFollow(follow);\n  return manageNeuron;\n};\n\nexport const fromRegisterVoteRequest = (\n  request: RegisterVoteRequest\n): PbManageNeuron => {\n  const registerVote = new PbManageNeuron.RegisterVote();\n  registerVote.setVote(request.vote);\n  const proposal = new PbProposalId();\n  proposal.setId(request.proposal.toString());\n  registerVote.setProposal(proposal);\n  const manageNeuron = new PbManageNeuron();\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  manageNeuron.setRegisterVote(registerVote);\n  return manageNeuron;\n};\n\nexport const fromSpawnRequest = (request: SpawnRequest): PbManageNeuron => {\n  const spawn = new PbManageNeuron.Spawn();\n\n  if (request.newController) {\n    const newController = new PbPrincipalId();\n    newController.setSerializedId(\n      Principal.fromText(request.newController).toUint8Array().slice(4)\n    );\n    spawn.setNewController(newController);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setSpawn(spawn);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const toSplitRawRequest = ({\n  neuronId,\n  amount,\n}: {\n  neuronId: NeuronId;\n  amount: E8s;\n}): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    Split: {\n      amount_e8s: amount,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: neuronId } }],\n  };\n};\n\n/* Protobuf is not supported yet\nexport const fromDisburseRequest = (request: DisburseRequest): PbManageNeuron => {\n  const disburse = new PbManageNeuron.Disburse();\n\n  if (request.toAccountId) {\n    const toAccountIdentifier = new PbAccountIdentifier();\n    toAccountIdentifier.setHash(\n      Uint8Array.from(Buffer.from(request.toAccountId, \"hex\"))\n    );\n    disburse.setToAccount(toAccountIdentifier);\n  }\n\n  if (request.amount != null) {\n    const amount = new PbManageNeuron.Disburse.Amount();\n    amount.setE8s(request.amount.toString());\n    disburse.setAmount(amount);\n  }\n\n  const manageNeuron = new PbManageNeuron();\n  manageNeuron.setDisburse(disburse);\n\n  const neuronId = new PbNeuronId();\n  neuronId.setId(request.neuronId.toString());\n  manageNeuron.setNeuronId(neuronId);\n  return manageNeuron;\n};\n*/\n\nexport const fromDisburseToNeuronRequest = (\n  request: DisburseToNeuronRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    DisburseToNeuron: {\n      dissolve_delay_seconds: request.dissolveDelaySeconds,\n      kyc_verified: request.kycVerified,\n      amount_e8s: request.amount,\n      new_controller:\n        request.newController != null\n          ? [Principal.fromText(request.newController)]\n          : [],\n      nonce: request.nonce,\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const fromMakeProposalRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toRegisterVoteRequest = ({\n  neuronId,\n  vote,\n  proposalId,\n}: {\n  neuronId: NeuronId;\n  vote: Vote;\n  proposalId: ProposalId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      RegisterVote: {\n        vote,\n        proposal: [{ id: proposalId }],\n      },\n    },\n  });\n\nexport const toMakeProposalRawRequest = (\n  request: MakeProposalRequest,\n): RawManageNeuron => {\n  const rawCommand: RawCommand = {\n    MakeProposal: {\n      url: request.url,\n      title: request.title != null ? [request.title] : [],\n      summary: request.summary,\n      action: [fromAction(request.action)],\n    },\n  };\n  return {\n    id: [],\n    command: [rawCommand],\n    neuron_id_or_subaccount: [{ NeuronId: { id: request.neuronId } }],\n  };\n};\n\nexport const toManageNeuronsFollowRequest = ({\n  neuronId,\n  topic,\n  followees,\n}: FollowRequest): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Follow: {\n        topic,\n        followees: followees.map((followeeId) => ({ id: followeeId })),\n      },\n    },\n  });\n\nexport const toDisburseNeuronRequest = ({\n  neuronId,\n  toAccountIdentifier,\n  amount,\n}: {\n  neuronId: NeuronId;\n  toAccountIdentifier?: AccountIdentifierClass;\n  amount?: E8s;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Disburse: {\n        to_account:\n          toAccountIdentifier !== undefined\n            ? [toAccountIdentifier.toAccountIdentifierHash()]\n            : [],\n        amount: amount !== undefined ? [fromAmount(amount)] : [],\n      },\n    },\n  });\n\nexport const toMergeMaturityRequest = ({\n  neuronId,\n  percentageToMerge,\n}: {\n  neuronId: NeuronId;\n  percentageToMerge: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      MergeMaturity: {\n        percentage_to_merge: percentageToMerge,\n      },\n    },\n  });\n\nexport const toStakeMaturityRequest = ({\n  neuronId,\n  percentageToStake,\n}: {\n  neuronId: NeuronId;\n  percentageToStake?: number;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      StakeMaturity: {\n        percentage_to_stake: toNullable(percentageToStake),\n      },\n    },\n  });\n\nexport const toSpawnNeuronRequest = ({\n  neuronId,\n  percentageToSpawn,\n  newController,\n  nonce,\n}: {\n  neuronId: NeuronId;\n  percentageToSpawn?: number;\n  newController?: Principal;\n  nonce?: bigint;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Spawn: {\n        percentage_to_spawn:\n          percentageToSpawn === undefined ? [] : [percentageToSpawn],\n        new_controller: newController === undefined ? [] : [newController],\n        nonce: nonce === undefined ? [] : [nonce],\n      },\n    },\n  });\n\nexport const toAddHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      AddHotKey: {\n        new_hot_key: [principal],\n      },\n    },\n  });\n\nexport const toRemoveHotkeyRequest = ({\n  neuronId,\n  principal,\n}: {\n  neuronId: NeuronId;\n  principal: Principal;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      RemoveHotKey: {\n        hot_key_to_remove: [principal],\n      },\n    },\n  });\n\nexport const toIncreaseDissolveDelayRequest = ({\n  neuronId,\n  additionalDissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  additionalDissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      IncreaseDissolveDelay: {\n        additional_dissolve_delay_seconds: additionalDissolveDelaySeconds,\n      },\n    },\n  });\n\nexport const toSetDissolveDelayRequest = ({\n  neuronId,\n  dissolveDelaySeconds,\n}: {\n  neuronId: NeuronId;\n  dissolveDelaySeconds: number;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      SetDissolveTimestamp: {\n        dissolve_timestamp_seconds: BigInt(dissolveDelaySeconds),\n      },\n    },\n  });\n\nexport const toJoinCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      JoinCommunityFund: {},\n    },\n  });\n\nexport const toAutoStakeMaturityRequest = ({\n  neuronId,\n  autoStake,\n}: {\n  neuronId: NeuronId;\n  autoStake: boolean;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      ChangeAutoStakeMaturity: {\n        requested_setting_for_auto_stake_maturity: autoStake,\n      },\n    },\n  });\n\nexport const toLeaveCommunityFundRequest = (\n  neuronId: NeuronId,\n): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      LeaveCommunityFund: {},\n    },\n  });\n\nexport const toSetVisibilityRequest = ({\n  neuronId,\n  visibility,\n}: {\n  neuronId: NeuronId;\n  visibility: NeuronVisibility;\n}): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      SetVisibility: {\n        visibility: [visibility as number],\n      },\n    },\n  });\n\nexport const toMergeRequest = ({\n  sourceNeuronId,\n  targetNeuronId,\n}: {\n  sourceNeuronId: NeuronId;\n  targetNeuronId: NeuronId;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId: targetNeuronId,\n    command: {\n      Merge: { source_neuron_id: [{ id: sourceNeuronId }] },\n    },\n  });\n\nexport const toStartDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StartDissolving: {},\n    },\n  });\n\nexport const toStopDissolvingRequest = (neuronId: NeuronId): RawManageNeuron =>\n  toConfigureOperation({\n    neuronId,\n    operation: {\n      StopDissolving: {},\n    },\n  });\n\nexport const toCommand = ({\n  neuronId,\n  command,\n}: {\n  neuronId: NeuronId;\n  command: RawCommand;\n}): RawManageNeuron => ({\n  id: [{ id: neuronId }],\n  command: [command],\n  neuron_id_or_subaccount: [],\n});\n\nexport const toConfigureOperation = ({\n  neuronId,\n  operation,\n}: {\n  neuronId: NeuronId;\n  operation: RawOperation;\n}): RawManageNeuron =>\n  toCommand({\n    neuronId,\n    command: {\n      Configure: {\n        operation: [operation],\n      },\n    },\n  });\n", "import type { AccountIdentifierHex } from \"@dfinity/ledger-icp\";\nimport {\n  accountIdentifierFromBytes,\n  principalToAccountIdentifier,\n} from \"@dfinity/ledger-icp\";\nimport { Principal } from \"@dfinity/principal\";\nimport {\n  fromDefinedNullable,\n  fromNullable,\n  isNullish,\n  nonNullish,\n  toNullable,\n  uint8ArrayToArrayOfNumber,\n  uint8ArrayToHexString,\n} from \"@dfinity/utils\";\nimport type {\n  Params,\n  AccountIdentifier as RawAccountIdentifier,\n  Action as RawAction,\n  Amount as RawAmount,\n  Ballot as RawBallot,\n  BallotInfo as RawBallotInfo,\n  By as RawBy,\n  Canister as RawCanister,\n  CanisterSettings as RawCanisterSettings,\n  Change as RawChange,\n  Command as RawCommand,\n  Countries as RawCountries,\n  Decimal as RawDecimal,\n  DeveloperDistribution as RawDeveloperDistribution,\n  DissolveState as RawDissolveState,\n  Duration as RawDuration,\n  Followees as RawFollowees,\n  GlobalTimeOfDay as RawGlobalTimeOfDay,\n  GovernanceParameters as RawGovernanceParameters,\n  Image as RawImage,\n  InitialTokenDistribution as RawInitialTokenDistribution,\n  KnownNeuron as RawKnownNeuron,\n  LedgerParameters as RawLedgerParameters,\n  ListNeuronsResponse as RawListNeuronsResponse,\n  ListProposalInfoResponse as RawListProposalInfoResponse,\n  Neuron as RawNeuron,\n  NeuronBasketConstructionParameters as RawNeuronBasketConstructionParameters,\n  NeuronDistribution as RawNeuronDistribution,\n  NeuronId as RawNeuronId,\n  NeuronIdOrSubaccount as RawNeuronIdOrSubaccount,\n  NeuronInfo as RawNeuronInfo,\n  NeuronsFundEconomics as RawNeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients as RawNeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider as RawNodeProvider,\n  Operation as RawOperation,\n  Percentage as RawPercentage,\n  Proposal as RawProposal,\n  ProposalInfo as RawProposalInfo,\n  RewardMode as RawRewardMode,\n  SwapDistribution as RawSwapDistribution,\n  SwapParameters as RawSwapParameters,\n  Tally as RawTally,\n  Tokens as RawTokens,\n  VotingRewardParameters as RawVotingRewardParameters,\n} from \"../../../candid/governance\";\nimport type {\n  CanisterAction,\n  CanisterInstallMode,\n  LogVisibility,\n  NeuronType,\n  NeuronVisibility,\n} from \"../../enums/governance.enums\";\nimport { UnsupportedValueError } from \"../../errors/governance.errors\";\nimport type {\n  CanisterIdString,\n  E8s,\n  NeuronId,\n  Option,\n} from \"../../types/common\";\nimport type {\n  Action,\n  Ballot,\n  BallotInfo,\n  By,\n  CanisterSettings,\n  Change,\n  Command,\n  Countries,\n  Decimal,\n  DeveloperDistribution,\n  DissolveState,\n  Duration,\n  Followees,\n  GlobalTimeOfDay,\n  GovernanceParameters,\n  Image,\n  InitialTokenDistribution,\n  KnownNeuron,\n  LedgerParameters,\n  ListProposalsResponse,\n  Neuron,\n  NeuronBasketConstructionParameters,\n  NeuronDistribution,\n  NeuronIdOrSubaccount,\n  NeuronInfo,\n  NeuronsFundEconomics,\n  NeuronsFundMatchedFundingCurveCoefficients,\n  NodeProvider,\n  Operation,\n  Percentage,\n  Proposal,\n  ProposalInfo,\n  RewardMode,\n  SwapDistribution,\n  SwapParameters,\n  Tally,\n  Tokens,\n  VotingRewardParameters,\n} from \"../../types/governance_converters\";\n\nexport const toNeuronInfo = ({\n  neuronId,\n  neuronInfo,\n  rawNeuron,\n  canisterId,\n}: {\n  neuronId: bigint;\n  neuronInfo: RawNeuronInfo;\n  rawNeuron?: RawNeuron;\n  canisterId: Principal;\n}): NeuronInfo => {\n  const fullNeuron = rawNeuron\n    ? toNeuron({ neuron: rawNeuron, canisterId })\n    : undefined;\n  return {\n    neuronId: neuronId,\n    dissolveDelaySeconds: neuronInfo.dissolve_delay_seconds,\n    recentBallots: neuronInfo.recent_ballots.map(toBallotInfo),\n    neuronType: fromNullable(neuronInfo.neuron_type) as NeuronType | undefined,\n    createdTimestampSeconds: neuronInfo.created_timestamp_seconds,\n    state: neuronInfo.state,\n    joinedCommunityFundTimestampSeconds: neuronInfo\n      .joined_community_fund_timestamp_seconds.length\n      ? neuronInfo.joined_community_fund_timestamp_seconds[0]\n      : undefined,\n    retrievedAtTimestampSeconds: neuronInfo.retrieved_at_timestamp_seconds,\n    votingPower: neuronInfo.voting_power,\n    ageSeconds: neuronInfo.age_seconds,\n    visibility: fromNullable(neuronInfo.visibility) as\n      | NeuronVisibility\n      | undefined,\n    fullNeuron: fullNeuron,\n  };\n};\n\nexport const toNeuron = ({\n  neuron,\n  canisterId,\n}: {\n  neuron: RawNeuron;\n  canisterId: Principal;\n}): Neuron => ({\n  id: neuron.id.length ? toNeuronId(neuron.id[0]) : undefined,\n  stakedMaturityE8sEquivalent: fromNullable(\n    neuron.staked_maturity_e8s_equivalent,\n  ),\n  controller: neuron.controller.length\n    ? neuron.controller[0].toString()\n    : undefined,\n  recentBallots: neuron.recent_ballots.map(toBallotInfo),\n  neuronType: fromNullable(neuron.neuron_type) as NeuronType | undefined,\n  kycVerified: neuron.kyc_verified,\n  notForProfit: neuron.not_for_profit,\n  cachedNeuronStake: neuron.cached_neuron_stake_e8s,\n  createdTimestampSeconds: neuron.created_timestamp_seconds,\n  autoStakeMaturity: fromNullable(neuron.auto_stake_maturity),\n  maturityE8sEquivalent: neuron.maturity_e8s_equivalent,\n  agingSinceTimestampSeconds: neuron.aging_since_timestamp_seconds,\n  neuronFees: neuron.neuron_fees_e8s,\n  hotKeys: neuron.hot_keys.map((p) => p.toString()),\n  accountIdentifier: principalToAccountIdentifier(\n    canisterId,\n    Uint8Array.from(neuron.account),\n  ),\n  joinedCommunityFundTimestampSeconds: neuron\n    .joined_community_fund_timestamp_seconds.length\n    ? neuron.joined_community_fund_timestamp_seconds[0]\n    : undefined,\n  dissolveState: neuron.dissolve_state.length\n    ? toDissolveState(neuron.dissolve_state[0])\n    : undefined,\n  spawnAtTimesSeconds: neuron.spawn_at_timestamp_seconds[0],\n  followees: neuron.followees.map(([topic, followees]) =>\n    toFollowees({ topic, followees }),\n  ),\n  visibility: fromNullable(neuron.visibility) as NeuronVisibility | undefined,\n});\n\nexport const toRawNeuron = ({\n  neuron,\n  account,\n}: {\n  neuron: Neuron;\n  account: Uint8Array;\n}): RawNeuron => ({\n  id: nonNullish(neuron.id) ? toNullable({ id: neuron.id }) : [],\n  staked_maturity_e8s_equivalent: toNullable(\n    neuron.stakedMaturityE8sEquivalent,\n  ),\n  controller: nonNullish(neuron.controller)\n    ? toNullable(Principal.from(neuron.controller))\n    : [],\n  recent_ballots: neuron.recentBallots.map((ballot) => ({\n    vote: ballot.vote,\n    proposal_id: nonNullish(ballot.proposalId)\n      ? toNullable({ id: ballot.proposalId })\n      : [],\n  })),\n  kyc_verified: neuron.kycVerified,\n  neuron_type: toNullable(neuron.neuronType),\n  not_for_profit: neuron.notForProfit,\n  cached_neuron_stake_e8s: neuron.cachedNeuronStake,\n  created_timestamp_seconds: neuron.createdTimestampSeconds,\n  auto_stake_maturity: toNullable(neuron.autoStakeMaturity),\n  maturity_e8s_equivalent: neuron.maturityE8sEquivalent,\n  aging_since_timestamp_seconds: neuron.agingSinceTimestampSeconds,\n  neuron_fees_e8s: neuron.neuronFees,\n  hot_keys: neuron.hotKeys.map((p) => Principal.from(p)),\n  account,\n  joined_community_fund_timestamp_seconds: toNullable(\n    neuron.joinedCommunityFundTimestampSeconds,\n  ),\n  dissolve_state: nonNullish(neuron.dissolveState)\n    ? [neuron.dissolveState]\n    : [],\n  spawn_at_timestamp_seconds: toNullable(neuron.spawnAtTimesSeconds),\n  followees: neuron.followees.map((followeesTopic) => [\n    followeesTopic.topic as number,\n    {\n      followees: followeesTopic.followees.map((followee) => ({ id: followee })),\n    },\n  ]),\n  visibility: toNullable(neuron.visibility),\n  // Not kept when converted to Neuron.\n  transfer: [],\n  // Not kept when converted to Neuron.\n  known_neuron_data: [],\n});\n\nconst toBallotInfo = ({ vote, proposal_id }: RawBallotInfo): BallotInfo => ({\n  vote,\n  proposalId: proposal_id.length ? toNeuronId(proposal_id[0]) : undefined,\n});\n\nconst toDissolveState = (dissolveState: RawDissolveState): DissolveState => {\n  if (\"DissolveDelaySeconds\" in dissolveState) {\n    return {\n      DissolveDelaySeconds: dissolveState.DissolveDelaySeconds,\n    };\n  } else {\n    return {\n      WhenDissolvedTimestampSeconds:\n        dissolveState.WhenDissolvedTimestampSeconds,\n    };\n  }\n};\n\nconst toFollowees = ({\n  topic,\n  followees,\n}: {\n  topic: number;\n  followees: RawFollowees;\n}): Followees => ({\n  topic,\n  followees: followees.followees.map(toNeuronId),\n});\n\nconst toNeuronId = ({ id }: RawNeuronId): NeuronId => id;\n\nconst toNeuronIdOrSubaccount = (\n  neuronIdOrSubaccount: RawNeuronIdOrSubaccount,\n): NeuronIdOrSubaccount => {\n  if (\"NeuronId\" in neuronIdOrSubaccount) {\n    return { NeuronId: neuronIdOrSubaccount.NeuronId.id };\n  }\n  if (\"Subaccount\" in neuronIdOrSubaccount) {\n    return {\n      Subaccount: uint8ArrayToArrayOfNumber(\n        Uint8Array.from(neuronIdOrSubaccount.Subaccount),\n      ),\n    };\n  }\n  throw new UnsupportedValueError(neuronIdOrSubaccount);\n};\n\nconst toBallot = ({\n  neuronId,\n  ballot,\n}: {\n  neuronId: bigint;\n  ballot: RawBallot;\n}): Ballot => {\n  const { vote, voting_power: votingPower } = ballot;\n\n  return {\n    neuronId,\n    vote,\n    votingPower,\n  };\n};\n\nconst toProposal = ({\n  title,\n  url,\n  action,\n  summary,\n}: RawProposal): Proposal => ({\n  title: title.length ? title[0] : undefined,\n  url,\n  action: action.length ? toAction(action[0]) : undefined,\n  summary,\n});\n\nconst toAction = (action: RawAction): Action => {\n  if (\"ExecuteNnsFunction\" in action) {\n    const executeNnsFunction = action.ExecuteNnsFunction;\n\n    return {\n      ExecuteNnsFunction: {\n        nnsFunctionId: executeNnsFunction.nns_function,\n      },\n    };\n  }\n  if (\"ManageNeuron\" in action) {\n    const manageNeuron = action.ManageNeuron;\n    return {\n      ManageNeuron: {\n        id: manageNeuron.id.length ? toNeuronId(manageNeuron.id[0]) : undefined,\n        command: manageNeuron.command.length\n          ? toCommand(manageNeuron.command[0])\n          : undefined,\n        neuronIdOrSubaccount: manageNeuron.neuron_id_or_subaccount.length\n          ? toNeuronIdOrSubaccount(manageNeuron.neuron_id_or_subaccount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"ApproveGenesisKyc\" in action) {\n    const approveKyc = action.ApproveGenesisKyc;\n    return {\n      ApproveGenesisKyc: {\n        principals: approveKyc.principals.map((p) => p.toString()),\n      },\n    };\n  }\n  if (\"ManageNetworkEconomics\" in action) {\n    const networkEconomics = action.ManageNetworkEconomics;\n    return {\n      ManageNetworkEconomics: {\n        neuronMinimumStake: networkEconomics.neuron_minimum_stake_e8s,\n        maxProposalsToKeepPerTopic:\n          networkEconomics.max_proposals_to_keep_per_topic,\n        neuronManagementFeePerProposal:\n          networkEconomics.neuron_management_fee_per_proposal_e8s,\n        rejectCost: networkEconomics.reject_cost_e8s,\n        transactionFee: networkEconomics.transaction_fee_e8s,\n        neuronSpawnDissolveDelaySeconds:\n          networkEconomics.neuron_spawn_dissolve_delay_seconds,\n        minimumIcpXdrRate: networkEconomics.minimum_icp_xdr_rate,\n        maximumNodeProviderRewards:\n          networkEconomics.maximum_node_provider_rewards_e8s,\n        neuronsFundEconomics: toNeuronsFundEconomics(\n          networkEconomics.neurons_fund_economics,\n        ),\n      },\n    };\n  }\n  if (\"RewardNodeProvider\" in action) {\n    const rewardNodeProvider = action.RewardNodeProvider;\n    return {\n      RewardNodeProvider: {\n        nodeProvider: rewardNodeProvider.node_provider.length\n          ? toNodeProvider(rewardNodeProvider.node_provider[0])\n          : undefined,\n        amountE8s: rewardNodeProvider.amount_e8s,\n        rewardMode: rewardNodeProvider.reward_mode.length\n          ? toRewardMode(rewardNodeProvider.reward_mode[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RewardNodeProviders\" in action) {\n    const rewardNodeProviders = action.RewardNodeProviders;\n    return {\n      RewardNodeProviders: {\n        useRegistryDerivedRewards: rewardNodeProviders\n          .use_registry_derived_rewards.length\n          ? rewardNodeProviders.use_registry_derived_rewards[0]\n          : undefined,\n        rewards: rewardNodeProviders.rewards.map((r) => ({\n          nodeProvider: r.node_provider.length\n            ? toNodeProvider(r.node_provider[0])\n            : undefined,\n          amountE8s: r.amount_e8s,\n          rewardMode: r.reward_mode.length\n            ? toRewardMode(r.reward_mode[0])\n            : undefined,\n        })),\n      },\n    };\n  }\n  if (\"AddOrRemoveNodeProvider\" in action) {\n    const addOrRemoveNodeProvider = action.AddOrRemoveNodeProvider;\n    return {\n      AddOrRemoveNodeProvider: {\n        change: addOrRemoveNodeProvider.change.length\n          ? toChange(addOrRemoveNodeProvider.change[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Motion\" in action) {\n    const motion = action.Motion;\n    return {\n      Motion: {\n        motionText: motion.motion_text,\n      },\n    };\n  }\n  if (\"SetDefaultFollowees\" in action) {\n    const setDefaultFollowees = action.SetDefaultFollowees;\n    return {\n      SetDefaultFollowees: {\n        defaultFollowees: setDefaultFollowees.default_followees.map(\n          ([topic, followees]) => toFollowees({ topic, followees }),\n        ),\n      },\n    };\n  }\n  if (\"RegisterKnownNeuron\" in action) {\n    const knownNeuron = action.RegisterKnownNeuron;\n    return {\n      RegisterKnownNeuron: toKnownNeuron(knownNeuron),\n    };\n  }\n\n  if (\"SetSnsTokenSwapOpenTimeWindow\" in action) {\n    const SetSnsTokenSwapOpenTimeWindow = action.SetSnsTokenSwapOpenTimeWindow;\n    const request = SetSnsTokenSwapOpenTimeWindow.request?.length\n      ? {\n          openTimeWindow: SetSnsTokenSwapOpenTimeWindow.request[0]\n            .open_time_window.length\n            ? {\n                startTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .start_timestamp_seconds,\n                endTimestampSeconds:\n                  SetSnsTokenSwapOpenTimeWindow.request[0].open_time_window[0]\n                    .end_timestamp_seconds,\n              }\n            : undefined,\n        }\n      : undefined;\n\n    const swapCanisterId = SetSnsTokenSwapOpenTimeWindow?.swap_canister_id\n      .length\n      ? SetSnsTokenSwapOpenTimeWindow.swap_canister_id[0].toString()\n      : undefined;\n\n    return {\n      SetSnsTokenSwapOpenTimeWindow: {\n        request,\n        swapCanisterId,\n      },\n    };\n  }\n\n  if (\"OpenSnsTokenSwap\" in action) {\n    const OpenSnsTokenSwap = action.OpenSnsTokenSwap;\n    const params: Params | undefined = fromNullable(OpenSnsTokenSwap.params);\n\n    return {\n      OpenSnsTokenSwap: {\n        communityFundInvestmentE8s: fromNullable(\n          OpenSnsTokenSwap.community_fund_investment_e8s,\n        ),\n        targetSwapCanisterId: fromNullable(\n          OpenSnsTokenSwap.target_swap_canister_id,\n        ),\n        params: params && {\n          minParticipantIcpE8s: params.min_participant_icp_e8s,\n          maxIcpE8s: params.max_icp_e8s,\n          swapDueTimestampSeconds: params.swap_due_timestamp_seconds,\n          minParticipants: params.min_participants,\n          snsTokenE8s: params.sns_token_e8s,\n          maxParticipantIcpE8s: params.max_participant_icp_e8s,\n          minIcpE8s: params.min_icp_e8s,\n          saleDelaySeconds: fromNullable(params.sale_delay_seconds),\n          neuronBasketConstructionParameters: fromNullable(\n            params.neuron_basket_construction_parameters,\n          ),\n          maxDirectParticipationIcpE8s: fromNullable(\n            params.max_direct_participation_icp_e8s,\n          ),\n          minDirectParticipationIcpE8s: fromNullable(\n            params.min_direct_participation_icp_e8s,\n          ),\n        },\n      },\n    };\n  }\n\n  if (\"CreateServiceNervousSystem\" in action) {\n    const createServiceNervousSystem = action.CreateServiceNervousSystem;\n    return {\n      CreateServiceNervousSystem: {\n        url: fromNullable(createServiceNervousSystem.url),\n        governanceParameters: toGovernanceParameters(\n          fromNullable(createServiceNervousSystem.governance_parameters),\n        ),\n        fallbackControllerPrincipalIds:\n          createServiceNervousSystem.fallback_controller_principal_ids.map(\n            (principalId) => principalId.toString(),\n          ),\n        logo: toImage(fromNullable(createServiceNervousSystem.logo)),\n        name: fromNullable(createServiceNervousSystem.name),\n        ledgerParameters: toLedgerParameters(\n          fromNullable(createServiceNervousSystem.ledger_parameters),\n        ),\n        description: fromNullable(createServiceNervousSystem.description),\n        dappCanisters:\n          (createServiceNervousSystem.dapp_canisters.map(\n            toCanisterIdString,\n          ) as CanisterIdString[]) ?? [],\n        swapParameters: toSwapParameters(\n          fromNullable(createServiceNervousSystem.swap_parameters),\n        ),\n        initialTokenDistribution: toInitialTokenDistribution(\n          fromNullable(createServiceNervousSystem.initial_token_distribution),\n        ),\n      },\n    };\n  }\n\n  if (\"InstallCode\" in action) {\n    const installCode = action.InstallCode;\n    return {\n      InstallCode: {\n        skipStoppingBeforeInstalling: fromNullable(\n          installCode.skip_stopping_before_installing,\n        ),\n        canisterId: installCode.canister_id.length\n          ? installCode.canister_id[0].toString()\n          : undefined,\n        installMode: fromNullable(installCode.install_mode) as\n          | CanisterInstallMode\n          | undefined,\n        wasmModuleHash: uint8ArrayToHexString(\n          fromDefinedNullable(installCode.wasm_module_hash),\n        ),\n        argHash: uint8ArrayToHexString(\n          fromDefinedNullable(installCode.arg_hash),\n        ),\n      },\n    };\n  }\n\n  if (\"StopOrStartCanister\" in action) {\n    const stopOrStartCanister = action.StopOrStartCanister;\n    return {\n      StopOrStartCanister: {\n        canisterId: stopOrStartCanister.canister_id.length\n          ? stopOrStartCanister.canister_id[0].toString()\n          : undefined,\n        action: fromNullable(stopOrStartCanister.action) as\n          | CanisterAction\n          | undefined,\n      },\n    };\n  }\n\n  if (\"UpdateCanisterSettings\" in action) {\n    return {\n      UpdateCanisterSettings: {\n        canisterId: action.UpdateCanisterSettings.canister_id.length\n          ? action.UpdateCanisterSettings.canister_id[0].toString()\n          : undefined,\n        settings: toCanisterSettings(\n          fromDefinedNullable(action.UpdateCanisterSettings.settings),\n        ),\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(action);\n};\n\nconst toTally = (tally: RawTally): Tally => {\n  return {\n    no: tally.no,\n    yes: tally.yes,\n    total: tally.total,\n    timestampSeconds: tally.timestamp_seconds,\n  };\n};\n\nconst toCommand = (command: RawCommand): Command => {\n  if (\"Spawn\" in command) {\n    const spawn = command.Spawn;\n    return {\n      Spawn: {\n        newController: spawn.new_controller.length\n          ? spawn.new_controller[0].toString()\n          : undefined,\n        percentageToSpawn: spawn.percentage_to_spawn.length\n          ? spawn.percentage_to_spawn[0]\n          : 0,\n      },\n    };\n  }\n  if (\"Split\" in command) {\n    const split = command.Split;\n    return {\n      Split: {\n        amount: split.amount_e8s,\n      },\n    };\n  }\n  if (\"Follow\" in command) {\n    const follow = command.Follow;\n    return {\n      Follow: {\n        topic: follow.topic,\n        followees: follow.followees.map(toNeuronId),\n      },\n    };\n  }\n  if (\"ClaimOrRefresh\" in command) {\n    const claimOrRefresh = command.ClaimOrRefresh;\n    return {\n      ClaimOrRefresh: {\n        by: claimOrRefresh.by.length\n          ? toClaimOrRefreshBy(claimOrRefresh.by[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Configure\" in command) {\n    const configure = command.Configure;\n    return {\n      Configure: {\n        operation: configure.operation.length\n          ? toOperation(configure.operation[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"RegisterVote\" in command) {\n    const registerVote = command.RegisterVote;\n    return {\n      RegisterVote: {\n        vote: registerVote.vote,\n        proposal: registerVote.proposal.length\n          ? toNeuronId(registerVote.proposal[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"DisburseToNeuron\" in command) {\n    const disburseToNeuron = command.DisburseToNeuron;\n    return {\n      DisburseToNeuron: {\n        dissolveDelaySeconds: disburseToNeuron.dissolve_delay_seconds,\n        kycVerified: disburseToNeuron.kyc_verified,\n        amount: disburseToNeuron.amount_e8s,\n        newController: disburseToNeuron.new_controller.length\n          ? disburseToNeuron.new_controller[0].toString()\n          : undefined,\n        nonce: disburseToNeuron.nonce,\n      },\n    };\n  }\n  if (\"MergeMaturity\" in command) {\n    const mergeMaturity = command.MergeMaturity;\n    return {\n      MergeMaturity: {\n        percentageToMerge: mergeMaturity.percentage_to_merge,\n      },\n    };\n  }\n  if (\"StakeMaturity\" in command) {\n    const { percentage_to_stake } = command.StakeMaturity;\n    return {\n      StakeMaturity: {\n        percentageToStake: fromNullable(percentage_to_stake),\n      },\n    };\n  }\n  if (\"MakeProposal\" in command) {\n    const makeProposal = command.MakeProposal;\n    return {\n      MakeProposal: {\n        title: makeProposal.title.length ? makeProposal.title[0] : undefined,\n        url: makeProposal.url,\n        action: makeProposal.action.length\n          ? toAction(makeProposal.action[0])\n          : undefined,\n        summary: makeProposal.summary,\n      },\n    };\n  }\n  if (\"Disburse\" in command) {\n    const disburse = command.Disburse;\n    return {\n      Disburse: {\n        toAccountId: disburse.to_account.length\n          ? toAccountIdentifier(disburse.to_account[0])\n          : undefined,\n        amount: disburse.amount.length\n          ? toAmount(disburse.amount[0])\n          : undefined,\n      },\n    };\n  }\n  if (\"Merge\" in command) {\n    const merge = command.Merge;\n    return {\n      Merge: {\n        sourceNeuronId: merge.source_neuron_id.length\n          ? merge.source_neuron_id[0].id\n          : undefined,\n      },\n    };\n  }\n\n  throw new UnsupportedValueError(command);\n};\n\nconst toOperation = (operation: RawOperation): Operation => {\n  if (\"RemoveHotKey\" in operation) {\n    const removeHotKey = operation.RemoveHotKey;\n    return {\n      RemoveHotKey: {\n        hotKeyToRemove: removeHotKey.hot_key_to_remove.length\n          ? removeHotKey.hot_key_to_remove[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"AddHotKey\" in operation) {\n    const addHotKey = operation.AddHotKey;\n    return {\n      AddHotKey: {\n        newHotKey: addHotKey.new_hot_key.length\n          ? addHotKey.new_hot_key[0].toString()\n          : undefined,\n      },\n    };\n  }\n  if (\"StopDissolving\" in operation) {\n    return {\n      StopDissolving: {},\n    };\n  }\n  if (\"StartDissolving\" in operation) {\n    return {\n      StartDissolving: {},\n    };\n  }\n  if (\"IncreaseDissolveDelay\" in operation) {\n    const increaseDissolveDelay = operation.IncreaseDissolveDelay;\n    return {\n      IncreaseDissolveDelay: {\n        additionalDissolveDelaySeconds:\n          increaseDissolveDelay.additional_dissolve_delay_seconds,\n      },\n    };\n  }\n  if (\"JoinCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"LeaveCommunityFund\" in operation) {\n    return operation;\n  }\n  if (\"SetDissolveTimestamp\" in operation) {\n    const setDissolveTimestamp = operation.SetDissolveTimestamp;\n    return {\n      SetDissolveTimestamp: {\n        dissolveTimestampSeconds:\n          setDissolveTimestamp.dissolve_timestamp_seconds,\n      },\n    };\n  }\n  if (\"ChangeAutoStakeMaturity\" in operation) {\n    const {\n      requested_setting_for_auto_stake_maturity:\n        requestedSettingForAutoStakeMaturity,\n    } = operation.ChangeAutoStakeMaturity;\n    return {\n      ChangeAutoStakeMaturity: {\n        requestedSettingForAutoStakeMaturity,\n      },\n    };\n  }\n  if (\"SetVisibility\" in operation) {\n    const setVisibility = operation.SetVisibility;\n    return {\n      SetVisibility: {\n        visibility: fromNullable(setVisibility.visibility) as\n          | NeuronVisibility\n          | undefined,\n      },\n    };\n  }\n  throw new UnsupportedValueError(operation);\n};\n\nconst toChange = (change: RawChange): Change => {\n  if (\"ToRemove\" in change) {\n    return {\n      ToRemove: toNodeProvider(change.ToRemove),\n    };\n  }\n  if (\"ToAdd\" in change) {\n    return {\n      ToAdd: toNodeProvider(change.ToAdd),\n    };\n  }\n  throw new UnsupportedValueError(change);\n};\n\nconst toNeuronsFundEconomics = (\n  neuronsFundEconomics: [] | [RawNeuronsFundEconomics],\n): Option<NeuronsFundEconomics> => {\n  const rawNeuronsFundEconomics = fromNullable(neuronsFundEconomics);\n\n  if (isNullish(rawNeuronsFundEconomics)) {\n    return undefined;\n  }\n\n  const {\n    maximum_icp_xdr_rate,\n    neurons_fund_matched_funding_curve_coefficients,\n    max_theoretical_neurons_fund_participation_amount_xdr,\n    minimum_icp_xdr_rate,\n  } = rawNeuronsFundEconomics;\n\n  const toPercentage = (\n    percentage: [] | [RawPercentage],\n  ): Option<Percentage> => {\n    const rawPercentage = fromNullable(percentage);\n\n    if (isNullish(rawPercentage)) {\n      return undefined;\n    }\n\n    const { basis_points } = rawPercentage;\n\n    const rawBasisPoints = fromNullable(basis_points);\n\n    return nonNullish(rawBasisPoints)\n      ? { basisPoints: rawBasisPoints }\n      : undefined;\n  };\n\n  const toDecimal = (decimal: [] | [RawDecimal]): Option<Decimal> => {\n    const rawDecimal = fromNullable(decimal);\n\n    if (isNullish(rawDecimal)) {\n      return undefined;\n    }\n\n    const { human_readable } = rawDecimal;\n\n    const rawHumanReadable = fromNullable(human_readable);\n\n    return nonNullish(rawHumanReadable)\n      ? { humanReadable: rawHumanReadable }\n      : undefined;\n  };\n\n  const toNeuronsFundMatchedFundingCurveCoefficients = (\n    neurons_fund_matched_funding_curve_coefficients:\n      | []\n      | [RawNeuronsFundMatchedFundingCurveCoefficients],\n  ): Option<NeuronsFundMatchedFundingCurveCoefficients> => {\n    const rawNeuronsFundMatchedFundingCurveCoefficients = fromNullable(\n      neurons_fund_matched_funding_curve_coefficients,\n    );\n\n    if (isNullish(rawNeuronsFundMatchedFundingCurveCoefficients)) {\n      return undefined;\n    }\n\n    const {\n      full_participation_milestone_xdr,\n      one_third_participation_milestone_xdr,\n      contribution_threshold_xdr,\n    } = rawNeuronsFundMatchedFundingCurveCoefficients;\n\n    return {\n      fullParticipationMilestoneXdr: toDecimal(\n        full_participation_milestone_xdr,\n      ),\n      oneThirdParticipationMilestoneXdr: toDecimal(\n        one_third_participation_milestone_xdr,\n      ),\n      contributionThresholdXdr: toDecimal(contribution_threshold_xdr),\n    };\n  };\n\n  return {\n    maximumIcpXdrRate: toPercentage(maximum_icp_xdr_rate),\n    neuronsFundMatchedFundingCurveCoefficients:\n      toNeuronsFundMatchedFundingCurveCoefficients(\n        neurons_fund_matched_funding_curve_coefficients,\n      ),\n    maxTheoreticalNeuronsFundParticipationAmountXdr: toDecimal(\n      max_theoretical_neurons_fund_participation_amount_xdr,\n    ),\n    minimumIcpXdrRate: toPercentage(minimum_icp_xdr_rate),\n  };\n};\n\nconst toNodeProvider = (nodeProvider: RawNodeProvider): NodeProvider => {\n  return {\n    id: nodeProvider.id.length ? nodeProvider.id[0].toString() : undefined,\n    rewardAccount: nodeProvider.reward_account.length\n      ? toAccountIdentifier(nodeProvider.reward_account[0])\n      : undefined,\n  };\n};\n\nconst toAmount = (amount: RawAmount): E8s => {\n  return amount.e8s;\n};\n\nconst toAccountIdentifier = (\n  accountIdentifier: RawAccountIdentifier,\n): AccountIdentifierHex =>\n  accountIdentifierFromBytes(new Uint8Array(accountIdentifier.hash));\n\nconst toRewardMode = (rewardMode: RawRewardMode): RewardMode => {\n  if (\"RewardToNeuron\" in rewardMode) {\n    return {\n      RewardToNeuron: {\n        dissolveDelaySeconds: rewardMode.RewardToNeuron.dissolve_delay_seconds,\n      },\n    };\n  } else if (\"RewardToAccount\" in rewardMode) {\n    return {\n      RewardToAccount: {\n        toAccount:\n          rewardMode.RewardToAccount.to_account != undefined &&\n          rewardMode.RewardToAccount.to_account.length\n            ? toAccountIdentifier(rewardMode.RewardToAccount.to_account[0])\n            : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(rewardMode);\n  }\n};\n\nconst toClaimOrRefreshBy = (by: RawBy): By => {\n  if (\"NeuronIdOrSubaccount\" in by) {\n    return {\n      NeuronIdOrSubaccount: {},\n    };\n  } else if (\"Memo\" in by) {\n    return {\n      Memo: by.Memo,\n    };\n  } else if (\"MemoAndController\" in by) {\n    return {\n      MemoAndController: {\n        memo: by.MemoAndController.memo,\n        controller: by.MemoAndController.controller.length\n          ? by.MemoAndController.controller[0]\n          : undefined,\n      },\n    };\n  } else {\n    // Ensures all cases are covered at compile-time.\n    throw new UnsupportedValueError(by);\n  }\n};\n\nexport const toProposalInfo = (\n  proposalInfo: RawProposalInfo,\n): ProposalInfo => ({\n  id: proposalInfo.id.length ? toNeuronId(proposalInfo.id[0]) : undefined,\n  ballots: proposalInfo.ballots.map((b) =>\n    toBallot({ neuronId: b[0], ballot: b[1] }),\n  ),\n  rejectCost: proposalInfo.reject_cost_e8s,\n  proposalTimestampSeconds: proposalInfo.proposal_timestamp_seconds,\n  rewardEventRound: proposalInfo.reward_event_round,\n  failedTimestampSeconds: proposalInfo.failed_timestamp_seconds,\n  deadlineTimestampSeconds: fromNullable(\n    proposalInfo.deadline_timestamp_seconds,\n  ),\n  decidedTimestampSeconds: proposalInfo.decided_timestamp_seconds,\n  proposal: proposalInfo.proposal.length\n    ? toProposal(proposalInfo.proposal[0])\n    : undefined,\n  proposer: proposalInfo.proposer.length\n    ? toNeuronId(proposalInfo.proposer[0])\n    : undefined,\n  latestTally: proposalInfo.latest_tally.length\n    ? toTally(proposalInfo.latest_tally[0])\n    : undefined,\n  executedTimestampSeconds: proposalInfo.executed_timestamp_seconds,\n  topic: proposalInfo.topic,\n  status: proposalInfo.status,\n  rewardStatus: proposalInfo.reward_status,\n});\n\nexport const toArrayOfNeuronInfo = ({\n  response: { neuron_infos, full_neurons },\n  canisterId,\n}: {\n  response: RawListNeuronsResponse;\n  canisterId: Principal;\n}): Array<NeuronInfo> =>\n  neuron_infos.map(([id, neuronInfo]) =>\n    toNeuronInfo({\n      neuronId: id,\n      neuronInfo,\n      rawNeuron: full_neurons.find(\n        (neuron) => neuron.id.length && neuron.id[0].id === id,\n      ),\n      canisterId,\n    }),\n  );\n\nexport const toListProposalsResponse = ({\n  proposal_info,\n}: RawListProposalInfoResponse): ListProposalsResponse => ({\n  proposals: proposal_info.map(toProposalInfo),\n});\n\nexport const toKnownNeuron = ({\n  id,\n  known_neuron_data,\n}: RawKnownNeuron): KnownNeuron => {\n  return {\n    id: id[0]?.id ?? BigInt(0),\n    name: known_neuron_data[0]?.name ?? \"\",\n    description: known_neuron_data[0]?.description[0] ?? \"\",\n  };\n};\n\nconst toPercentage = (\n  percentage: RawPercentage | undefined,\n): Percentage | undefined => {\n  return percentage === undefined\n    ? undefined\n    : {\n        basisPoints: fromNullable(percentage.basis_points),\n      };\n};\n\nconst toDuration = (\n  duration: RawDuration | undefined,\n): Duration | undefined => {\n  return duration === undefined\n    ? undefined\n    : {\n        seconds: fromNullable(duration.seconds),\n      };\n};\n\nconst toGlobalTimeOfDay = (\n  time: RawGlobalTimeOfDay | undefined,\n): GlobalTimeOfDay | undefined => {\n  return time === undefined\n    ? undefined\n    : {\n        secondsAfterUtcMidnight: fromNullable(time.seconds_after_utc_midnight),\n      };\n};\n\nconst toCountries = (\n  countries: RawCountries | undefined,\n): Countries | undefined => {\n  return countries === undefined\n    ? undefined\n    : ({\n        isoCodes: countries.iso_codes,\n      } as Countries);\n};\n\nconst toTokens = (tokens: RawTokens | undefined): Tokens | undefined => {\n  return tokens === undefined\n    ? undefined\n    : {\n        e8s: fromNullable(tokens.e8s),\n      };\n};\n\nconst toCanisterIdString = (\n  canister: RawCanister | undefined,\n): CanisterIdString | undefined => {\n  return canister === undefined\n    ? undefined\n    : canister.id.length === 0\n      ? undefined\n      : fromDefinedNullable(canister.id).toString();\n};\n\nconst toImage = (image: RawImage | undefined): Image | undefined => {\n  return image === undefined\n    ? undefined\n    : {\n        base64Encoding: fromNullable(image.base64_encoding),\n      };\n};\n\nconst toLedgerParameters = (\n  ledgerParameters: RawLedgerParameters | undefined,\n): LedgerParameters | undefined => {\n  return ledgerParameters === undefined\n    ? undefined\n    : {\n        transactionFee: toTokens(\n          fromNullable(ledgerParameters.transaction_fee),\n        ),\n        tokenSymbol: fromNullable(ledgerParameters.token_symbol),\n        tokenLogo: toImage(fromNullable(ledgerParameters.token_logo)),\n        tokenName: fromNullable(ledgerParameters.token_name),\n      };\n};\n\nconst toVotingRewardParameters = (\n  votingRewardParameters: RawVotingRewardParameters | undefined,\n): VotingRewardParameters | undefined => {\n  return votingRewardParameters === undefined\n    ? undefined\n    : {\n        rewardRateTransitionDuration: toDuration(\n          fromNullable(votingRewardParameters.reward_rate_transition_duration),\n        ),\n        initialRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.initial_reward_rate),\n        ),\n        finalRewardRate: toPercentage(\n          fromNullable(votingRewardParameters.final_reward_rate),\n        ),\n      };\n};\n\nconst toGovernanceParameters = (\n  governanceParameters: RawGovernanceParameters | undefined,\n): GovernanceParameters | undefined => {\n  return governanceParameters === undefined\n    ? undefined\n    : {\n        neuronMaximumDissolveDelayBonus: toPercentage(\n          fromNullable(\n            governanceParameters.neuron_maximum_dissolve_delay_bonus,\n          ),\n        ),\n        neuronMaximumAgeForAgeBonus: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_age_for_age_bonus),\n        ),\n        neuronMaximumDissolveDelay: toDuration(\n          fromNullable(governanceParameters.neuron_maximum_dissolve_delay),\n        ),\n        neuronMinimumDissolveDelayToVote: toDuration(\n          fromNullable(\n            governanceParameters.neuron_minimum_dissolve_delay_to_vote,\n          ),\n        ),\n        neuronMaximumAgeBonus: toPercentage(\n          fromNullable(governanceParameters.neuron_maximum_age_bonus),\n        ),\n        neuronMinimumStake: toTokens(\n          fromNullable(governanceParameters.neuron_minimum_stake),\n        ),\n        proposalWaitForQuietDeadlineIncrease: toDuration(\n          fromNullable(\n            governanceParameters.proposal_wait_for_quiet_deadline_increase,\n          ),\n        ),\n        proposalInitialVotingPeriod: toDuration(\n          fromNullable(governanceParameters.proposal_initial_voting_period),\n        ),\n        proposalRejectionFee: toTokens(\n          fromNullable(governanceParameters.proposal_rejection_fee),\n        ),\n        votingRewardParameters: toVotingRewardParameters(\n          fromNullable(governanceParameters.voting_reward_parameters),\n        ),\n      };\n};\n\nconst toNeuronBasketConstructionParameters = (\n  neuronBasketConstructionParameters:\n    | RawNeuronBasketConstructionParameters\n    | undefined,\n): NeuronBasketConstructionParameters | undefined => {\n  return neuronBasketConstructionParameters === undefined\n    ? undefined\n    : {\n        dissolveDelayInterval: toDuration(\n          fromNullable(\n            neuronBasketConstructionParameters.dissolve_delay_interval,\n          ),\n        ),\n        count: fromNullable(neuronBasketConstructionParameters.count),\n      };\n};\n\nconst toSwapParameters = (\n  swapParameters: RawSwapParameters | undefined,\n): SwapParameters | undefined => {\n  return swapParameters === undefined\n    ? undefined\n    : {\n        minimumParticipants: fromNullable(swapParameters.minimum_participants),\n        duration: toDuration(fromNullable(swapParameters.duration)),\n        neuronBasketConstructionParameters:\n          toNeuronBasketConstructionParameters(\n            fromNullable(swapParameters.neuron_basket_construction_parameters),\n          ),\n        confirmationText: fromNullable(swapParameters.confirmation_text),\n        maximumParticipantIcp: toTokens(\n          fromNullable(swapParameters.maximum_participant_icp),\n        ),\n        neuronsFundInvestmentIcp: toTokens(\n          fromNullable(swapParameters.neurons_fund_investment_icp),\n        ),\n        minimumIcp: toTokens(fromNullable(swapParameters.minimum_icp)),\n        minimumParticipantIcp: toTokens(\n          fromNullable(swapParameters.minimum_participant_icp),\n        ),\n        startTime: toGlobalTimeOfDay(fromNullable(swapParameters.start_time)),\n        maximumIcp: toTokens(fromNullable(swapParameters.maximum_icp)),\n        restrictedCountries: toCountries(\n          fromNullable(swapParameters.restricted_countries),\n        ),\n        maxDirectParticipationIcp: toTokens(\n          fromNullable(swapParameters.maximum_direct_participation_icp),\n        ),\n        minDirectParticipationIcp: toTokens(\n          fromNullable(swapParameters.minimum_direct_participation_icp),\n        ),\n        neuronsFundParticipation: fromNullable(\n          swapParameters.neurons_fund_participation,\n        ),\n      };\n};\n\nconst toSwapDistribution = (\n  swapDistribution: RawSwapDistribution | undefined,\n): SwapDistribution | undefined => {\n  return swapDistribution === undefined\n    ? undefined\n    : {\n        total: toTokens(fromNullable(swapDistribution.total)),\n      };\n};\n\nconst toNeuronDistribution = (\n  neuronDistribution: RawNeuronDistribution | undefined,\n): NeuronDistribution | undefined => {\n  return neuronDistribution === undefined\n    ? undefined\n    : {\n        controller:\n          neuronDistribution.controller.length === 0\n            ? undefined\n            : neuronDistribution.controller[0].toString(),\n        dissolveDelay: toDuration(\n          fromNullable(neuronDistribution.dissolve_delay),\n        ),\n        memo: fromNullable(neuronDistribution.memo),\n        vestingPeriod: toDuration(\n          fromNullable(neuronDistribution.vesting_period),\n        ),\n        stake: toTokens(fromNullable(neuronDistribution.stake)),\n      };\n};\n\nconst toDeveloperDistribution = (\n  developerDistribution: RawDeveloperDistribution | undefined,\n): DeveloperDistribution | undefined => {\n  return developerDistribution === undefined\n    ? undefined\n    : {\n        developerNeurons: developerDistribution.developer_neurons.map(\n          toNeuronDistribution,\n        ) as Array<NeuronDistribution>,\n      };\n};\n\nconst toInitialTokenDistribution = (\n  initialTokenDistribution: RawInitialTokenDistribution | undefined,\n): InitialTokenDistribution | undefined => {\n  return initialTokenDistribution === undefined\n    ? undefined\n    : {\n        treasuryDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.treasury_distribution),\n        ),\n        developerDistribution: toDeveloperDistribution(\n          fromNullable(initialTokenDistribution.developer_distribution),\n        ),\n        swapDistribution: toSwapDistribution(\n          fromNullable(initialTokenDistribution.swap_distribution),\n        ),\n      };\n};\n\nconst toCanisterSettings = (\n  canisterSettings: RawCanisterSettings | undefined,\n): CanisterSettings | undefined => {\n  return canisterSettings === undefined\n    ? undefined\n    : {\n        freezingThreshold: fromNullable(canisterSettings.freezing_threshold),\n        controllers: fromNullable(\n          canisterSettings.controllers,\n        )?.controllers.map((controller) => controller.toString()),\n        logVisibility: fromNullable(canisterSettings.log_visibility) as\n          | LogVisibility\n          | undefined,\n        wasmMemoryLimit: fromNullable(canisterSettings.wasm_memory_limit),\n        computeAllocation: fromNullable(canisterSettings.compute_allocation),\n        memoryAllocation: fromNullable(canisterSettings.memory_allocation),\n      };\n};\n", "import type {\n  Command_1,\n  _SERVICE as GovernanceService,\n  ManageNeuronRequest,\n  ManageNeuronResponse,\n} from \"../../../candid/governance\";\nimport { GovernanceError } from \"../../errors/governance.errors\";\n\n/**\n * Checks a Manage Neuron Response for error and returns successful response data.\n *\n * @throws {@link GovernanceError}\n */\nexport const getSuccessfulCommandFromResponse = (\n  response: ManageNeuronResponse,\n): Command_1 => {\n  const { command } = response;\n  const data = command[0];\n  if (!data) {\n    throw new GovernanceError({\n      error_message: \"Error updating neuron\",\n      error_type: 0,\n    });\n  }\n\n  if (\"Error\" in data) {\n    throw new GovernanceError(data.Error);\n  }\n  return data;\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const manageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuronRequest;\n  service: GovernanceService;\n}): Promise<Command_1> => {\n  const response = await service.manage_neuron(request);\n  // We use it only to assert that there are no errors\n  return getSuccessfulCommandFromResponse(response);\n};\n\n/**\n * @throws {@link GovernanceError}\n */\nexport const simulateManageNeuron = async ({\n  request,\n  service,\n}: {\n  request: ManageNeuronRequest;\n  service: GovernanceService;\n}): Promise<Command_1> => {\n  const response = await service.simulate_manage_neuron(request);\n  return getSuccessfulCommandFromResponse(response);\n};\n", "// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_TOKEN = BigInt(100000000);\n", "import type { ActorSubclass } from \"@dfinity/agent\";\nimport { principalToAccountIdentifier } from \"@dfinity/ledger-icp\";\nimport type { Principal } from \"@dfinity/principal\";\nimport {\n  assertNonNullish,\n  createServices,\n  type CanisterOptions,\n} from \"@dfinity/utils\";\nimport { idlFactory } from \"../candid/governance.idl\";\nimport type { _SERVICE as GovernanceService } from \"../candid/governance_test\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/governance_test.certified.idl\";\nimport { fromListNeurons } from \"./canisters/governance/request.converters\";\nimport { toRawNeuron } from \"./canisters/governance/response.converters\";\nimport { MAINNET_GOVERNANCE_CANISTER_ID } from \"./constants/canister_ids\";\nimport type { Neuron } from \"./types/governance_converters\";\n\nexport class GovernanceTestCanister {\n  private constructor(\n    private readonly canisterId: Principal,\n    private readonly certifiedService: ActorSubclass<GovernanceService>,\n  ) {\n    this.canisterId = canisterId;\n    this.certifiedService = certifiedService;\n  }\n\n  public static create(options: CanisterOptions<GovernanceService> = {}) {\n    const canisterId: Principal =\n      options.canisterId ?? MAINNET_GOVERNANCE_CANISTER_ID;\n\n    const { certifiedService } = createServices<GovernanceService>({\n      options: {\n        ...options,\n        canisterId,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new GovernanceTestCanister(canisterId, certifiedService);\n  }\n\n  /**\n   * Test method to update fields of a neuron.\n   *\n   * Only available in the governance test canister.\n   */\n  async updateNeuron(neuron: Neuron) {\n    assertNonNullish(neuron.id);\n    const rawListNeuronsRequest = fromListNeurons({ neuronIds: [neuron.id] });\n    const rawListNeuronsResponse = await this.certifiedService.list_neurons(\n      rawListNeuronsRequest,\n    );\n    const currentNeuron = rawListNeuronsResponse.full_neurons[0];\n    const currentAccountIdentifier = principalToAccountIdentifier(\n      this.canisterId,\n      Uint8Array.from(currentNeuron.account),\n    );\n    if (currentAccountIdentifier !== neuron.accountIdentifier) {\n      throw new Error(\"Neuron account identifier can't be changed\");\n    }\n    const rawNeuron = toRawNeuron({\n      neuron,\n      account: Uint8Array.from(currentNeuron.account),\n    });\n    return this.certifiedService.update_neuron(rawNeuron);\n  }\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/governance_test.did */\nexport const idlFactory = ({ IDL }) => {\n  const ManageNeuronRequest = IDL.Rec();\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  const Result = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : GovernanceError });\n  const Result_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'NeuronId' : NeuronId,\n  });\n  const ClaimOrRefreshNeuronFromAccountResponse = IDL.Record({\n    'result' : IDL.Opt(Result_1),\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : Neuron, 'Err' : GovernanceError });\n  const Result_3 = IDL.Variant({\n    'Ok' : GovernanceCachedMetrics,\n    'Err' : GovernanceError,\n  });\n  const Result_4 = IDL.Variant({\n    'Ok' : MonthlyNodeProviderRewards,\n    'Err' : GovernanceError,\n  });\n  const NeuronInfo = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'created_timestamp_seconds' : IDL.Nat64,\n    'state' : IDL.Int32,\n    'stake_e8s' : IDL.Nat64,\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'retrieved_at_timestamp_seconds' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'voting_power' : IDL.Nat64,\n    'age_seconds' : IDL.Nat64,\n  });\n  const Result_5 = IDL.Variant({ 'Ok' : NeuronInfo, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoRequest = IDL.Record({\n    'nns_proposal_id' : IDL.Opt(ProposalId),\n  });\n  const NeuronsFundAuditInfo = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const Ok = IDL.Record({\n    'neurons_fund_audit_info' : IDL.Opt(NeuronsFundAuditInfo),\n  });\n  const Result_6 = IDL.Variant({ 'Ok' : Ok, 'Err' : GovernanceError });\n  const GetNeuronsFundAuditInfoResponse = IDL.Record({\n    'result' : IDL.Opt(Result_6),\n  });\n  const Result_7 = IDL.Variant({\n    'Ok' : NodeProvider,\n    'Err' : GovernanceError,\n  });\n  const ProposalInfo = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'status' : IDL.Int32,\n    'topic' : IDL.Int32,\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'deadline_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'reward_status' : IDL.Int32,\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'executed_timestamp_seconds' : IDL.Nat64,\n  });\n  const ListKnownNeuronsResponse = IDL.Record({\n    'known_neurons' : IDL.Vec(KnownNeuron),\n  });\n  const ListNeurons = IDL.Record({\n    'include_public_neurons_in_full_neurons' : IDL.Opt(IDL.Bool),\n    'neuron_ids' : IDL.Vec(IDL.Nat64),\n    'include_empty_neurons_readable_by_caller' : IDL.Opt(IDL.Bool),\n    'include_neurons_readable_by_caller' : IDL.Bool,\n  });\n  const ListNeuronsResponse = IDL.Record({\n    'neuron_infos' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInfo)),\n    'full_neurons' : IDL.Vec(Neuron),\n  });\n  const DateRangeFilter = IDL.Record({\n    'start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'end_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const ListNodeProviderRewardsRequest = IDL.Record({\n    'date_filter' : IDL.Opt(DateRangeFilter),\n  });\n  const ListNodeProviderRewardsResponse = IDL.Record({\n    'rewards' : IDL.Vec(MonthlyNodeProviderRewards),\n  });\n  const ListNodeProvidersResponse = IDL.Record({\n    'node_providers' : IDL.Vec(NodeProvider),\n  });\n  const ListProposalInfo = IDL.Record({\n    'include_reward_status' : IDL.Vec(IDL.Int32),\n    'omit_large_fields' : IDL.Opt(IDL.Bool),\n    'before_proposal' : IDL.Opt(ProposalId),\n    'limit' : IDL.Nat32,\n    'exclude_topic' : IDL.Vec(IDL.Int32),\n    'include_all_manage_neuron_proposals' : IDL.Opt(IDL.Bool),\n    'include_status' : IDL.Vec(IDL.Int32),\n  });\n  const ListProposalInfoResponse = IDL.Record({\n    'proposal_info' : IDL.Vec(ProposalInfo),\n  });\n  const InstallCodeRequest = IDL.Record({\n    'arg' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'wasm_module' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const ProposalActionRequest = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuronRequest,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCodeRequest,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  const MakeProposalRequest = IDL.Record({\n    'url' : IDL.Text,\n    'title' : IDL.Opt(IDL.Text),\n    'action' : IDL.Opt(ProposalActionRequest),\n    'summary' : IDL.Text,\n  });\n  const ManageNeuronCommandRequest = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : MakeProposalRequest,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  ManageNeuronRequest.fill(\n    IDL.Record({\n      'id' : IDL.Opt(NeuronId),\n      'command' : IDL.Opt(ManageNeuronCommandRequest),\n      'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n    })\n  );\n  const SpawnResponse = IDL.Record({ 'created_neuron_id' : IDL.Opt(NeuronId) });\n  const ClaimOrRefreshResponse = IDL.Record({\n    'refreshed_neuron_id' : IDL.Opt(NeuronId),\n  });\n  const MergeResponse = IDL.Record({\n    'target_neuron' : IDL.Opt(Neuron),\n    'source_neuron' : IDL.Opt(Neuron),\n    'target_neuron_info' : IDL.Opt(NeuronInfo),\n    'source_neuron_info' : IDL.Opt(NeuronInfo),\n  });\n  const MakeProposalResponse = IDL.Record({\n    'message' : IDL.Opt(IDL.Text),\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const StakeMaturityResponse = IDL.Record({\n    'maturity_e8s' : IDL.Nat64,\n    'staked_maturity_e8s' : IDL.Nat64,\n  });\n  const MergeMaturityResponse = IDL.Record({\n    'merged_maturity_e8s' : IDL.Nat64,\n    'new_stake_e8s' : IDL.Nat64,\n  });\n  const DisburseResponse = IDL.Record({ 'transfer_block_height' : IDL.Nat64 });\n  const Command_1 = IDL.Variant({\n    'Error' : GovernanceError,\n    'Spawn' : SpawnResponse,\n    'Split' : SpawnResponse,\n    'Follow' : IDL.Record({}),\n    'ClaimOrRefresh' : ClaimOrRefreshResponse,\n    'Configure' : IDL.Record({}),\n    'RegisterVote' : IDL.Record({}),\n    'Merge' : MergeResponse,\n    'DisburseToNeuron' : SpawnResponse,\n    'MakeProposal' : MakeProposalResponse,\n    'StakeMaturity' : StakeMaturityResponse,\n    'MergeMaturity' : MergeMaturityResponse,\n    'Disburse' : DisburseResponse,\n  });\n  const ManageNeuronResponse = IDL.Record({ 'command' : IDL.Opt(Command_1) });\n  const Committed = IDL.Record({\n    'total_direct_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_contribution_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_8 = IDL.Variant({\n    'Committed' : Committed,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleCommunityFundParticipation = IDL.Record({\n    'result' : IDL.Opt(Result_8),\n    'open_sns_token_swap_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const Committed_1 = IDL.Record({\n    'total_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'total_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Result_9 = IDL.Variant({\n    'Committed' : Committed_1,\n    'Aborted' : IDL.Record({}),\n  });\n  const SettleNeuronsFundParticipationRequest = IDL.Record({\n    'result' : IDL.Opt(Result_9),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuron = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Opt(Principals),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'nns_neuron_id' : IDL.Opt(IDL.Nat64),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const Ok_1 = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuron),\n  });\n  const Result_10 = IDL.Variant({ 'Ok' : Ok_1, 'Err' : GovernanceError });\n  const SettleNeuronsFundParticipationResponse = IDL.Record({\n    'result' : IDL.Opt(Result_10),\n  });\n  const UpdateNodeProvider = IDL.Record({\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  return IDL.Service({\n    'claim_gtc_neurons' : IDL.Func(\n        [IDL.Principal, IDL.Vec(NeuronId)],\n        [Result],\n        [],\n      ),\n    'claim_or_refresh_neuron_from_account' : IDL.Func(\n        [ClaimOrRefreshNeuronFromAccount],\n        [ClaimOrRefreshNeuronFromAccountResponse],\n        [],\n      ),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'get_full_neuron' : IDL.Func([IDL.Nat64], [Result_2], []),\n    'get_full_neuron_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_2],\n        [],\n      ),\n    'get_latest_reward_event' : IDL.Func([], [RewardEvent], []),\n    'get_metrics' : IDL.Func([], [Result_3], []),\n    'get_monthly_node_provider_rewards' : IDL.Func([], [Result_4], []),\n    'get_most_recent_monthly_node_provider_rewards' : IDL.Func(\n        [],\n        [IDL.Opt(MonthlyNodeProviderRewards)],\n        [],\n      ),\n    'get_network_economics_parameters' : IDL.Func([], [NetworkEconomics], []),\n    'get_neuron_ids' : IDL.Func([], [IDL.Vec(IDL.Nat64)], []),\n    'get_neuron_info' : IDL.Func([IDL.Nat64], [Result_5], []),\n    'get_neuron_info_by_id_or_subaccount' : IDL.Func(\n        [NeuronIdOrSubaccount],\n        [Result_5],\n        [],\n      ),\n    'get_neurons_fund_audit_info' : IDL.Func(\n        [GetNeuronsFundAuditInfoRequest],\n        [GetNeuronsFundAuditInfoResponse],\n        [],\n      ),\n    'get_node_provider_by_caller' : IDL.Func([IDL.Null], [Result_7], []),\n    'get_pending_proposals' : IDL.Func([], [IDL.Vec(ProposalInfo)], []),\n    'get_proposal_info' : IDL.Func([IDL.Nat64], [IDL.Opt(ProposalInfo)], []),\n    'get_restore_aging_summary' : IDL.Func([], [RestoreAgingSummary], []),\n    'list_known_neurons' : IDL.Func([], [ListKnownNeuronsResponse], []),\n    'list_neurons' : IDL.Func([ListNeurons], [ListNeuronsResponse], []),\n    'list_node_provider_rewards' : IDL.Func(\n        [ListNodeProviderRewardsRequest],\n        [ListNodeProviderRewardsResponse],\n        [],\n      ),\n    'list_node_providers' : IDL.Func([], [ListNodeProvidersResponse], []),\n    'list_proposals' : IDL.Func(\n        [ListProposalInfo],\n        [ListProposalInfoResponse],\n        [],\n      ),\n    'manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'settle_community_fund_participation' : IDL.Func(\n        [SettleCommunityFundParticipation],\n        [Result],\n        [],\n      ),\n    'settle_neurons_fund_participation' : IDL.Func(\n        [SettleNeuronsFundParticipationRequest],\n        [SettleNeuronsFundParticipationResponse],\n        [],\n      ),\n    'simulate_manage_neuron' : IDL.Func(\n        [ManageNeuronRequest],\n        [ManageNeuronResponse],\n        [],\n      ),\n    'transfer_gtc_neuron' : IDL.Func([NeuronId, NeuronId], [Result], []),\n    'update_neuron' : IDL.Func([Neuron], [IDL.Opt(GovernanceError)], []),\n    'update_node_provider' : IDL.Func([UpdateNodeProvider], [Result], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const Proposal = IDL.Rec();\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Followees = IDL.Record({ 'followees' : IDL.Vec(NeuronId) });\n  const KnownNeuronData = IDL.Record({\n    'name' : IDL.Text,\n    'description' : IDL.Opt(IDL.Text),\n  });\n  const KnownNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n  });\n  const Spawn = IDL.Record({\n    'percentage_to_spawn' : IDL.Opt(IDL.Nat32),\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Opt(IDL.Nat64),\n  });\n  const Split = IDL.Record({ 'amount_e8s' : IDL.Nat64 });\n  const Follow = IDL.Record({\n    'topic' : IDL.Int32,\n    'followees' : IDL.Vec(NeuronId),\n  });\n  const ClaimOrRefreshNeuronFromAccount = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n  });\n  const By = IDL.Variant({\n    'NeuronIdOrSubaccount' : IDL.Record({}),\n    'MemoAndController' : ClaimOrRefreshNeuronFromAccount,\n    'Memo' : IDL.Nat64,\n  });\n  const ClaimOrRefresh = IDL.Record({ 'by' : IDL.Opt(By) });\n  const RemoveHotKey = IDL.Record({\n    'hot_key_to_remove' : IDL.Opt(IDL.Principal),\n  });\n  const AddHotKey = IDL.Record({ 'new_hot_key' : IDL.Opt(IDL.Principal) });\n  const ChangeAutoStakeMaturity = IDL.Record({\n    'requested_setting_for_auto_stake_maturity' : IDL.Bool,\n  });\n  const IncreaseDissolveDelay = IDL.Record({\n    'additional_dissolve_delay_seconds' : IDL.Nat32,\n  });\n  const SetVisibility = IDL.Record({ 'visibility' : IDL.Opt(IDL.Int32) });\n  const SetDissolveTimestamp = IDL.Record({\n    'dissolve_timestamp_seconds' : IDL.Nat64,\n  });\n  const Operation = IDL.Variant({\n    'RemoveHotKey' : RemoveHotKey,\n    'AddHotKey' : AddHotKey,\n    'ChangeAutoStakeMaturity' : ChangeAutoStakeMaturity,\n    'StopDissolving' : IDL.Record({}),\n    'StartDissolving' : IDL.Record({}),\n    'IncreaseDissolveDelay' : IncreaseDissolveDelay,\n    'SetVisibility' : SetVisibility,\n    'JoinCommunityFund' : IDL.Record({}),\n    'LeaveCommunityFund' : IDL.Record({}),\n    'SetDissolveTimestamp' : SetDissolveTimestamp,\n  });\n  const Configure = IDL.Record({ 'operation' : IDL.Opt(Operation) });\n  const ProposalId = IDL.Record({ 'id' : IDL.Nat64 });\n  const RegisterVote = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal' : IDL.Opt(ProposalId),\n  });\n  const Merge = IDL.Record({ 'source_neuron_id' : IDL.Opt(NeuronId) });\n  const DisburseToNeuron = IDL.Record({\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'kyc_verified' : IDL.Bool,\n    'amount_e8s' : IDL.Nat64,\n    'new_controller' : IDL.Opt(IDL.Principal),\n    'nonce' : IDL.Nat64,\n  });\n  const StakeMaturity = IDL.Record({\n    'percentage_to_stake' : IDL.Opt(IDL.Nat32),\n  });\n  const MergeMaturity = IDL.Record({ 'percentage_to_merge' : IDL.Nat32 });\n  const AccountIdentifier = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const Amount = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Disburse = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n    'amount' : IDL.Opt(Amount),\n  });\n  const Command = IDL.Variant({\n    'Spawn' : Spawn,\n    'Split' : Split,\n    'Follow' : Follow,\n    'ClaimOrRefresh' : ClaimOrRefresh,\n    'Configure' : Configure,\n    'RegisterVote' : RegisterVote,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'MakeProposal' : Proposal,\n    'StakeMaturity' : StakeMaturity,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronIdOrSubaccount = IDL.Variant({\n    'Subaccount' : IDL.Vec(IDL.Nat8),\n    'NeuronId' : NeuronId,\n  });\n  const ManageNeuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'command' : IDL.Opt(Command),\n    'neuron_id_or_subaccount' : IDL.Opt(NeuronIdOrSubaccount),\n  });\n  const Controllers = IDL.Record({ 'controllers' : IDL.Vec(IDL.Principal) });\n  const CanisterSettings = IDL.Record({\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Opt(Controllers),\n    'log_visibility' : IDL.Opt(IDL.Int32),\n    'wasm_memory_limit' : IDL.Opt(IDL.Nat64),\n    'memory_allocation' : IDL.Opt(IDL.Nat64),\n    'compute_allocation' : IDL.Opt(IDL.Nat64),\n  });\n  const UpdateCanisterSettings = IDL.Record({\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'settings' : IDL.Opt(CanisterSettings),\n  });\n  const InstallCode = IDL.Record({\n    'skip_stopping_before_installing' : IDL.Opt(IDL.Bool),\n    'wasm_module_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'canister_id' : IDL.Opt(IDL.Principal),\n    'arg_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'install_mode' : IDL.Opt(IDL.Int32),\n  });\n  const StopOrStartCanister = IDL.Record({\n    'action' : IDL.Opt(IDL.Int32),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const Percentage = IDL.Record({ 'basis_points' : IDL.Opt(IDL.Nat64) });\n  const Duration = IDL.Record({ 'seconds' : IDL.Opt(IDL.Nat64) });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Opt(IDL.Nat64) });\n  const VotingRewardParameters = IDL.Record({\n    'reward_rate_transition_duration' : IDL.Opt(Duration),\n    'initial_reward_rate' : IDL.Opt(Percentage),\n    'final_reward_rate' : IDL.Opt(Percentage),\n  });\n  const GovernanceParameters = IDL.Record({\n    'neuron_maximum_dissolve_delay_bonus' : IDL.Opt(Percentage),\n    'neuron_maximum_age_for_age_bonus' : IDL.Opt(Duration),\n    'neuron_maximum_dissolve_delay' : IDL.Opt(Duration),\n    'neuron_minimum_dissolve_delay_to_vote' : IDL.Opt(Duration),\n    'neuron_maximum_age_bonus' : IDL.Opt(Percentage),\n    'neuron_minimum_stake' : IDL.Opt(Tokens),\n    'proposal_wait_for_quiet_deadline_increase' : IDL.Opt(Duration),\n    'proposal_initial_voting_period' : IDL.Opt(Duration),\n    'proposal_rejection_fee' : IDL.Opt(Tokens),\n    'voting_reward_parameters' : IDL.Opt(VotingRewardParameters),\n  });\n  const Image = IDL.Record({ 'base64_encoding' : IDL.Opt(IDL.Text) });\n  const LedgerParameters = IDL.Record({\n    'transaction_fee' : IDL.Opt(Tokens),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'token_logo' : IDL.Opt(Image),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval' : IDL.Opt(Duration),\n    'count' : IDL.Opt(IDL.Nat64),\n  });\n  const GlobalTimeOfDay = IDL.Record({\n    'seconds_after_utc_midnight' : IDL.Opt(IDL.Nat64),\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SwapParameters = IDL.Record({\n    'minimum_participants' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'duration' : IDL.Opt(Duration),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'maximum_participant_icp' : IDL.Opt(Tokens),\n    'minimum_icp' : IDL.Opt(Tokens),\n    'minimum_direct_participation_icp' : IDL.Opt(Tokens),\n    'minimum_participant_icp' : IDL.Opt(Tokens),\n    'start_time' : IDL.Opt(GlobalTimeOfDay),\n    'maximum_direct_participation_icp' : IDL.Opt(Tokens),\n    'maximum_icp' : IDL.Opt(Tokens),\n    'neurons_fund_investment_icp' : IDL.Opt(Tokens),\n    'restricted_countries' : IDL.Opt(Countries),\n  });\n  const SwapDistribution = IDL.Record({ 'total' : IDL.Opt(Tokens) });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay' : IDL.Opt(Duration),\n    'memo' : IDL.Opt(IDL.Nat64),\n    'vesting_period' : IDL.Opt(Duration),\n    'stake' : IDL.Opt(Tokens),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const InitialTokenDistribution = IDL.Record({\n    'treasury_distribution' : IDL.Opt(SwapDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const CreateServiceNervousSystem = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'governance_parameters' : IDL.Opt(GovernanceParameters),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'logo' : IDL.Opt(Image),\n    'name' : IDL.Opt(IDL.Text),\n    'ledger_parameters' : IDL.Opt(LedgerParameters),\n    'description' : IDL.Opt(IDL.Text),\n    'dapp_canisters' : IDL.Vec(Canister),\n    'swap_parameters' : IDL.Opt(SwapParameters),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n  });\n  const ExecuteNnsFunction = IDL.Record({\n    'nns_function' : IDL.Int32,\n    'payload' : IDL.Vec(IDL.Nat8),\n  });\n  const NodeProvider = IDL.Record({\n    'id' : IDL.Opt(IDL.Principal),\n    'reward_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardToNeuron = IDL.Record({ 'dissolve_delay_seconds' : IDL.Nat64 });\n  const RewardToAccount = IDL.Record({\n    'to_account' : IDL.Opt(AccountIdentifier),\n  });\n  const RewardMode = IDL.Variant({\n    'RewardToNeuron' : RewardToNeuron,\n    'RewardToAccount' : RewardToAccount,\n  });\n  const RewardNodeProvider = IDL.Record({\n    'node_provider' : IDL.Opt(NodeProvider),\n    'reward_mode' : IDL.Opt(RewardMode),\n    'amount_e8s' : IDL.Nat64,\n  });\n  const NeuronBasketConstructionParameters_1 = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Params = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Nat64,\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters_1\n    ),\n    'max_icp_e8s' : IDL.Nat64,\n    'swap_due_timestamp_seconds' : IDL.Nat64,\n    'min_participants' : IDL.Nat32,\n    'sns_token_e8s' : IDL.Nat64,\n    'sale_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Nat64,\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_icp_e8s' : IDL.Nat64,\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const OpenSnsTokenSwap = IDL.Record({\n    'community_fund_investment_e8s' : IDL.Opt(IDL.Nat64),\n    'target_swap_canister_id' : IDL.Opt(IDL.Principal),\n    'params' : IDL.Opt(Params),\n  });\n  const TimeWindow = IDL.Record({\n    'start_timestamp_seconds' : IDL.Nat64,\n    'end_timestamp_seconds' : IDL.Nat64,\n  });\n  const SetOpenTimeWindowRequest = IDL.Record({\n    'open_time_window' : IDL.Opt(TimeWindow),\n  });\n  const SetSnsTokenSwapOpenTimeWindow = IDL.Record({\n    'request' : IDL.Opt(SetOpenTimeWindowRequest),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SetDefaultFollowees = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n  });\n  const RewardNodeProviders = IDL.Record({\n    'use_registry_derived_rewards' : IDL.Opt(IDL.Bool),\n    'rewards' : IDL.Vec(RewardNodeProvider),\n  });\n  const Decimal = IDL.Record({ 'human_readable' : IDL.Opt(IDL.Text) });\n  const NeuronsFundMatchedFundingCurveCoefficients = IDL.Record({\n    'contribution_threshold_xdr' : IDL.Opt(Decimal),\n    'one_third_participation_milestone_xdr' : IDL.Opt(Decimal),\n    'full_participation_milestone_xdr' : IDL.Opt(Decimal),\n  });\n  const NeuronsFundEconomics = IDL.Record({\n    'maximum_icp_xdr_rate' : IDL.Opt(Percentage),\n    'neurons_fund_matched_funding_curve_coefficients' : IDL.Opt(\n      NeuronsFundMatchedFundingCurveCoefficients\n    ),\n    'max_theoretical_neurons_fund_participation_amount_xdr' : IDL.Opt(Decimal),\n    'minimum_icp_xdr_rate' : IDL.Opt(Percentage),\n  });\n  const NetworkEconomics = IDL.Record({\n    'neuron_minimum_stake_e8s' : IDL.Nat64,\n    'max_proposals_to_keep_per_topic' : IDL.Nat32,\n    'neuron_management_fee_per_proposal_e8s' : IDL.Nat64,\n    'reject_cost_e8s' : IDL.Nat64,\n    'transaction_fee_e8s' : IDL.Nat64,\n    'neuron_spawn_dissolve_delay_seconds' : IDL.Nat64,\n    'minimum_icp_xdr_rate' : IDL.Nat64,\n    'maximum_node_provider_rewards_e8s' : IDL.Nat64,\n    'neurons_fund_economics' : IDL.Opt(NeuronsFundEconomics),\n  });\n  const Principals = IDL.Record({ 'principals' : IDL.Vec(IDL.Principal) });\n  const Change = IDL.Variant({\n    'ToRemove' : NodeProvider,\n    'ToAdd' : NodeProvider,\n  });\n  const AddOrRemoveNodeProvider = IDL.Record({ 'change' : IDL.Opt(Change) });\n  const Motion = IDL.Record({ 'motion_text' : IDL.Text });\n  const Action = IDL.Variant({\n    'RegisterKnownNeuron' : KnownNeuron,\n    'ManageNeuron' : ManageNeuron,\n    'UpdateCanisterSettings' : UpdateCanisterSettings,\n    'InstallCode' : InstallCode,\n    'StopOrStartCanister' : StopOrStartCanister,\n    'CreateServiceNervousSystem' : CreateServiceNervousSystem,\n    'ExecuteNnsFunction' : ExecuteNnsFunction,\n    'RewardNodeProvider' : RewardNodeProvider,\n    'OpenSnsTokenSwap' : OpenSnsTokenSwap,\n    'SetSnsTokenSwapOpenTimeWindow' : SetSnsTokenSwapOpenTimeWindow,\n    'SetDefaultFollowees' : SetDefaultFollowees,\n    'RewardNodeProviders' : RewardNodeProviders,\n    'ManageNetworkEconomics' : NetworkEconomics,\n    'ApproveGenesisKyc' : Principals,\n    'AddOrRemoveNodeProvider' : AddOrRemoveNodeProvider,\n    'Motion' : Motion,\n  });\n  Proposal.fill(\n    IDL.Record({\n      'url' : IDL.Text,\n      'title' : IDL.Opt(IDL.Text),\n      'action' : IDL.Opt(Action),\n      'summary' : IDL.Text,\n    })\n  );\n  const MakingSnsProposal = IDL.Record({\n    'proposal' : IDL.Opt(Proposal),\n    'caller' : IDL.Opt(IDL.Principal),\n    'proposer_id' : IDL.Opt(NeuronId),\n  });\n  const XdrConversionRate = IDL.Record({\n    'xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const MonthlyNodeProviderRewards = IDL.Record({\n    'minimum_xdr_permyriad_per_icp' : IDL.Opt(IDL.Nat64),\n    'registry_version' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'timestamp' : IDL.Nat64,\n    'rewards' : IDL.Vec(RewardNodeProvider),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'maximum_node_provider_rewards_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronSubsetMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'voting_power_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_staked_e8s' : IDL.Opt(IDL.Nat64),\n    'count' : IDL.Opt(IDL.Nat64),\n    'total_staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'staked_e8s_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n    'total_voting_power' : IDL.Opt(IDL.Nat64),\n    'count_buckets' : IDL.Vec(IDL.Tuple(IDL.Nat64, IDL.Nat64)),\n  });\n  const GovernanceCachedMetrics = IDL.Record({\n    'total_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'garbage_collectable_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_invalid_stake_count' : IDL.Nat64,\n    'not_dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'ect_neuron_count' : IDL.Nat64,\n    'total_supply_icp' : IDL.Nat64,\n    'neurons_with_less_than_6_months_dissolve_delay_count' : IDL.Nat64,\n    'dissolved_neurons_count' : IDL.Nat64,\n    'community_fund_total_maturity_e8s_equivalent' : IDL.Nat64,\n    'total_staked_e8s_seed' : IDL.Nat64,\n    'total_staked_maturity_e8s_equivalent_ect' : IDL.Nat64,\n    'total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_count' : IDL.Nat64,\n    'total_locked_e8s' : IDL.Nat64,\n    'neurons_fund_total_active_neurons' : IDL.Nat64,\n    'total_voting_power_non_self_authenticating_controller' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'total_staked_maturity_e8s_equivalent' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_e8s_ect' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_sum' : IDL.Nat64,\n    'dissolved_neurons_e8s' : IDL.Nat64,\n    'total_staked_e8s_non_self_authenticating_controller' : IDL.Opt(IDL.Nat64),\n    'dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'neurons_with_less_than_6_months_dissolve_delay_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_staked_maturity_e8s_equivalent_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'dissolving_neurons_count_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Nat64)\n    ),\n    'dissolving_neurons_e8s_buckets_ect' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'non_self_authenticating_controller_neuron_subset_metrics' : IDL.Opt(\n      NeuronSubsetMetrics\n    ),\n    'dissolving_neurons_count' : IDL.Nat64,\n    'dissolving_neurons_e8s_buckets' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'total_staked_maturity_e8s_equivalent_seed' : IDL.Nat64,\n    'community_fund_total_staked_e8s' : IDL.Nat64,\n    'not_dissolving_neurons_e8s_buckets_seed' : IDL.Vec(\n      IDL.Tuple(IDL.Nat64, IDL.Float64)\n    ),\n    'public_neuron_subset_metrics' : IDL.Opt(NeuronSubsetMetrics),\n    'timestamp_seconds' : IDL.Nat64,\n    'seed_neuron_count' : IDL.Nat64,\n  });\n  const RestoreAgingNeuronGroup = IDL.Record({\n    'count' : IDL.Opt(IDL.Nat64),\n    'previous_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'current_total_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'group_type' : IDL.Int32,\n  });\n  const RestoreAgingSummary = IDL.Record({\n    'groups' : IDL.Vec(RestoreAgingNeuronGroup),\n    'timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const RewardEvent = IDL.Record({\n    'rounds_since_last_distribution' : IDL.Opt(IDL.Nat64),\n    'day_after_genesis' : IDL.Nat64,\n    'actual_timestamp_seconds' : IDL.Nat64,\n    'total_available_e8s_equivalent' : IDL.Nat64,\n    'latest_round_available_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'distributed_e8s_equivalent' : IDL.Nat64,\n    'settled_proposals' : IDL.Vec(ProposalId),\n  });\n  const NeuronStakeTransfer = IDL.Record({\n    'to_subaccount' : IDL.Vec(IDL.Nat8),\n    'neuron_stake_e8s' : IDL.Nat64,\n    'from' : IDL.Opt(IDL.Principal),\n    'memo' : IDL.Nat64,\n    'from_subaccount' : IDL.Vec(IDL.Nat8),\n    'transfer_timestamp' : IDL.Nat64,\n    'block_height' : IDL.Nat64,\n  });\n  const Followers = IDL.Record({ 'followers' : IDL.Vec(NeuronId) });\n  const FollowersMap = IDL.Record({\n    'followers_map' : IDL.Vec(IDL.Tuple(IDL.Nat64, Followers)),\n  });\n  const Progress = IDL.Variant({ 'LastNeuronId' : NeuronId });\n  const Migration = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'failure_reason' : IDL.Opt(IDL.Text),\n    'progress' : IDL.Opt(Progress),\n  });\n  const Migrations = IDL.Record({\n    'neuron_indexes_migration' : IDL.Opt(Migration),\n    'copy_inactive_neurons_to_stable_memory_migration' : IDL.Opt(Migration),\n  });\n  const GovernanceError = IDL.Record({\n    'error_message' : IDL.Text,\n    'error_type' : IDL.Int32,\n  });\n  const Ballot = IDL.Record({ 'vote' : IDL.Int32, 'voting_power' : IDL.Nat64 });\n  const SwapParticipationLimits = IDL.Record({\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundNeuronPortion = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'hotkeys' : IDL.Vec(IDL.Principal),\n    'is_capped' : IDL.Opt(IDL.Bool),\n    'maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'nns_neuron_id' : IDL.Opt(NeuronId),\n    'amount_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundSnapshot = IDL.Record({\n    'neurons_fund_neuron_portions' : IDL.Vec(NeuronsFundNeuronPortion),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipation = IDL.Record({\n    'total_maturity_equivalent_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'intended_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'swap_participation_limits' : IDL.Opt(SwapParticipationLimits),\n    'max_neurons_fund_swap_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_reserves' : IDL.Opt(NeuronsFundSnapshot),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n    'allocated_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const NeuronsFundData = IDL.Record({\n    'final_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'initial_neurons_fund_participation' : IDL.Opt(NeuronsFundParticipation),\n    'neurons_fund_refunds' : IDL.Opt(NeuronsFundSnapshot),\n  });\n  const CanisterStatusResultV2 = IDL.Record({\n    'status' : IDL.Opt(IDL.Int32),\n    'freezing_threshold' : IDL.Opt(IDL.Nat64),\n    'controllers' : IDL.Vec(IDL.Principal),\n    'memory_size' : IDL.Opt(IDL.Nat64),\n    'cycles' : IDL.Opt(IDL.Nat64),\n    'idle_cycles_burned_per_day' : IDL.Opt(IDL.Nat64),\n    'module_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const CanisterSummary = IDL.Record({\n    'status' : IDL.Opt(CanisterStatusResultV2),\n    'canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const SwapBackgroundInformation = IDL.Record({\n    'ledger_index_canister_summary' : IDL.Opt(CanisterSummary),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Principal),\n    'ledger_archive_canister_summaries' : IDL.Vec(CanisterSummary),\n    'ledger_canister_summary' : IDL.Opt(CanisterSummary),\n    'swap_canister_summary' : IDL.Opt(CanisterSummary),\n    'governance_canister_summary' : IDL.Opt(CanisterSummary),\n    'root_canister_summary' : IDL.Opt(CanisterSummary),\n    'dapp_canister_summaries' : IDL.Vec(CanisterSummary),\n  });\n  const DerivedProposalInformation = IDL.Record({\n    'swap_background_information' : IDL.Opt(SwapBackgroundInformation),\n  });\n  const Tally = IDL.Record({\n    'no' : IDL.Nat64,\n    'yes' : IDL.Nat64,\n    'total' : IDL.Nat64,\n    'timestamp_seconds' : IDL.Nat64,\n  });\n  const WaitForQuietState = IDL.Record({\n    'current_deadline_timestamp_seconds' : IDL.Nat64,\n  });\n  const ProposalData = IDL.Record({\n    'id' : IDL.Opt(ProposalId),\n    'failure_reason' : IDL.Opt(GovernanceError),\n    'ballots' : IDL.Vec(IDL.Tuple(IDL.Nat64, Ballot)),\n    'proposal_timestamp_seconds' : IDL.Nat64,\n    'reward_event_round' : IDL.Nat64,\n    'failed_timestamp_seconds' : IDL.Nat64,\n    'neurons_fund_data' : IDL.Opt(NeuronsFundData),\n    'reject_cost_e8s' : IDL.Nat64,\n    'derived_proposal_information' : IDL.Opt(DerivedProposalInformation),\n    'latest_tally' : IDL.Opt(Tally),\n    'sns_token_swap_lifecycle' : IDL.Opt(IDL.Int32),\n    'decided_timestamp_seconds' : IDL.Nat64,\n    'proposal' : IDL.Opt(Proposal),\n    'proposer' : IDL.Opt(NeuronId),\n    'wait_for_quiet_state' : IDL.Opt(WaitForQuietState),\n    'executed_timestamp_seconds' : IDL.Nat64,\n    'original_total_community_fund_maturity_e8s_equivalent' : IDL.Opt(\n      IDL.Nat64\n    ),\n  });\n  const Command_2 = IDL.Variant({\n    'Spawn' : NeuronId,\n    'Split' : Split,\n    'Configure' : Configure,\n    'Merge' : Merge,\n    'DisburseToNeuron' : DisburseToNeuron,\n    'SyncCommand' : IDL.Record({}),\n    'ClaimOrRefreshNeuron' : ClaimOrRefresh,\n    'MergeMaturity' : MergeMaturity,\n    'Disburse' : Disburse,\n  });\n  const NeuronInFlightCommand = IDL.Record({\n    'command' : IDL.Opt(Command_2),\n    'timestamp' : IDL.Nat64,\n  });\n  const BallotInfo = IDL.Record({\n    'vote' : IDL.Int32,\n    'proposal_id' : IDL.Opt(ProposalId),\n  });\n  const DissolveState = IDL.Variant({\n    'DissolveDelaySeconds' : IDL.Nat64,\n    'WhenDissolvedTimestampSeconds' : IDL.Nat64,\n  });\n  const Neuron = IDL.Record({\n    'id' : IDL.Opt(NeuronId),\n    'staked_maturity_e8s_equivalent' : IDL.Opt(IDL.Nat64),\n    'controller' : IDL.Opt(IDL.Principal),\n    'recent_ballots' : IDL.Vec(BallotInfo),\n    'kyc_verified' : IDL.Bool,\n    'neuron_type' : IDL.Opt(IDL.Int32),\n    'not_for_profit' : IDL.Bool,\n    'maturity_e8s_equivalent' : IDL.Nat64,\n    'cached_neuron_stake_e8s' : IDL.Nat64,\n    'created_timestamp_seconds' : IDL.Nat64,\n    'auto_stake_maturity' : IDL.Opt(IDL.Bool),\n    'aging_since_timestamp_seconds' : IDL.Nat64,\n    'hot_keys' : IDL.Vec(IDL.Principal),\n    'account' : IDL.Vec(IDL.Nat8),\n    'joined_community_fund_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'dissolve_state' : IDL.Opt(DissolveState),\n    'followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'neuron_fees_e8s' : IDL.Nat64,\n    'visibility' : IDL.Opt(IDL.Int32),\n    'transfer' : IDL.Opt(NeuronStakeTransfer),\n    'known_neuron_data' : IDL.Opt(KnownNeuronData),\n    'spawn_at_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const Governance = IDL.Record({\n    'default_followees' : IDL.Vec(IDL.Tuple(IDL.Int32, Followees)),\n    'making_sns_proposal' : IDL.Opt(MakingSnsProposal),\n    'most_recent_monthly_node_provider_rewards' : IDL.Opt(\n      MonthlyNodeProviderRewards\n    ),\n    'maturity_modulation_last_updated_at_timestamp_seconds' : IDL.Opt(\n      IDL.Nat64\n    ),\n    'wait_for_quiet_threshold_seconds' : IDL.Nat64,\n    'metrics' : IDL.Opt(GovernanceCachedMetrics),\n    'neuron_management_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'node_providers' : IDL.Vec(NodeProvider),\n    'cached_daily_maturity_modulation_basis_points' : IDL.Opt(IDL.Int32),\n    'economics' : IDL.Opt(NetworkEconomics),\n    'restore_aging_summary' : IDL.Opt(RestoreAgingSummary),\n    'spawning_neurons' : IDL.Opt(IDL.Bool),\n    'latest_reward_event' : IDL.Opt(RewardEvent),\n    'to_claim_transfers' : IDL.Vec(NeuronStakeTransfer),\n    'short_voting_period_seconds' : IDL.Nat64,\n    'topic_followee_index' : IDL.Vec(IDL.Tuple(IDL.Int32, FollowersMap)),\n    'migrations' : IDL.Opt(Migrations),\n    'proposals' : IDL.Vec(IDL.Tuple(IDL.Nat64, ProposalData)),\n    'xdr_conversion_rate' : IDL.Opt(XdrConversionRate),\n    'in_flight_commands' : IDL.Vec(IDL.Tuple(IDL.Nat64, NeuronInFlightCommand)),\n    'neurons' : IDL.Vec(IDL.Tuple(IDL.Nat64, Neuron)),\n    'genesis_timestamp_seconds' : IDL.Nat64,\n  });\n  return [Governance];\n};\n", "import { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type {\n  DeployedSns,\n  _SERVICE as SnsWasmService,\n} from \"../candid/sns_wasm\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/sns_wasm.certified.idl\";\nimport { idlFactory } from \"../candid/sns_wasm.idl\";\nimport { MAINNET_SNS_WASM_CANISTER_ID } from \"./constants/canister_ids\";\n\nexport class SnsWasmCanister {\n  private constructor(\n    private readonly service: SnsWasmService,\n    private readonly certifiedService: SnsWasmService,\n  ) {}\n\n  public static create(options: CanisterOptions<SnsWasmService> = {}) {\n    const { service, certifiedService } = createServices<SnsWasmService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_SNS_WASM_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new SnsWasmCanister(service, certifiedService);\n  }\n\n  public listSnses = async ({\n    certified = true,\n  }: {\n    certified?: boolean;\n  }): Promise<DeployedSns[]> => {\n    const service = certified ? this.certifiedService : this.service;\n\n    const { instances } = await service.list_deployed_snses({});\n    return instances;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const LinearScalingCoefficient = IDL.Record({\n    'slope_numerator' : IDL.Opt(IDL.Nat64),\n    'intercept_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'from_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'slope_denominator' : IDL.Opt(IDL.Nat64),\n    'to_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipationConstraints = IDL.Record({\n    'coefficient_intervals' : IDL.Vec(LinearScalingCoefficient),\n    'max_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_threshold_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participation_constraints' : IDL.Opt(\n      NeuronsFundParticipationConstraints\n    ),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdRequest = IDL.Record({\n    'proposal_id' : IDL.Nat64,\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'DeployedSns' : DeployedSns,\n  });\n  const GetDeployedSnsByProposalIdResponse = IDL.Record({\n    'get_deployed_sns_by_proposal_id_result' : IDL.Opt(\n      GetDeployedSnsByProposalIdResult\n    ),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetProposalIdThatAddedWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetProposalIdThatAddedWasmResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const GetWasmMetadataRequest = IDL.Record({\n    'hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const MetadataSection = IDL.Record({\n    'contents' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Opt(IDL.Text),\n    'visibility' : IDL.Opt(IDL.Text),\n  });\n  const Ok = IDL.Record({ 'sections' : IDL.Vec(MetadataSection) });\n  const Result_1 = IDL.Variant({ 'Ok' : Ok, 'Error' : SnsWasmError });\n  const GetWasmMetadataResponse = IDL.Record({ 'result' : IDL.Opt(Result_1) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        [],\n      ),\n    'get_deployed_sns_by_proposal_id' : IDL.Func(\n        [GetDeployedSnsByProposalIdRequest],\n        [GetDeployedSnsByProposalIdResponse],\n        [],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        [],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        [],\n      ),\n    'get_proposal_id_that_added_wasm' : IDL.Func(\n        [GetProposalIdThatAddedWasmRequest],\n        [GetProposalIdThatAddedWasmResponse],\n        [],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        [],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], []),\n    'get_wasm_metadata' : IDL.Func(\n        [GetWasmMetadataRequest],\n        [GetWasmMetadataResponse],\n        [],\n      ),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        [],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        [],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/sns_wasm.did */\nexport const idlFactory = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const SnsWasm = IDL.Record({\n    'wasm' : IDL.Vec(IDL.Nat8),\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n    'canister_type' : IDL.Int32,\n  });\n  const AddWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n    'wasm' : IDL.Opt(SnsWasm),\n  });\n  const SnsWasmError = IDL.Record({ 'message' : IDL.Text });\n  const Result = IDL.Variant({\n    'Error' : SnsWasmError,\n    'Hash' : IDL.Vec(IDL.Nat8),\n  });\n  const AddWasmResponse = IDL.Record({ 'result' : IDL.Opt(Result) });\n  const NeuronBasketConstructionParameters = IDL.Record({\n    'dissolve_delay_interval_seconds' : IDL.Nat64,\n    'count' : IDL.Nat64,\n  });\n  const Canister = IDL.Record({ 'id' : IDL.Opt(IDL.Principal) });\n  const DappCanisters = IDL.Record({ 'canisters' : IDL.Vec(Canister) });\n  const LinearScalingCoefficient = IDL.Record({\n    'slope_numerator' : IDL.Opt(IDL.Nat64),\n    'intercept_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'from_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'slope_denominator' : IDL.Opt(IDL.Nat64),\n    'to_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const IdealMatchedParticipationFunction = IDL.Record({\n    'serialized_representation' : IDL.Opt(IDL.Text),\n  });\n  const NeuronsFundParticipationConstraints = IDL.Record({\n    'coefficient_intervals' : IDL.Vec(LinearScalingCoefficient),\n    'max_neurons_fund_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_threshold_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'ideal_matched_participation_function' : IDL.Opt(\n      IdealMatchedParticipationFunction\n    ),\n  });\n  const TreasuryDistribution = IDL.Record({ 'total_e8s' : IDL.Nat64 });\n  const NeuronDistribution = IDL.Record({\n    'controller' : IDL.Opt(IDL.Principal),\n    'dissolve_delay_seconds' : IDL.Nat64,\n    'memo' : IDL.Nat64,\n    'stake_e8s' : IDL.Nat64,\n    'vesting_period_seconds' : IDL.Opt(IDL.Nat64),\n  });\n  const DeveloperDistribution = IDL.Record({\n    'developer_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const AirdropDistribution = IDL.Record({\n    'airdrop_neurons' : IDL.Vec(NeuronDistribution),\n  });\n  const SwapDistribution = IDL.Record({\n    'total_e8s' : IDL.Nat64,\n    'initial_swap_amount_e8s' : IDL.Nat64,\n  });\n  const FractionalDeveloperVotingPower = IDL.Record({\n    'treasury_distribution' : IDL.Opt(TreasuryDistribution),\n    'developer_distribution' : IDL.Opt(DeveloperDistribution),\n    'airdrop_distribution' : IDL.Opt(AirdropDistribution),\n    'swap_distribution' : IDL.Opt(SwapDistribution),\n  });\n  const InitialTokenDistribution = IDL.Variant({\n    'FractionalDeveloperVotingPower' : FractionalDeveloperVotingPower,\n  });\n  const Countries = IDL.Record({ 'iso_codes' : IDL.Vec(IDL.Text) });\n  const SnsInitPayload = IDL.Record({\n    'url' : IDL.Opt(IDL.Text),\n    'max_dissolve_delay_seconds' : IDL.Opt(IDL.Nat64),\n    'max_dissolve_delay_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'nns_proposal_id' : IDL.Opt(IDL.Nat64),\n    'neurons_fund_participation' : IDL.Opt(IDL.Bool),\n    'min_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_basket_construction_parameters' : IDL.Opt(\n      NeuronBasketConstructionParameters\n    ),\n    'fallback_controller_principal_ids' : IDL.Vec(IDL.Text),\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'final_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'max_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_stake_e8s' : IDL.Opt(IDL.Nat64),\n    'confirmation_text' : IDL.Opt(IDL.Text),\n    'logo' : IDL.Opt(IDL.Text),\n    'name' : IDL.Opt(IDL.Text),\n    'swap_start_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'swap_due_timestamp_seconds' : IDL.Opt(IDL.Nat64),\n    'initial_voting_period_seconds' : IDL.Opt(IDL.Nat64),\n    'neuron_minimum_dissolve_delay_to_vote_seconds' : IDL.Opt(IDL.Nat64),\n    'description' : IDL.Opt(IDL.Text),\n    'max_neuron_age_seconds_for_age_bonus' : IDL.Opt(IDL.Nat64),\n    'min_participants' : IDL.Opt(IDL.Nat64),\n    'initial_reward_rate_basis_points' : IDL.Opt(IDL.Nat64),\n    'wait_for_quiet_deadline_increase_seconds' : IDL.Opt(IDL.Nat64),\n    'transaction_fee_e8s' : IDL.Opt(IDL.Nat64),\n    'dapp_canisters' : IDL.Opt(DappCanisters),\n    'neurons_fund_participation_constraints' : IDL.Opt(\n      NeuronsFundParticipationConstraints\n    ),\n    'max_age_bonus_percentage' : IDL.Opt(IDL.Nat64),\n    'initial_token_distribution' : IDL.Opt(InitialTokenDistribution),\n    'reward_rate_transition_duration_seconds' : IDL.Opt(IDL.Nat64),\n    'token_logo' : IDL.Opt(IDL.Text),\n    'token_name' : IDL.Opt(IDL.Text),\n    'max_participant_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'min_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'proposal_reject_cost_e8s' : IDL.Opt(IDL.Nat64),\n    'restricted_countries' : IDL.Opt(Countries),\n    'min_icp_e8s' : IDL.Opt(IDL.Nat64),\n    'max_direct_participation_icp_e8s' : IDL.Opt(IDL.Nat64),\n  });\n  const DeployNewSnsRequest = IDL.Record({\n    'sns_init_payload' : IDL.Opt(SnsInitPayload),\n  });\n  const DappCanistersTransferResult = IDL.Record({\n    'restored_dapp_canisters' : IDL.Vec(Canister),\n    'nns_controlled_dapp_canisters' : IDL.Vec(Canister),\n    'sns_controlled_dapp_canisters' : IDL.Vec(Canister),\n  });\n  const SnsCanisterIds = IDL.Record({\n    'root' : IDL.Opt(IDL.Principal),\n    'swap' : IDL.Opt(IDL.Principal),\n    'ledger' : IDL.Opt(IDL.Principal),\n    'index' : IDL.Opt(IDL.Principal),\n    'governance' : IDL.Opt(IDL.Principal),\n  });\n  const DeployNewSnsResponse = IDL.Record({\n    'dapp_canisters_transfer_result' : IDL.Opt(DappCanistersTransferResult),\n    'subnet_id' : IDL.Opt(IDL.Principal),\n    'error' : IDL.Opt(SnsWasmError),\n    'canisters' : IDL.Opt(SnsCanisterIds),\n  });\n  const GetAllowedPrincipalsResponse = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdRequest = IDL.Record({\n    'proposal_id' : IDL.Nat64,\n  });\n  const DeployedSns = IDL.Record({\n    'root_canister_id' : IDL.Opt(IDL.Principal),\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'index_canister_id' : IDL.Opt(IDL.Principal),\n    'swap_canister_id' : IDL.Opt(IDL.Principal),\n    'ledger_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const GetDeployedSnsByProposalIdResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'DeployedSns' : DeployedSns,\n  });\n  const GetDeployedSnsByProposalIdResponse = IDL.Record({\n    'get_deployed_sns_by_proposal_id_result' : IDL.Opt(\n      GetDeployedSnsByProposalIdResult\n    ),\n  });\n  const SnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'root_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'swap_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'ledger_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'governance_wasm_hash' : IDL.Vec(IDL.Nat8),\n    'index_wasm_hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetNextSnsVersionRequest = IDL.Record({\n    'governance_canister_id' : IDL.Opt(IDL.Principal),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const GetNextSnsVersionResponse = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n  });\n  const GetProposalIdThatAddedWasmRequest = IDL.Record({\n    'hash' : IDL.Vec(IDL.Nat8),\n  });\n  const GetProposalIdThatAddedWasmResponse = IDL.Record({\n    'proposal_id' : IDL.Opt(IDL.Nat64),\n  });\n  const GetSnsSubnetIdsResponse = IDL.Record({\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  const GetWasmRequest = IDL.Record({ 'hash' : IDL.Vec(IDL.Nat8) });\n  const GetWasmResponse = IDL.Record({ 'wasm' : IDL.Opt(SnsWasm) });\n  const GetWasmMetadataRequest = IDL.Record({\n    'hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const MetadataSection = IDL.Record({\n    'contents' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Opt(IDL.Text),\n    'visibility' : IDL.Opt(IDL.Text),\n  });\n  const Ok = IDL.Record({ 'sections' : IDL.Vec(MetadataSection) });\n  const Result_1 = IDL.Variant({ 'Ok' : Ok, 'Error' : SnsWasmError });\n  const GetWasmMetadataResponse = IDL.Record({ 'result' : IDL.Opt(Result_1) });\n  const SnsUpgrade = IDL.Record({\n    'next_version' : IDL.Opt(SnsVersion),\n    'current_version' : IDL.Opt(SnsVersion),\n  });\n  const InsertUpgradePathEntriesRequest = IDL.Record({\n    'upgrade_path' : IDL.Vec(SnsUpgrade),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const InsertUpgradePathEntriesResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  const ListDeployedSnsesResponse = IDL.Record({\n    'instances' : IDL.Vec(DeployedSns),\n  });\n  const ListUpgradeStepsRequest = IDL.Record({\n    'limit' : IDL.Nat32,\n    'starting_at' : IDL.Opt(SnsVersion),\n    'sns_governance_canister_id' : IDL.Opt(IDL.Principal),\n  });\n  const PrettySnsVersion = IDL.Record({\n    'archive_wasm_hash' : IDL.Text,\n    'root_wasm_hash' : IDL.Text,\n    'swap_wasm_hash' : IDL.Text,\n    'ledger_wasm_hash' : IDL.Text,\n    'governance_wasm_hash' : IDL.Text,\n    'index_wasm_hash' : IDL.Text,\n  });\n  const ListUpgradeStep = IDL.Record({\n    'pretty_version' : IDL.Opt(PrettySnsVersion),\n    'version' : IDL.Opt(SnsVersion),\n  });\n  const ListUpgradeStepsResponse = IDL.Record({\n    'steps' : IDL.Vec(ListUpgradeStep),\n  });\n  const UpdateAllowedPrincipalsRequest = IDL.Record({\n    'added_principals' : IDL.Vec(IDL.Principal),\n    'removed_principals' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateAllowedPrincipalsResult = IDL.Variant({\n    'Error' : SnsWasmError,\n    'AllowedPrincipals' : GetAllowedPrincipalsResponse,\n  });\n  const UpdateAllowedPrincipalsResponse = IDL.Record({\n    'update_allowed_principals_result' : IDL.Opt(UpdateAllowedPrincipalsResult),\n  });\n  const UpdateSnsSubnetListRequest = IDL.Record({\n    'sns_subnet_ids_to_add' : IDL.Vec(IDL.Principal),\n    'sns_subnet_ids_to_remove' : IDL.Vec(IDL.Principal),\n  });\n  const UpdateSnsSubnetListResponse = IDL.Record({\n    'error' : IDL.Opt(SnsWasmError),\n  });\n  return IDL.Service({\n    'add_wasm' : IDL.Func([AddWasmRequest], [AddWasmResponse], []),\n    'deploy_new_sns' : IDL.Func(\n        [DeployNewSnsRequest],\n        [DeployNewSnsResponse],\n        [],\n      ),\n    'get_allowed_principals' : IDL.Func(\n        [IDL.Record({})],\n        [GetAllowedPrincipalsResponse],\n        ['query'],\n      ),\n    'get_deployed_sns_by_proposal_id' : IDL.Func(\n        [GetDeployedSnsByProposalIdRequest],\n        [GetDeployedSnsByProposalIdResponse],\n        ['query'],\n      ),\n    'get_latest_sns_version_pretty' : IDL.Func(\n        [IDL.Null],\n        [IDL.Vec(IDL.Tuple(IDL.Text, IDL.Text))],\n        ['query'],\n      ),\n    'get_next_sns_version' : IDL.Func(\n        [GetNextSnsVersionRequest],\n        [GetNextSnsVersionResponse],\n        ['query'],\n      ),\n    'get_proposal_id_that_added_wasm' : IDL.Func(\n        [GetProposalIdThatAddedWasmRequest],\n        [GetProposalIdThatAddedWasmResponse],\n        ['query'],\n      ),\n    'get_sns_subnet_ids' : IDL.Func(\n        [IDL.Record({})],\n        [GetSnsSubnetIdsResponse],\n        ['query'],\n      ),\n    'get_wasm' : IDL.Func([GetWasmRequest], [GetWasmResponse], ['query']),\n    'get_wasm_metadata' : IDL.Func(\n        [GetWasmMetadataRequest],\n        [GetWasmMetadataResponse],\n        ['query'],\n      ),\n    'insert_upgrade_path_entries' : IDL.Func(\n        [InsertUpgradePathEntriesRequest],\n        [InsertUpgradePathEntriesResponse],\n        [],\n      ),\n    'list_deployed_snses' : IDL.Func(\n        [IDL.Record({})],\n        [ListDeployedSnsesResponse],\n        ['query'],\n      ),\n    'list_upgrade_steps' : IDL.Func(\n        [ListUpgradeStepsRequest],\n        [ListUpgradeStepsResponse],\n        ['query'],\n      ),\n    'update_allowed_principals' : IDL.Func(\n        [UpdateAllowedPrincipalsRequest],\n        [UpdateAllowedPrincipalsResponse],\n        [],\n      ),\n    'update_sns_subnet_list' : IDL.Func(\n        [UpdateSnsSubnetListRequest],\n        [UpdateSnsSubnetListResponse],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const SnsWasmCanisterInitPayload = IDL.Record({\n    'allowed_principals' : IDL.Vec(IDL.Principal),\n    'access_controls_enabled' : IDL.Bool,\n    'sns_subnet_ids' : IDL.Vec(IDL.Principal),\n  });\n  return [SnsWasmCanisterInitPayload];\n};\n", "import { Vote } from \"../enums/governance.enums\";\nimport type {\n  Ballot,\n  NeuronInfo,\n  ProposalInfo,\n} from \"../types/governance_converters\";\n\nconst getNeuronVoteForProposal = ({\n  proposal: { ballots },\n  neuron: { neuronId },\n}: {\n  proposal: ProposalInfo;\n  neuron: NeuronInfo;\n}): Vote | undefined =>\n  ballots.find(({ neuronId: id }) => id === neuronId)?.vote;\n\n/**\n * Filter the neurons that are ineligible to vote to a proposal.\n *\n * This feature needs the ballots of the proposal to contains accurate data.\n * If the proposal has settled, as the ballots of the proposal are emptied for archive purpose, the function might return a list of ineligible neurons that are actually neurons that have not voted but would have been eligible.\n *\n * Long story short, check the status of the proposal before using this function.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const ineligibleNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { ballots, proposalTimestampSeconds } = proposal;\n\n  return neurons.filter(({ createdTimestampSeconds, neuronId }: NeuronInfo) => {\n    const createdSinceProposal: boolean =\n      createdTimestampSeconds > proposalTimestampSeconds;\n\n    const dissolveTooShort: boolean =\n      ballots.find(\n        ({ neuronId: ballotNeuronId }: Ballot) => ballotNeuronId === neuronId,\n      ) === undefined;\n\n    return createdSinceProposal || dissolveTooShort;\n  });\n};\n\n/**\n * Filter the neurons that can vote for a proposal - i.e. the neurons that have not voted yet and are eligible\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal to match against the selected neurons.\n */\nexport const votableNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] =>\n  neurons.filter(\n    (neuron: NeuronInfo) =>\n      getNeuronVoteForProposal({ proposal, neuron }) === Vote.Unspecified &&\n      ineligibleNeurons({ neurons, proposal }).find(\n        ({ neuronId: ineligibleNeuronId }: NeuronInfo) =>\n          ineligibleNeuronId === neuron.neuronId,\n      ) === undefined,\n  );\n\n/**\n * Filter the neurons that have voted for a proposal.\n *\n * @param {neurons; proposal;} params\n * @param params.neurons The neurons to filter.\n * @param params.proposal The proposal for which some neurons might have already voted.\n */\nexport const votedNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] =>\n  neurons.filter(\n    (neuron: NeuronInfo) =>\n      getNeuronVoteForProposal({ proposal, neuron }) !== Vote.Unspecified,\n  );\n"],
  "mappings": "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",
  "names": ["require_randombytes", "__commonJSMin", "exports", "module", "src_exports", "__export", "CanisterAction", "CanisterInstallMode", "CouldNotClaimNeuronError", "GenesisTokenCanister", "GovernanceCanister", "GovernanceError", "GovernanceTestCanister", "InsufficientAmountError", "LogVisibility", "NeuronState", "NeuronType", "NeuronVisibility", "NnsFunction", "ProposalRewardStatus", "ProposalStatus", "SnsWasmCanister", "StakeNeuronError", "Topic", "UnrecognizedTypeError", "UnsupportedValueError", "Vote", "ineligibleNeurons", "votableNeurons", "votedNeurons", "__toCommonJS", "NeuronState", "Topic", "ProposalRewardStatus", "ProposalStatus", "Vote", "NnsFunction", "NeuronType", "LogVisibility", "CanisterAction", "NeuronVisibility", "CanisterInstallMode", "StakeNeuronError", "CouldNotClaimNeuronError", "InsufficientAmountError", "minimumAmount", "UnrecognizedTypeError", "GovernanceError", "detail", "UnsupportedValueError", "value", "import_utils", "idlFactory", "IDL", "NeuronId", "Result", "Result_1", "TransferredNeuron", "AccountState", "Result_2", "idlFactory", "IDL", "NeuronId", "Result", "Result_1", "TransferredNeuron", "AccountState", "Result_2", "import_principal", "GOVERNANCE_CANISTER_ID", "MAINNET_GOVERNANCE_CANISTER_ID", "MAINNET_GENESIS_TOKEN_CANISTER_ID", "MAINNET_SNS_WASM_CANISTER_ID", "GenesisTokenCanister", "_GenesisTokenCanister", "service", "hexPubKey", "response", "neuronId", "options", "MAINNET_GENESIS_TOKEN_CANISTER_ID", "idlFactory", "import_agent", "import_ledger_icp", "import_utils", "isBytes", "a", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "bytes", "min", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "bytes", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "toBytes", "tmp", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "l", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "exists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "output", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "sha256", "wrapConstructor", "SHA256", "import_randombytes", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "idlFactory", "IDL", "NeuronId", "Followees", "KnownNeuronData", "NeuronStakeTransfer", "BallotInfo", "DissolveState", "Neuron", "NeuronInfo", "ListNeurons", "ListNeuronsResponse", "import_ledger_icp", "import_principal", "import_utils", "fromProposalId", "proposalId", "fromNeuronId", "neuronId", "fromNeuronIdOrSubaccount", "neuronIdOrSubaccount", "UnsupportedValueError", "fromPercentage", "percentage", "fromDuration", "duration", "fromGlobalTimeOfDay", "time", "fromCountries", "countries", "fromTokens", "tokens", "fromImage", "image", "fromVotingRewardParameters", "votingRewardParameters", "fromLedgerParameters", "ledgerParameters", "fromSwapParameters", "swapParameters", "fromNeuronBasketConstructionParameters", "neuronBasketConstructionParameters", "fromGovernanceParameters", "governanceParameters", "fromSwapDistribution", "swapDistribution", "fromInitialTokenDistribution", "initialTokenDistribution", "fromDeveloperDistribution", "fromNeuronDistribution", "neuronDistribution", "developerDistribution", "fromCreateServiceNervousSystem", "createServiceNervousSystem", "id", "principalId", "fromInstallCode", "installCode", "fromCanisterSettings", "canisterSettings", "controller", "fromAction", "action", "executeNnsFunction", "manageNeuron", "fromManageNeuron", "networkEconomics", "fromNeuronsFundEconomics", "rewardNodeProvider", "fromNodeProvider", "fromRewardMode", "rewardNodeProviders", "r", "addOrRemoveNodeProvider", "fromChange", "knownNeuron", "stopOrStartCanister", "updateCanisterSettings", "fromCommand", "command", "follow", "claimOrRefresh", "fromClaimOrRefreshBy", "configure", "fromOperation", "registerVote", "disburseToNeuron", "percentageToStake", "makeProposal", "disburse", "fromAccountIdentifier", "fromAmount", "spawn", "merge", "operation", "removeHotKey", "addHotKey", "requestedSettingForAutoStakeMaturity", "setVisibility", "change", "nodeProvider", "amount", "accountIdentifier", "neuronsFundEconomics", "maximumIcpXdrRate", "maxTheoreticalNeuronsFundParticipationAmountXdr", "neuronsFundMatchedFundingCurveCoefficients", "minimumIcpXdrRate", "toRawPercentage", "toRawDecimals", "decimal", "toRawNeuronsFundMatchedFundingCurveCoefficients", "rewardMode", "by", "fromListNeurons", "neuronIds", "includeEmptyNeurons", "includePublicNeurons", "fromListProposalsRequest", "includeRewardStatus", "beforeProposal", "excludeTopic", "includeStatus", "limit", "includeAllManageNeuronProposals", "omitLargeFields", "fromClaimOrRefreshNeuronRequest", "request", "toClaimOrRefreshRequest", "memo", "rawCommand", "toSplitRawRequest", "toRegisterVoteRequest", "neuronId", "vote", "proposalId", "toCommand", "toMakeProposalRawRequest", "request", "rawCommand", "fromAction", "toManageNeuronsFollowRequest", "topic", "followees", "followeeId", "toDisburseNeuronRequest", "toAccountIdentifier", "amount", "fromAmount", "toMergeMaturityRequest", "percentageToMerge", "toStakeMaturityRequest", "percentageToStake", "toSpawnNeuronRequest", "percentageToSpawn", "newController", "nonce", "toAddHotkeyRequest", "principal", "toConfigureOperation", "toRemoveHotkeyRequest", "toIncreaseDissolveDelayRequest", "additionalDissolveDelaySeconds", "toSetDissolveDelayRequest", "dissolveDelaySeconds", "toJoinCommunityFundRequest", "toAutoStakeMaturityRequest", "autoStake", "toLeaveCommunityFundRequest", "toSetVisibilityRequest", "visibility", "toMergeRequest", "sourceNeuronId", "targetNeuronId", "toStartDissolvingRequest", "toStopDissolvingRequest", "command", "operation", "import_ledger_icp", "import_principal", "import_utils", "toNeuronInfo", "neuronId", "neuronInfo", "rawNeuron", "canisterId", "fullNeuron", "toNeuron", "toBallotInfo", "neuron", "toNeuronId", "p", "toDissolveState", "topic", "followees", "toFollowees", "toRawNeuron", "account", "ballot", "followeesTopic", "followee", "vote", "proposal_id", "dissolveState", "id", "toNeuronIdOrSubaccount", "neuronIdOrSubaccount", "UnsupportedValueError", "toBallot", "votingPower", "toProposal", "title", "url", "action", "summary", "toAction", "_a", "manageNeuron", "toCommand", "networkEconomics", "toNeuronsFundEconomics", "rewardNodeProvider", "toNodeProvider", "toRewardMode", "rewardNodeProviders", "r", "addOrRemoveNodeProvider", "toChange", "knownNeuron", "toKnownNeuron", "SetSnsTokenSwapOpenTimeWindow", "request", "swapCanisterId", "OpenSnsTokenSwap", "params", "createServiceNervousSystem", "toGovernanceParameters", "principalId", "toImage", "toLedgerParameters", "toCanisterIdString", "toSwapParameters", "toInitialTokenDistribution", "installCode", "stopOrStartCanister", "toCanisterSettings", "toTally", "tally", "command", "spawn", "follow", "claimOrRefresh", "toClaimOrRefreshBy", "configure", "toOperation", "registerVote", "disburseToNeuron", "percentage_to_stake", "makeProposal", "disburse", "toAccountIdentifier", "toAmount", "merge", "operation", "removeHotKey", "addHotKey", "requestedSettingForAutoStakeMaturity", "setVisibility", "change", "neuronsFundEconomics", "rawNeuronsFundEconomics", "maximum_icp_xdr_rate", "neurons_fund_matched_funding_curve_coefficients", "max_theoretical_neurons_fund_participation_amount_xdr", "minimum_icp_xdr_rate", "toPercentage", "percentage", "rawPercentage", "basis_points", "rawBasisPoints", "toDecimal", "decimal", "rawDecimal", "human_readable", "rawHumanReadable", "toNeuronsFundMatchedFundingCurveCoefficients", "rawNeuronsFundMatchedFundingCurveCoefficients", "full_participation_milestone_xdr", "one_third_participation_milestone_xdr", "contribution_threshold_xdr", "nodeProvider", "amount", "accountIdentifier", "rewardMode", "by", "toProposalInfo", "proposalInfo", "b", "toArrayOfNeuronInfo", "neuron_infos", "full_neurons", "toListProposalsResponse", "proposal_info", "known_neuron_data", "_b", "_c", "toDuration", "duration", "toGlobalTimeOfDay", "time", "toCountries", "countries", "toTokens", "tokens", "canister", "image", "ledgerParameters", "toVotingRewardParameters", "votingRewardParameters", "governanceParameters", "toNeuronBasketConstructionParameters", "neuronBasketConstructionParameters", "swapParameters", "toSwapDistribution", "swapDistribution", "toNeuronDistribution", "neuronDistribution", "toDeveloperDistribution", "developerDistribution", "initialTokenDistribution", "canisterSettings", "controller", "getSuccessfulCommandFromResponse", "response", "command", "data", "GovernanceError", "manageNeuron", "request", "service", "simulateManageNeuron", "E8S_PER_TOKEN", "GovernanceCanister", "_GovernanceCanister", "canisterId", "service", "certifiedService", "oldListNeuronsCertifiedService", "agent", "certified", "neuronIds", "includeEmptyNeurons", "includePublicNeurons", "rawRequest", "fromListNeurons", "raw_response", "toArrayOfNeuronInfo", "_a", "_b", "_c", "request", "fromListProposalsRequest", "rawResponse", "toListProposalsResponse", "stake", "principal", "fromSubAccount", "ledgerCanister", "createdAt", "fee", "E8S_PER_TOKEN", "InsufficientAmountError", "nonceBytes", "randomBytes", "nonce", "toSubAccount", "accountIdentifier", "neuronId", "CouldNotClaimNeuronError", "additionalDissolveDelaySeconds", "toIncreaseDissolveDelayRequest", "manageNeuron", "dissolveDelaySeconds", "toSetDissolveDelayRequest", "toStartDissolvingRequest", "toStopDissolvingRequest", "toJoinCommunityFundRequest", "params", "toAutoStakeMaturityRequest", "toLeaveCommunityFundRequest", "visibility", "toSetVisibilityRequest", "account", "response", "GovernanceError", "toMergeRequest", "command", "simulateManageNeuron", "merge", "neuronInfo", "rawNeuron", "toNeuronInfo", "UnrecognizedTypeError", "amount", "toSplitRawRequest", "getSuccessfulCommandFromResponse", "neuron", "proposalId", "proposalInfo", "toProposalInfo", "toMakeProposalRawRequest", "cmd", "vote", "toRegisterVoteRequest", "followRequest", "toManageNeuronsFollowRequest", "toAccountId", "toAccountIdentifier", "toDisburseNeuronRequest", "percentageToMerge", "toMergeMaturityRequest", "percentageToStake", "toStakeMaturityRequest", "percentageToSpawn", "newController", "toSpawnNeuronRequest", "createdNeuronId", "toAddHotkeyRequest", "toRemoveHotkeyRequest", "memo", "controller", "toClaimOrRefreshRequest", "fromClaimOrRefreshNeuronRequest", "padding", "shaObj", "sha256", "options", "MAINNET_GOVERNANCE_CANISTER_ID", "idlFactory", "import_ledger_icp", "import_utils", "idlFactory", "IDL", "ManageNeuronRequest", "Proposal", "NeuronId", "Followees", "KnownNeuronData", "KnownNeuron", "Spawn", "Split", "Follow", "ClaimOrRefreshNeuronFromAccount", "By", "ClaimOrRefresh", "RemoveHotKey", "AddHotKey", "ChangeAutoStakeMaturity", "IncreaseDissolveDelay", "SetVisibility", "SetDissolveTimestamp", "Operation", "Configure", "ProposalId", "RegisterVote", "Merge", "DisburseToNeuron", "StakeMaturity", "MergeMaturity", "AccountIdentifier", "Amount", "Disburse", "Command", "NeuronIdOrSubaccount", "ManageNeuron", "Controllers", "CanisterSettings", "UpdateCanisterSettings", "InstallCode", "StopOrStartCanister", "Percentage", "Duration", "Tokens", "VotingRewardParameters", "GovernanceParameters", "Image", "LedgerParameters", "Canister", "NeuronBasketConstructionParameters", "GlobalTimeOfDay", "Countries", "SwapParameters", "SwapDistribution", "NeuronDistribution", "DeveloperDistribution", "InitialTokenDistribution", "CreateServiceNervousSystem", "ExecuteNnsFunction", "NodeProvider", "RewardToNeuron", "RewardToAccount", "RewardMode", "RewardNodeProvider", "NeuronBasketConstructionParameters_1", "Params", "OpenSnsTokenSwap", "TimeWindow", "SetOpenTimeWindowRequest", "SetSnsTokenSwapOpenTimeWindow", "SetDefaultFollowees", "RewardNodeProviders", "Decimal", "NeuronsFundMatchedFundingCurveCoefficients", "NeuronsFundEconomics", "NetworkEconomics", "Principals", "Change", "AddOrRemoveNodeProvider", "Motion", "Action", "MakingSnsProposal", "XdrConversionRate", "MonthlyNodeProviderRewards", "NeuronSubsetMetrics", "GovernanceCachedMetrics", "RestoreAgingNeuronGroup", "RestoreAgingSummary", "RewardEvent", "NeuronStakeTransfer", "Followers", "FollowersMap", "Progress", "Migration", "Migrations", "GovernanceError", "Ballot", "SwapParticipationLimits", "NeuronsFundNeuronPortion", "NeuronsFundSnapshot", "IdealMatchedParticipationFunction", "NeuronsFundParticipation", "NeuronsFundData", "CanisterStatusResultV2", "CanisterSummary", "SwapBackgroundInformation", "DerivedProposalInformation", "Tally", "WaitForQuietState", "ProposalData", "Command_2", "NeuronInFlightCommand", "BallotInfo", "DissolveState", "Neuron", "Governance", "Result", "Result_1", "ClaimOrRefreshNeuronFromAccountResponse", "Result_2", "Result_3", "Result_4", "NeuronInfo", "Result_5", "GetNeuronsFundAuditInfoRequest", "NeuronsFundAuditInfo", "Ok", "Result_6", "GetNeuronsFundAuditInfoResponse", "Result_7", "ProposalInfo", "ListKnownNeuronsResponse", "ListNeurons", "ListNeuronsResponse", "DateRangeFilter", "ListNodeProviderRewardsRequest", "ListNodeProviderRewardsResponse", "ListNodeProvidersResponse", "ListProposalInfo", "ListProposalInfoResponse", "InstallCodeRequest", "ProposalActionRequest", "MakeProposalRequest", "ManageNeuronCommandRequest", "SpawnResponse", "ClaimOrRefreshResponse", "MergeResponse", "MakeProposalResponse", "StakeMaturityResponse", "MergeMaturityResponse", "DisburseResponse", "Command_1", "ManageNeuronResponse", "Committed", "Result_8", "SettleCommunityFundParticipation", "Committed_1", "Result_9", "SettleNeuronsFundParticipationRequest", "NeuronsFundNeuron", "Ok_1", "Result_10", "SettleNeuronsFundParticipationResponse", "UpdateNodeProvider", "GovernanceTestCanister", "_GovernanceTestCanister", "canisterId", "certifiedService", "options", "MAINNET_GOVERNANCE_CANISTER_ID", "idlFactory", "neuron", "rawListNeuronsRequest", "fromListNeurons", "currentNeuron", "rawNeuron", "toRawNeuron", "import_utils", "idlFactory", "IDL", "SnsWasmCanisterInitPayload", "SnsWasm", "AddWasmRequest", "SnsWasmError", "Result", "AddWasmResponse", "NeuronBasketConstructionParameters", "Canister", "DappCanisters", "LinearScalingCoefficient", "IdealMatchedParticipationFunction", "NeuronsFundParticipationConstraints", "TreasuryDistribution", "NeuronDistribution", "DeveloperDistribution", "AirdropDistribution", "SwapDistribution", "FractionalDeveloperVotingPower", "InitialTokenDistribution", "Countries", "SnsInitPayload", "DeployNewSnsRequest", "DappCanistersTransferResult", "SnsCanisterIds", "DeployNewSnsResponse", "GetAllowedPrincipalsResponse", "GetDeployedSnsByProposalIdRequest", "DeployedSns", "GetDeployedSnsByProposalIdResult", "GetDeployedSnsByProposalIdResponse", "SnsVersion", "GetNextSnsVersionRequest", "GetNextSnsVersionResponse", "GetProposalIdThatAddedWasmRequest", "GetProposalIdThatAddedWasmResponse", "GetSnsSubnetIdsResponse", "GetWasmRequest", "GetWasmResponse", "GetWasmMetadataRequest", "MetadataSection", "Ok", "Result_1", "GetWasmMetadataResponse", "SnsUpgrade", "InsertUpgradePathEntriesRequest", "InsertUpgradePathEntriesResponse", "ListDeployedSnsesResponse", "ListUpgradeStepsRequest", "PrettySnsVersion", "ListUpgradeStep", "ListUpgradeStepsResponse", "UpdateAllowedPrincipalsRequest", "UpdateAllowedPrincipalsResult", "UpdateAllowedPrincipalsResponse", "UpdateSnsSubnetListRequest", "UpdateSnsSubnetListResponse", "idlFactory", "IDL", "SnsWasmCanisterInitPayload", "SnsWasm", "AddWasmRequest", "SnsWasmError", "Result", "AddWasmResponse", "NeuronBasketConstructionParameters", "Canister", "DappCanisters", "LinearScalingCoefficient", "IdealMatchedParticipationFunction", "NeuronsFundParticipationConstraints", "TreasuryDistribution", "NeuronDistribution", "DeveloperDistribution", "AirdropDistribution", "SwapDistribution", "FractionalDeveloperVotingPower", "InitialTokenDistribution", "Countries", "SnsInitPayload", "DeployNewSnsRequest", "DappCanistersTransferResult", "SnsCanisterIds", "DeployNewSnsResponse", "GetAllowedPrincipalsResponse", "GetDeployedSnsByProposalIdRequest", "DeployedSns", "GetDeployedSnsByProposalIdResult", "GetDeployedSnsByProposalIdResponse", "SnsVersion", "GetNextSnsVersionRequest", "GetNextSnsVersionResponse", "GetProposalIdThatAddedWasmRequest", "GetProposalIdThatAddedWasmResponse", "GetSnsSubnetIdsResponse", "GetWasmRequest", "GetWasmResponse", "GetWasmMetadataRequest", "MetadataSection", "Ok", "Result_1", "GetWasmMetadataResponse", "SnsUpgrade", "InsertUpgradePathEntriesRequest", "InsertUpgradePathEntriesResponse", "ListDeployedSnsesResponse", "ListUpgradeStepsRequest", "PrettySnsVersion", "ListUpgradeStep", "ListUpgradeStepsResponse", "UpdateAllowedPrincipalsRequest", "UpdateAllowedPrincipalsResult", "UpdateAllowedPrincipalsResponse", "UpdateSnsSubnetListRequest", "UpdateSnsSubnetListResponse", "SnsWasmCanister", "_SnsWasmCanister", "service", "certifiedService", "certified", "instances", "options", "MAINNET_SNS_WASM_CANISTER_ID", "idlFactory", "getNeuronVoteForProposal", "ballots", "neuronId", "_a", "id", "ineligibleNeurons", "neurons", "proposal", "proposalTimestampSeconds", "createdTimestampSeconds", "createdSinceProposal", "dissolveTooShort", "ballotNeuronId", "votableNeurons", "neuron", "ineligibleNeuronId", "votedNeurons"]
}
